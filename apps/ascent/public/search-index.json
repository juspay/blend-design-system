{
    "accordion": {
        "title": "Accordion",
        "description": "The Accordion component creates collapsible content sections that can expand and collapse, helping to organize information hierarchically and save screen space.",
        "path": "components/accordion",
        "slug": "accordion",
        "category": "components",
        "tags": [
            "accordion",
            "component",
            "collapsible",
            "expandable",
            "hierarchical",
            "navigation",
            "organization"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\nAccordion Props\n\n void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nAccordionItem Props\n\n\n\nFeatures\n\n- Visual Variants: Two distinct styles - bordered and borderless for different design contexts\n- Selection Modes: Single or multiple item expansion with controlled state management\n- Flexible Layout: Customizable chevron positioning (left or right side)\n- Rich Content Support: Multiple content slots for icons, subtitles, and additional elements\n- Interactive States: Comprehensive state management including hover, active, and disabled states\n- Accessibility First: Full keyboard navigation with ARIA compliance and screen reader support\n- Smooth Animations: Built-in expand/collapse animations with smooth transitions\n- Responsive Design: Adapts to different screen sizes with responsive design tokens\n- Controlled/Uncontrolled: Support for both controlled and uncontrolled component patterns\n- Customizable Styling: Extensive theming through design tokens for consistent branding\n\nUsage Examples\n\nBasic Accordion\n\nSimple accordion with border styling\n\n\n\nNo Border Accordion\n\nAccordion without border styling for a cleaner look\n\n\n\nMultiple Selection Accordion\n\nAllow multiple items to be expanded simultaneously\n\n\n\nAccordion with Icons and Slots\n\nRich accordion items with icons and additional content\n\n\n\nControlled Accordion\n\nAccordion with controlled state management\n\n\n\nDisabled Accordion Item\n\nAccordion item that cannot be expanded\n\n\n\nComponent Tokens\n\nYou can style the accordion component using the following tokens:\n\n\n\nBehavior\n\nExpansion Modes\n\n- Single Mode: Only one accordion item can be expanded at a time (default behavior)\n- Multiple Mode: Multiple items can be expanded simultaneously when isMultiple={true}\n- Default Values: Set initially expanded items using defaultValue prop\n\nState Management\n\n- Controlled: Use value and onValueChange props for external state control\n- Uncontrolled: Component manages its own internal state when no value prop is provided\n- Disabled Items: Individual items can be disabled while maintaining visual consistency\n\nAnimations\n\n- Smooth Transitions: Built-in CSS transitions for expand/collapse animations\n- Performance Optimized: Uses transform and opacity changes for smooth rendering\n- Accessibility Friendly: Respects user's motion preferences\n\nAccessibility\n\n- Keyboard Navigation: Full keyboard support with Enter/Space to toggle items\n- ARIA Compliance: Proper aria-expanded, aria-controls, and aria-labelledby attributes\n- Screen Reader Support: Descriptive labels and state announcements\n- Focus Management: Clear focus indicators and logical tab order\n- Semantic HTML: Uses proper heading and button elements for structure\n- High Contrast: Supports high contrast mode and custom color schemes\n\nEnums\n\nAccordionType\n\n\n\nAccordionChevronPosition",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\nAccordion Props\n\n void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n    ]}...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Accordion Props",
                "level": 3,
                "id": "accordion-props"
            },
            {
                "title": "AccordionItem Props",
                "level": 3,
                "id": "accordionitem-props"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Accordion",
                "level": 3,
                "id": "basic-accordion"
            },
            {
                "title": "No Border Accordion",
                "level": 3,
                "id": "no-border-accordion"
            },
            {
                "title": "Multiple Selection Accordion",
                "level": 3,
                "id": "multiple-selection-accordion"
            },
            {
                "title": "Accordion with Icons and Slots",
                "level": 3,
                "id": "accordion-with-icons-and-slots"
            },
            {
                "title": "Controlled Accordion",
                "level": 3,
                "id": "controlled-accordion"
            },
            {
                "title": "Disabled Accordion Item",
                "level": 3,
                "id": "disabled-accordion-item"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Expansion Modes",
                "level": 3,
                "id": "expansion-modes"
            },
            {
                "title": "State Management",
                "level": 3,
                "id": "state-management"
            },
            {
                "title": "Animations",
                "level": 3,
                "id": "animations"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "AccordionType",
                "level": 3,
                "id": "accordiontype"
            },
            {
                "title": "AccordionChevronPosition",
                "level": 3,
                "id": "accordionchevronposition"
            }
        ]
    },
    "alert": {
        "title": "Alert",
        "description": "The Alert component is a versatile notification element used to display important messages to users with multiple variants, styles, and interactive options.",
        "path": "components/alert",
        "slug": "alert",
        "category": "components",
        "tags": [
            "alert",
            "component",
            "notification",
            "message",
            "banner",
            "status",
            "feedback"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'icon',\n                hintText: 'Custom icon displayed at the start of the alert',\n            },\n            { content: 'React.ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'actionPlacement',\n                hintText: 'Position of action buttons relative to content',\n            },\n            { content: 'AlertActionPlacement', hintText: 'enum' },\n            { content: 'AlertActionPlacement.RIGHT' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nAlertAction Type\n\nThe AlertAction type defines the structure for action buttons:\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- 7 Semantic Variants: Primary, Success, Warning, Error, Purple, Orange, and Neutral for different message types\n- 2 Visual Styles: Subtle (filled background) and No Fill (outline only) for different design contexts\n- Flexible Actions: Support for primary and secondary action buttons with customizable placement\n- Dismissible: Optional close button with callback functionality\n- Custom Icons: Support for custom icons to enhance visual communication\n- Responsive Layout: Automatic layout adjustment based on content and screen size\n- Accessible Design: Full keyboard navigation and screen reader support\n- Action Placement: Buttons can be positioned on the right or bottom for optimal layout\n- Max Width Control: Built-in max-width of 900px for optimal readability\n- Theme Integration: Consistent styling through design tokens\n\nUsage Examples\n\nBasic Information Alert\n\nSimple alert with heading and description only\n\n\n\nSuccess Alert with Close Button\n\nAlert confirming successful action with dismissible option\n\n\n\nWarning Alert with Actions\n\nAlert requiring user decision with action buttons\n\n\n\nError Alert with Custom Icon\n\nError alert with custom icon for enhanced visual communication\n\n\n\nAlert with Bottom Action Placement\n\nAlert with action buttons positioned below the content\n\n\n\nNo Fill Style Alert\n\nAlert with transparent background and border-only styling\n\n\n\nAlert with Only Close Button\n\nAlert with automatic bottom placement when only close button is provided\n\n\n\nComponent Tokens\n\nYou can style the Alert component using the following tokens:\n\n\n\nBehavior\n\nAction Placement Logic\n\n- Right Placement: When both primary and secondary actions are provided\n- Bottom Placement: When actionPlacement={AlertActionPlacement.BOTTOM} is explicitly set\n- Automatic Bottom: When only onClose is provided without other actions\n\nClose Button Behavior\n\n- Auto-positioning: Close button automatically moves to bottom when no other actions are present\n- Always Visible: Close button remains accessible when onClose prop is provided\n- Icon Consistency: Uses standard X icon from Lucide React\n\nResponsive Behavior\n\n- Max Width: Component has a maximum width of 900px for optimal readability\n- Flexible Layout: Content and actions adapt to available space\n- Mobile Friendly: Action buttons stack appropriately on smaller screens\n\nAccessibility\n\n- Semantic HTML: Uses proper ARIA roles and landmarks for alert content\n- Keyboard Navigation: All interactive elements are keyboard accessible\n- Screen Reader Support: Proper announcements for alert content and state changes\n- Focus Management: Clear focus indicators on all interactive elements\n- Color Independence: Alert meaning conveyed through text, not color alone\n- High Contrast: Supports high contrast mode and custom color schemes\n\nEnums\n\nAlertVariant\n\n\n\nAlertStyle\n\n\n\nAlertActionPlacement",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'icon...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "AlertAction Type",
                "level": 2,
                "id": "alertaction-type"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Information Alert",
                "level": 3,
                "id": "basic-information-alert"
            },
            {
                "title": "Success Alert with Close Button",
                "level": 3,
                "id": "success-alert-with-close-button"
            },
            {
                "title": "Warning Alert with Actions",
                "level": 3,
                "id": "warning-alert-with-actions"
            },
            {
                "title": "Error Alert with Custom Icon",
                "level": 3,
                "id": "error-alert-with-custom-icon"
            },
            {
                "title": "Alert with Bottom Action Placement",
                "level": 3,
                "id": "alert-with-bottom-action-placement"
            },
            {
                "title": "No Fill Style Alert",
                "level": 3,
                "id": "no-fill-style-alert"
            },
            {
                "title": "Alert with Only Close Button",
                "level": 3,
                "id": "alert-with-only-close-button"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Action Placement Logic",
                "level": 3,
                "id": "action-placement-logic"
            },
            {
                "title": "Close Button Behavior",
                "level": 3,
                "id": "close-button-behavior"
            },
            {
                "title": "Responsive Behavior",
                "level": 3,
                "id": "responsive-behavior"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "AlertVariant",
                "level": 3,
                "id": "alertvariant"
            },
            {
                "title": "AlertStyle",
                "level": 3,
                "id": "alertstyle"
            },
            {
                "title": "AlertActionPlacement",
                "level": 3,
                "id": "alertactionplacement"
            }
        ]
    },
    "avatar-group": {
        "title": "Avatar Group",
        "description": "The AvatarGroup component displays multiple user profile images in a compact, stacked layout with overflow handling and optional selection functionality.",
        "path": "components/avatar-group",
        "slug": "avatar-group",
        "category": "components",
        "tags": ["avatar-group", "component", "group", "users", "selection"],
        "content": "Usage\n\n\n\nAPI Reference\n\n void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nAvatarData Type\n\nThe avatars prop accepts an array of AvatarData objects with the following properties:\n\n\n\nFeatures\n\n- Compact stacked layout for displaying multiple avatars\n- Configurable maximum visible count with overflow handling\n- Interactive overflow counter with searchable dropdown menu\n- Optional multi-selection functionality with visual feedback\n- Consistent sizing and shape options across all avatars\n- Accessible keyboard navigation and screen reader support\n- Automatic positioning of overflow menu\n- Built-in search functionality for large avatar lists\n- Smooth animations and hover effects\n\nUsage Examples\n\nBasic Avatar Group\n\nSimple avatar group with default settings\n\n\n\nAvatar Group with Overflow\n\nAvatar group that shows overflow counter when exceeding maxCount\n\n\n\nAvatar Group with Selection\n\nAvatar group with controlled selection functionality\n\n\n\nDifferent Sizes\n\nAvatar groups in various sizes\n\n\n\nRounded Shape\n\nAvatar group with rounded corners instead of circular\n\n\n\nAvatar Group with Online Status\n\nAvatar group showing online status indicators\n\n\n\nLarge Avatar Group with Search\n\nAvatar group with many avatars demonstrating search functionality\n\n\n\nComponent Tokens\n\nYou can style the avatar group component using the following tokens:\n\n\n\nAccessibility\n\n- ARIA Support: Uses proper ARIA roles and labels for screen readers\n- Keyboard Navigation: Full keyboard support with Enter/Space activation\n- Focus Management: Clear focus indicators and logical tab order\n- Screen Reader Announcements: Announces selection state and overflow information\n- Semantic HTML: Uses appropriate button and group roles\n- High Contrast: Supports high contrast mode with proper color tokens",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "AvatarData Type",
                "level": 2,
                "id": "avatardata-type"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Avatar Group",
                "level": 3,
                "id": "basic-avatar-group"
            },
            {
                "title": "Avatar Group with Overflow",
                "level": 3,
                "id": "avatar-group-with-overflow"
            },
            {
                "title": "Avatar Group with Selection",
                "level": 3,
                "id": "avatar-group-with-selection"
            },
            {
                "title": "Different Sizes",
                "level": 3,
                "id": "different-sizes"
            },
            {
                "title": "Rounded Shape",
                "level": 3,
                "id": "rounded-shape"
            },
            {
                "title": "Avatar Group with Online Status",
                "level": 3,
                "id": "avatar-group-with-online-status"
            },
            {
                "title": "Large Avatar Group with Search",
                "level": 3,
                "id": "large-avatar-group-with-search"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            }
        ]
    },
    "avatar": {
        "title": "Avatar",
        "description": "The Avatar component displays user profile images, initials, or fallback icons with various sizes and styling options for user identification and personalization.",
        "path": "components/avatar",
        "slug": "avatar",
        "category": "components",
        "tags": ["avatar", "component", "user", "profile", "image"],
        "content": "Usage\n\n\n\nAPI Reference\n\n\n\nFeatures\n\n- Multiple size variants (SM, MD, LG, XL)\n- Two shape options (circular and rounded)\n- Automatic fallback to initials when image fails\n- Custom fallback content support\n- Online status indicator\n- Leading and trailing slots for additional content\n- Accessible screen reader support\n- Automatic image error handling\n- Customizable styling through design tokens\n\nUsage Examples\n\nBasic Avatar\n\nSimple avatar with image source\n\n\n\nAvatar with Initials Fallback\n\nAvatar that shows initials when image is unavailable\n\n\n\nCustom Fallback Content\n\nAvatar with custom fallback content\n\n\n\nOnline Status Indicator\n\nAvatar with online status indicator\n\n\n\nDifferent Sizes\n\nAvatars in various sizes\n\n\n\nRounded Shape\n\nAvatar with rounded corners instead of circular\n\n\n\nAvatar with Slots\n\nAvatar with leading and trailing content\n\n\n\nText-Only Avatar\n\nAvatar using only initials (no image)\n\n\n\nComponent Tokens\n\nYou can style the avatar component using the following tokens:\n\n\n\nEnums\n\nAvatarSize\n\n\n\nAvatarShape",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n\n\nFeatures\n\n- Multiple size variants (SM, MD, LG, XL)\n- Two shape options (circular and rounded)\n- Automatic fallback to initi...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Avatar",
                "level": 3,
                "id": "basic-avatar"
            },
            {
                "title": "Avatar with Initials Fallback",
                "level": 3,
                "id": "avatar-with-initials-fallback"
            },
            {
                "title": "Custom Fallback Content",
                "level": 3,
                "id": "custom-fallback-content"
            },
            {
                "title": "Online Status Indicator",
                "level": 3,
                "id": "online-status-indicator"
            },
            {
                "title": "Different Sizes",
                "level": 3,
                "id": "different-sizes"
            },
            {
                "title": "Rounded Shape",
                "level": 3,
                "id": "rounded-shape"
            },
            {
                "title": "Avatar with Slots",
                "level": 3,
                "id": "avatar-with-slots"
            },
            {
                "title": "Text-Only Avatar",
                "level": 3,
                "id": "text-only-avatar"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "AvatarSize",
                "level": 3,
                "id": "avatarsize"
            },
            {
                "title": "AvatarShape",
                "level": 3,
                "id": "avatarshape"
            }
        ]
    },
    "breadcrumb": {
        "title": "Breadcrumb",
        "description": "The Breadcrumb component provides navigation context by showing the current page's location within a site hierarchy, helping users understand where they are and navigate back.",
        "path": "components/breadcrumb",
        "slug": "breadcrumb",
        "category": "components",
        "tags": ["breadcrumb", "component", "navigation", "hierarchy", "path"],
        "content": "Usage\n\n\n\nAPI Reference\n\n\n\nBreadcrumbItemType\n\nEach item in the items array should have the following structure:\n\n\n\nFeatures\n\n- Hierarchical navigation display with clear visual separators\n- Automatic overflow handling for long navigation paths (max 4 visible items)\n- Responsive design that adapts to different screen sizes\n- Support for custom icons and content through left/right slots\n- Active state styling for the current page (last item)\n- Keyboard accessible navigation with proper focus management\n- Ellipsis menu for collapsed items (when more than 4 items)\n- Consistent spacing and typography following design tokens\n\nUsage Examples\n\nBasic Breadcrumb\n\nSimple breadcrumb with text-only navigation\n\n\n\nBreadcrumb with Icons\n\nBreadcrumb items with left slot icons\n\n\n\nLong Navigation Path\n\nBreadcrumb with overflow handling (shows ellipsis for middle items)\n\n\n\nBreadcrumb with Right Slots\n\nBreadcrumb items with additional content on the right\n\n\n\nSingle Item Breadcrumb\n\nBreadcrumb with just one item (shows as active)\n\n\n\nEmpty Breadcrumb\n\nBreadcrumb gracefully handles empty array\n\n\n\nComplex Navigation with Mixed Content\n\nBreadcrumb with various combinations of slots\n\n\n\nComponent Tokens\n\nYou can style the breadcrumb component using the following tokens:\n\n\n\nBehavior\n\nOverflow Handling\n\n- Up to 4 items: All items are displayed\n- More than 4 items: Shows first item + ellipsis + last 3 items\n- Ellipsis button: Indicates collapsed items (menu functionality planned)\n\nActive State\n\n- The last item in the breadcrumb is considered \"active\" (current page)\n- Active items use different styling (color, font weight)\n- Active items are not clickable (no href applied)\n\nNavigation\n\n- All items except the last one are clickable links\n- Proper semantic HTML structure for screen readers\n- Keyboard navigation support through standard link behavior\n\nAccessibility\n\n- Semantic HTML: Uses proper link elements for navigation\n- ARIA Support: Proper roles and labels for screen readers\n- Keyboard Navigation: Standard tab navigation through links\n- Visual Hierarchy: Clear distinction between active and inactive states\n- Focus Management: Visible focus indicators for keyboard users",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n\n\nBreadcrumbItemType\n\nEach item in the items array should have the following structure:\n\n\n\nFeatures\n\n- Hierarchical navigation...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "BreadcrumbItemType",
                "level": 2,
                "id": "breadcrumbitemtype"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Breadcrumb",
                "level": 3,
                "id": "basic-breadcrumb"
            },
            {
                "title": "Breadcrumb with Icons",
                "level": 3,
                "id": "breadcrumb-with-icons"
            },
            {
                "title": "Long Navigation Path",
                "level": 3,
                "id": "long-navigation-path"
            },
            {
                "title": "Breadcrumb with Right Slots",
                "level": 3,
                "id": "breadcrumb-with-right-slots"
            },
            {
                "title": "Single Item Breadcrumb",
                "level": 3,
                "id": "single-item-breadcrumb"
            },
            {
                "title": "Empty Breadcrumb",
                "level": 3,
                "id": "empty-breadcrumb"
            },
            {
                "title": "Complex Navigation with Mixed Content",
                "level": 3,
                "id": "complex-navigation-with-mixed-content"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Overflow Handling",
                "level": 3,
                "id": "overflow-handling"
            },
            {
                "title": "Active State",
                "level": 3,
                "id": "active-state"
            },
            {
                "title": "Navigation",
                "level": 3,
                "id": "navigation"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            }
        ]
    },
    "button-group": {
        "title": "Button Group",
        "description": "The ButtonGroup component is a container that groups multiple Button components together with flexible layout options and automatic positioning for cohesive action interfaces.",
        "path": "components/button-group",
        "slug": "button-group",
        "category": "components",
        "tags": ["button-group", "component", "layout", "container", "actions"],
        "content": "Usage\n\n\n\nAPI Reference\n\n | ReactElement[]',\n                hintText: 'React elements',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- 2 Layout Modes: Horizontal (default) and vertical stacked layouts for different design contexts\n- Automatic Positioning: Intelligent button positioning with left, center, and right positioning in stacked mode\n- Seamless Integration: Works exclusively with Button components for consistent styling\n- Smart Spacing: Automatic gap management - 10px for horizontal, 0px for stacked layout\n- Dynamic Children: Supports any number of Button components as children\n- Position Awareness: Automatically sets buttonGroupPosition prop for stacked buttons\n- Flexible Styling: Inherits all Button component styling capabilities\n- Responsive Design: Adapts to container constraints and screen sizes\n- Type Safety: TypeScript support with proper Button component validation\n- Clean Rendering: Optimized rendering with React.cloneElement for stacked mode\n\nUsage Examples\n\nBasic Horizontal Group\n\nDefault horizontal layout with standard spacing\n\n\n\nStacked Vertical Group\n\nVertical layout with connected button styling\n\n\n\nForm Action Buttons\n\nCommon form submission pattern\n\n\n\nNavigation Button Group\n\nStacked navigation menu with different button types\n\n\n\nDialog Action Buttons\n\nStandard dialog confirmation pattern\n\n\n\nToolbar Actions\n\nMultiple action buttons in horizontal layout\n\n\n\nLoading State Group\n\nButton group with loading states\n\n\n\nMixed Size Buttons\n\nButtons with different sizes in one group\n\n\n\nComponent Tokens\n\nButtonGroup uses the Button component's tokens for styling. The container itself has minimal styling:\n\n\n\nBehavior\n\nLayout Modes\n\n- Horizontal (Default): Buttons arranged side-by-side with 10px gap\n- Stacked: Buttons arranged vertically with 0px gap for connected appearance\n\nAutomatic Positioning\n\n- First Button: Gets buttonGroupPosition=\"left\" in stacked mode\n- Middle Buttons: Get buttonGroupPosition=\"center\" in stacked mode\n- Last Button: Gets buttonGroupPosition=\"right\" in stacked mode\n- Single Button: Gets buttonGroupPosition=\"left\" in stacked mode\n\nChildren Management\n\n- Type Safety: Only accepts Button components as children\n- Dynamic Rendering: Automatically handles single or multiple Button children\n- Prop Injection: Adds positioning props to buttons in stacked mode\n- Key Management: Preserves existing keys or generates index-based keys\n\nResponsive Behavior\n\n- Container Adaptation: Adapts to parent container constraints\n- Button Scaling: Individual buttons maintain their responsive behavior\n- Overflow Handling: Horizontal groups may wrap based on Button properties\n\nAccessibility\n\n- Focus Management: Maintains proper tab order through button sequence\n- Keyboard Navigation: Standard button keyboard navigation (Tab, Enter, Space)\n- Screen Reader Support: Each button maintains its individual accessibility features\n- Semantic Structure: Uses proper button semantics for each child component\n- ARIA Compliance: Inherits ARIA attributes from individual Button components\n- High Contrast: Supports high contrast mode through Button component styling\n\nLayout Specifications\n\nHorizontal Layout (Default)\n\n\n\nStacked Layout\n\n\n\nBest Practices\n\nWhen to Use Horizontal Layout\n\n- Form action buttons (Cancel, Submit)\n- Dialog confirmations (No, Yes)\n- Navigation controls (Previous, Next)\n- Toolbar actions with limited buttons\n\nWhen to Use Stacked Layout\n\n- Vertical navigation menus\n- Action lists in sidebars\n- Mobile-first button groups\n- When vertical space is preferred over horizontal\n\nButton Combinations\n\n- Primary + Secondary: Most common pattern for forms\n- Multiple Secondary: For equal-weight actions\n- Danger + Secondary: For destructive confirmations\n- Success + Secondary: For positive confirmations",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n | ReactElement[]',\n                hintText: 'React elements',\n            },\n            { content: '' },\n        ],\n    ]}...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Horizontal Group",
                "level": 3,
                "id": "basic-horizontal-group"
            },
            {
                "title": "Stacked Vertical Group",
                "level": 3,
                "id": "stacked-vertical-group"
            },
            {
                "title": "Form Action Buttons",
                "level": 3,
                "id": "form-action-buttons"
            },
            {
                "title": "Navigation Button Group",
                "level": 3,
                "id": "navigation-button-group"
            },
            {
                "title": "Dialog Action Buttons",
                "level": 3,
                "id": "dialog-action-buttons"
            },
            {
                "title": "Toolbar Actions",
                "level": 3,
                "id": "toolbar-actions"
            },
            {
                "title": "Loading State Group",
                "level": 3,
                "id": "loading-state-group"
            },
            {
                "title": "Mixed Size Buttons",
                "level": 3,
                "id": "mixed-size-buttons"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Layout Modes",
                "level": 3,
                "id": "layout-modes"
            },
            {
                "title": "Automatic Positioning",
                "level": 3,
                "id": "automatic-positioning"
            },
            {
                "title": "Children Management",
                "level": 3,
                "id": "children-management"
            },
            {
                "title": "Responsive Behavior",
                "level": 3,
                "id": "responsive-behavior"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Layout Specifications",
                "level": 2,
                "id": "layout-specifications"
            },
            {
                "title": "Horizontal Layout (Default)",
                "level": 3,
                "id": "horizontal-layout-default"
            },
            {
                "title": "Stacked Layout",
                "level": 3,
                "id": "stacked-layout"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use Horizontal Layout",
                "level": 3,
                "id": "when-to-use-horizontal-layout"
            },
            {
                "title": "When to Use Stacked Layout",
                "level": 3,
                "id": "when-to-use-stacked-layout"
            },
            {
                "title": "Button Combinations",
                "level": 3,
                "id": "button-combinations"
            }
        ]
    },
    "button": {
        "title": "Button",
        "description": "The Button component is a fundamental UI element used for user interactions, supporting multiple variants, sizes, and states.",
        "path": "components/button",
        "slug": "button",
        "category": "components",
        "tags": ["button", "component", "interaction", "action", "primary"],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'loading',\n                hintText: 'Alternative prop for loading state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'fullWidth',\n                hintText:\n                    'Whether the button should take full width of its container',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'buttonGroupPosition',\n                hintText: 'Position when used within a button group',\n            },\n            { content: \"'center' | 'left' | 'right'\", hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'justifyContent',\n                hintText:\n                    'CSS justify-content property for button content alignment',\n            },\n            {\n                content: 'CSSObject[\"justifyContent\"]',\n                hintText: 'CSS property',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- 4 Button Types: Primary, Secondary, Danger, and Success variants for different actions\n- 3 Size Options: Small, Medium, and Large sizes for various interface contexts\n- 3 Sub-Types: Default, Icon Only, and Inline styles for different use cases\n- Icon Support: Leading and trailing icons with proper spacing and alignment\n- Loading States: Built-in loading spinner with text replacement\n- Disabled States: Visual and interactive disabled state support\n- Full Width Option: Expandable to container width when needed\n- Button Group Support: Integrated positioning for button group components\n- Flexible Alignment: Customizable content justification\n- Accessible Design: Full keyboard navigation and screen reader support\n- Consistent Styling: Design token integration for consistent theming\n\nUsage Examples\n\nBasic Button\n\nSimple primary button with text only\n\n\n\nButton with Leading Icon\n\nButton with an icon positioned before the text\n\n\n\nButton with Trailing Icon\n\nButton with an icon positioned after the text\n\n\n\nIcon Only Button\n\nButton displaying only an icon without text\n\n\n\nLoading Button\n\nButton in loading state with spinner\n\n\n\nDisabled Button\n\nButton in disabled state\n\n\n\nDanger Button\n\nButton for destructive actions\n\n\n\nSuccess Button\n\nButton for positive confirmation actions\n\n\n\nFull Width Button\n\nButton that expands to fill container width\n\n\n\nInline Button\n\nButton with inline styling for text-like appearance\n\n\n\nSmall Size Button\n\nCompact button for tight spaces\n\n\n\nLarge Size Button\n\nProminent button for primary actions\n\n\n\nComponent Tokens\n\nYou can style the Button component using the following tokens:\n\n\n\nBehavior\n\nLoading State\n\n- Spinner Display: Shows loading spinner and hides text content\n- Disabled Interaction: Button becomes non-interactive during loading\n- Visual Feedback: Provides clear indication of ongoing process\n\nDisabled State\n\n- Visual Changes: Reduced opacity and muted colors\n- Interaction Prevention: Click events are prevented\n- Focus Management: Button cannot receive keyboard focus\n\nIcon Positioning\n\n- Leading Icons: Positioned before text with proper spacing\n- Trailing Icons: Positioned after text with proper spacing\n- Icon Only: Centers icon when no text is present\n\nSize Scaling\n\n- Proportional Scaling: All elements scale proportionally with size\n- Icon Sizing: Icons automatically resize based on button size\n- Padding Adjustment: Internal spacing adjusts for optimal proportions\n\nAccessibility\n\n- Keyboard Navigation: Full keyboard support with Enter and Space key activation\n- Focus Indicators: Clear visual focus indicators for keyboard users\n- Screen Reader Support: Proper labeling and state announcements\n- ARIA Attributes: Appropriate aria-disabled and aria-pressed attributes\n- Color Independence: Button functionality conveyed through more than color alone\n- High Contrast: Supports high contrast mode and custom color schemes\n\nEnums\n\nButtonType\n\n\n\nButtonSize\n\n\n\nButtonSubType",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'load...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Button",
                "level": 3,
                "id": "basic-button"
            },
            {
                "title": "Button with Leading Icon",
                "level": 3,
                "id": "button-with-leading-icon"
            },
            {
                "title": "Button with Trailing Icon",
                "level": 3,
                "id": "button-with-trailing-icon"
            },
            {
                "title": "Icon Only Button",
                "level": 3,
                "id": "icon-only-button"
            },
            {
                "title": "Loading Button",
                "level": 3,
                "id": "loading-button"
            },
            {
                "title": "Disabled Button",
                "level": 3,
                "id": "disabled-button"
            },
            {
                "title": "Danger Button",
                "level": 3,
                "id": "danger-button"
            },
            {
                "title": "Success Button",
                "level": 3,
                "id": "success-button"
            },
            {
                "title": "Full Width Button",
                "level": 3,
                "id": "full-width-button"
            },
            {
                "title": "Inline Button",
                "level": 3,
                "id": "inline-button"
            },
            {
                "title": "Small Size Button",
                "level": 3,
                "id": "small-size-button"
            },
            {
                "title": "Large Size Button",
                "level": 3,
                "id": "large-size-button"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Loading State",
                "level": 3,
                "id": "loading-state"
            },
            {
                "title": "Disabled State",
                "level": 3,
                "id": "disabled-state"
            },
            {
                "title": "Icon Positioning",
                "level": 3,
                "id": "icon-positioning"
            },
            {
                "title": "Size Scaling",
                "level": 3,
                "id": "size-scaling"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "ButtonType",
                "level": 3,
                "id": "buttontype"
            },
            {
                "title": "ButtonSize",
                "level": 3,
                "id": "buttonsize"
            },
            {
                "title": "ButtonSubType",
                "level": 3,
                "id": "buttonsubtype"
            }
        ]
    },
    "charts": {
        "title": "Charts",
        "description": "The Charts component provides comprehensive data visualization with support for line charts, bar charts, and pie charts, featuring interactive legends, customizable axes, and responsive design.",
        "path": "components/charts",
        "slug": "charts",
        "category": "components",
        "tags": [
            "charts",
            "component",
            "data-visualization",
            "analytics",
            "graphs",
            "recharts"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n\n\nData Types\n\nNewNestedDataPoint\n\nThe main data structure for chart data:\n\n\n\nDataPoint\n\nStructure for individual data series:\n\n\n\nAxisConfig\n\nConfiguration for chart axes:\n\n string',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            { content: 'customTick', hintText: 'Custom tick component' },\n            {\n                content: 'React.ComponentType',\n                hintText: 'component',\n            },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'dateOnly',\n                hintText: 'For date axes, show only date without time',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'smart',\n                hintText: 'Enable smart formatting and intervals',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- 3 Chart Types: Line, Bar, and Pie charts for different data visualization needs\n- Interactive Legends: Clickable legends with hover effects and data series toggling\n- Responsive Design: Adapts to different screen sizes with mobile-optimized layouts\n- Fullscreen Mode: Built-in fullscreen toggle for detailed data analysis\n- Custom Axes: Configurable X and Y axes with multiple data types and formatting options\n- Flexible Data Structure: Nested data format supporting multiple series and auxiliary data\n- Color Customization: Customizable color schemes with default palette\n- Header Slots: Multiple slots for custom header content and controls\n- Stacked Legends: Advanced legend layout with delta values and change indicators\n- Tooltip Integration: Rich tooltips with custom formatting and data display\n- Export Capabilities: Built-in chart export and fullscreen viewing\n- Accessibility Support: Screen reader compatible with proper ARIA labels\n\nUsage Examples\n\nBasic Line Chart\n\nSimple line chart with two data series\n\n\n\nBar Chart with Custom Axes\n\nBar chart with currency formatting on Y-axis\n\n\n\nPie Chart with Legend\n\nPie chart showing market share distribution\n\n\n\nChart with Header Slots\n\nChart with custom header content in multiple slots\n\n\n\nChart with Stacked Legends\n\nChart with delta values and change indicators\n\n\n\nChart with Custom Tick Formatting\n\nChart with percentage formatting and custom intervals\n\n\n\nResponsive Chart with Mobile Layout\n\nChart optimized for different screen sizes\n\n\n\nComponent Tokens\n\nYou can style the Charts component using the following tokens:\n\n\n\nBehavior\n\nInteractive Features\n\n- Legend Interaction: Click legends to toggle data series visibility\n- Hover Effects: Hover over chart elements for detailed tooltips\n- Fullscreen Mode: Toggle fullscreen for detailed analysis\n- Responsive Legends: Legends adapt position based on screen size\n\nData Processing\n\n- Data Transformation: Automatically flattens nested data for chart libraries\n- Series Management: Dynamic handling of multiple data series\n- Key Selection: Interactive selection and deselection of data keys\n\nMobile Responsiveness\n\n- Layout Adaptation: Automatic layout changes for small screens\n- Touch Interactions: Optimized touch interactions for mobile devices\n- Legend Positioning: Smart legend positioning based on screen size\n\nAccessibility\n\n- Keyboard Navigation: Full keyboard support for interactive elements\n- Screen Reader Support: Proper ARIA labels and data announcements\n- High Contrast: Supports high contrast mode and custom color schemes\n- Focus Management: Clear focus indicators for all interactive elements\n- Alternative Text: Meaningful descriptions for chart data\n- Color Independence: Chart data conveyed through patterns and labels, not just color\n\nEnums\n\nChartType\n\n\n\nChartLegendPosition\n\n\n\nAxisType\n\n\n\nAxisIntervalType\n\n\n\nLegendsChangeType",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n\n\nData Types\n\nNewNestedDataPoint\n\nThe main data structure for chart data:\n\n\n\nDataPoint\n\nStructure for individual data series:...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Data Types",
                "level": 2,
                "id": "data-types"
            },
            {
                "title": "NewNestedDataPoint",
                "level": 3,
                "id": "newnesteddatapoint"
            },
            {
                "title": "DataPoint",
                "level": 3,
                "id": "datapoint"
            },
            {
                "title": "AxisConfig",
                "level": 3,
                "id": "axisconfig"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Line Chart",
                "level": 3,
                "id": "basic-line-chart"
            },
            {
                "title": "Bar Chart with Custom Axes",
                "level": 3,
                "id": "bar-chart-with-custom-axes"
            },
            {
                "title": "Pie Chart with Legend",
                "level": 3,
                "id": "pie-chart-with-legend"
            },
            {
                "title": "Chart with Header Slots",
                "level": 3,
                "id": "chart-with-header-slots"
            },
            {
                "title": "Chart with Stacked Legends",
                "level": 3,
                "id": "chart-with-stacked-legends"
            },
            {
                "title": "Chart with Custom Tick Formatting",
                "level": 3,
                "id": "chart-with-custom-tick-formatting"
            },
            {
                "title": "Responsive Chart with Mobile Layout",
                "level": 3,
                "id": "responsive-chart-with-mobile-layout"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Interactive Features",
                "level": 3,
                "id": "interactive-features"
            },
            {
                "title": "Data Processing",
                "level": 3,
                "id": "data-processing"
            },
            {
                "title": "Mobile Responsiveness",
                "level": 3,
                "id": "mobile-responsiveness"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "ChartType",
                "level": 3,
                "id": "charttype"
            },
            {
                "title": "ChartLegendPosition",
                "level": 3,
                "id": "chartlegendposition"
            },
            {
                "title": "AxisType",
                "level": 3,
                "id": "axistype"
            },
            {
                "title": "AxisIntervalType",
                "level": 3,
                "id": "axisintervaltype"
            },
            {
                "title": "LegendsChangeType",
                "level": 3,
                "id": "legendschangetype"
            }
        ]
    },
    "checkbox": {
        "title": "Checkbox",
        "description": "The Checkbox component allows users to select one or more options from a list, with support for indeterminate states, custom styling, and comprehensive accessibility features.",
        "path": "components/checkbox",
        "slug": "checkbox",
        "category": "components",
        "tags": [
            "checkbox",
            "component",
            "form",
            "input",
            "selection",
            "control"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n void\",\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText:\n                    'Whether the checkbox is disabled and non-interactive',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'required',\n                hintText:\n                    'Whether the checkbox is required for form validation',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'error',\n                hintText: 'Whether the checkbox is in an error state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'size',\n                hintText: 'The size variant of the checkbox',\n            },\n            { content: 'CheckboxSize', hintText: 'enum' },\n            { content: 'CheckboxSize.MEDIUM' },\n        ],\n        [\n            {\n                content: 'children',\n                hintText: 'The label content displayed next to the checkbox',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'subtext',\n                hintText: 'Optional descriptive text displayed below the label',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'slot',\n                hintText: 'Optional content slot for additional elements',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- 3 Checkbox States: Checked, unchecked, and indeterminate states for complex scenarios\n- 2 Size Options: Small and medium sizes for different interface contexts\n- Interactive States: Hover, disabled, and error states with visual feedback\n- Controlled/Uncontrolled: Support for both controlled and uncontrolled component patterns\n- Form Integration: Seamless integration with forms including validation support\n- Accessibility First: Full ARIA compliance and keyboard navigation support\n- Custom Content: Support for labels, subtext, and additional content slots\n- Responsive Design: Consistent sizing and spacing across different screen sizes\n- Error Handling: Built-in error state styling for form validation\n- Icon Integration: Uses Lucide React icons for consistent check and indeterminate indicators\n- Theme Integration: Fully styled using design tokens for consistent theming\n\nUsage Examples\n\nBasic Checkbox\n\nSimple checkbox with label text\n\n\n\nCheckbox with Subtext\n\nCheckbox with additional descriptive text\n\n\n\nSmall Size Checkbox\n\nCompact checkbox for dense layouts\n\n\n\nIndeterminate Checkbox\n\nCheckbox in indeterminate state (partially selected)\n\n\n\nDisabled Checkbox\n\nNon-interactive checkbox in disabled state\n\n\n\nRequired Checkbox\n\nCheckbox marked as required for form validation\n\n\n\nError State Checkbox\n\nCheckbox in error state for validation feedback\n\n\n\nCheckbox with Custom Slot\n\nCheckbox with additional content in the slot\n\n\n\nUncontrolled Checkbox\n\nCheckbox with default state (uncontrolled)\n\n\n\nCheckbox List\n\nMultiple checkboxes for option selection\n\n\n\nForm Integration Example\n\nCheckbox integrated with form handling\n\n\n\nComponent Tokens\n\nYou can style the Checkbox component using the following tokens:\n\n\n\nBehavior\n\nState Management\n\n- Controlled: Use checked and onCheckedChange props for external state control\n- Uncontrolled: Use defaultChecked for internal state management\n- Indeterminate: Special state for partial selection scenarios\n\nInteractive States\n\n- Default: Normal interactive state with hover effects\n- Hover: Visual feedback on mouse hover\n- Disabled: Non-interactive state with reduced opacity\n- Error: Red styling to indicate validation errors\n\nForm Integration\n\n- Required Field: Visual indicators and validation support\n- Value Handling: Proper value attribute for form submissions\n- Validation: Error state styling for failed validation\n\nAccessibility Features\n\n- Keyboard Navigation: Tab navigation and Space key activation\n- Screen Reader: Proper labeling and state announcements\n- Focus Indicators: Clear visual focus indicators\n\nAccessibility\n\n- ARIA Compliance: Proper aria-checked, aria-disabled, and aria-required attributes\n- Keyboard Navigation: Full keyboard support with Tab and Space key activation\n- Screen Reader Support: Descriptive labels and state announcements\n- Focus Management: Clear focus indicators with proper contrast\n- Label Association: Proper label-input association using htmlFor attributes\n- Error Announcements: Screen reader announcements for error states\n- High Contrast: Supports high contrast mode and custom color schemes\n\nEnums\n\nCheckboxSize\n\n\n\nCheckbox States\n\n\n\nBest Practices\n\nWhen to Use\n\n- Multiple Selection: When users need to select multiple options\n- Terms Acceptance: For accepting terms, conditions, or agreements\n- Settings/Preferences: For enabling/disabling features or options\n- Form Controls: As part of larger forms for data collection\n\nLabel Guidelines\n\n- Clear and Concise: Use descriptive labels that clearly explain what will happen\n- Action-Oriented: Frame labels as actions (e.g., \"Enable notifications\")\n- Positive Language: Use positive phrasing when possible\n- Context Specific: Provide additional context through subtext when needed\n\nIndeterminate State\n\n- Partial Selection: Use when representing a partially selected state\n- Parent-Child Relationships: Common in hierarchical lists or tree structures\n- Group Selection: When some but not all items in a group are selected",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void\",\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            {...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Checkbox",
                "level": 3,
                "id": "basic-checkbox"
            },
            {
                "title": "Checkbox with Subtext",
                "level": 3,
                "id": "checkbox-with-subtext"
            },
            {
                "title": "Small Size Checkbox",
                "level": 3,
                "id": "small-size-checkbox"
            },
            {
                "title": "Indeterminate Checkbox",
                "level": 3,
                "id": "indeterminate-checkbox"
            },
            {
                "title": "Disabled Checkbox",
                "level": 3,
                "id": "disabled-checkbox"
            },
            {
                "title": "Required Checkbox",
                "level": 3,
                "id": "required-checkbox"
            },
            {
                "title": "Error State Checkbox",
                "level": 3,
                "id": "error-state-checkbox"
            },
            {
                "title": "Checkbox with Custom Slot",
                "level": 3,
                "id": "checkbox-with-custom-slot"
            },
            {
                "title": "Uncontrolled Checkbox",
                "level": 3,
                "id": "uncontrolled-checkbox"
            },
            {
                "title": "Checkbox List",
                "level": 3,
                "id": "checkbox-list"
            },
            {
                "title": "Form Integration Example",
                "level": 3,
                "id": "form-integration-example"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "State Management",
                "level": 3,
                "id": "state-management"
            },
            {
                "title": "Interactive States",
                "level": 3,
                "id": "interactive-states"
            },
            {
                "title": "Form Integration",
                "level": 3,
                "id": "form-integration"
            },
            {
                "title": "Accessibility Features",
                "level": 3,
                "id": "accessibility-features"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "CheckboxSize",
                "level": 3,
                "id": "checkboxsize"
            },
            {
                "title": "Checkbox States",
                "level": 3,
                "id": "checkbox-states"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use",
                "level": 3,
                "id": "when-to-use"
            },
            {
                "title": "Label Guidelines",
                "level": 3,
                "id": "label-guidelines"
            },
            {
                "title": "Indeterminate State",
                "level": 3,
                "id": "indeterminate-state"
            }
        ]
    },
    "data-table": {
        "title": "Data Table",
        "description": "The DataTable component displays structured data in a tabular format with sorting, filtering, pagination, and selection capabilities for managing large datasets efficiently.",
        "path": "components/data-table",
        "slug": "data-table",
        "category": "components",
        "tags": [
            "data-table",
            "component",
            "table",
            "pagination",
            "sorting",
            "filtering"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n[]', hintText: 'array' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'idField',\n                hintText: 'Field name to use as unique identifier for rows',\n            },\n            { content: 'keyof T', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'title',\n                hintText: 'Optional title displayed above the table',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'description',\n                hintText: 'Optional description displayed below the title',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'enableSearch',\n                hintText: 'Enable global search functionality',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'enableFiltering',\n                hintText: 'Enable column-based filtering',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'enableRowSelection',\n                hintText: 'Enable row selection with checkboxes',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'enableRowExpansion',\n                hintText: 'Enable expandable rows for additional content',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'pagination',\n                hintText: 'Pagination configuration object',\n            },\n            { content: 'PaginationConfig', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'isLoading',\n                hintText: 'Show loading state for async operations',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nColumnDefinition\n\nEach column in the columns array should have the following structure:\n\n ReactNode',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nColumn Types\n\nThe DataTable supports various column types for different data presentations:\n\n\n\nFeatures\n\n- Flexible Column Types: Support for text, numbers, avatars, tags, progress bars, dates, and custom React elements\n- Advanced Sorting: Multi-column sorting with ascending/descending directions\n- Powerful Filtering: Column-based filters with multiple filter types (text, number, select, multiselect, date, boolean)\n- Global Search: Search across all columns or specific fields\n- Pagination: Client-side and server-side pagination with customizable page sizes\n- Row Selection: Single or multiple row selection with bulk actions\n- Row Expansion: Expandable rows for displaying additional content\n- Inline Editing: Editable cells with validation and save/cancel functionality\n- Column Management: Show/hide columns and adjust column order\n- Mobile Responsive: Optimized mobile view with column selection\n- Loading States: Built-in loading indicators for async operations\n- Export Functionality: Export selected rows to CSV\n- Custom Styling: Extensive theming with responsive design tokens\n- Accessibility: Full keyboard navigation and screen reader support\n\nUsage Examples\n\nBasic Data Table\n\nSimple table with text columns and sorting\n\n\n\nTable with Search and Filtering\n\nTable with global search and column filters\n\n\n\nTable with Row Selection and Bulk Actions\n\nTable with row selection and bulk action capabilities\n\n\n\nTable with Custom Column Types\n\nTable featuring avatar, tag, and progress columns\n\n\n\nTable with Row Expansion\n\nTable with expandable rows for additional details\n\n\n\nTable with Pagination\n\nTable with client-side pagination\n\n\n\nTable with Inline Editing\n\nTable with editable cells and save/cancel functionality\n\n\n\nServer-Side Operations\n\nTable with server-side pagination, sorting, and filtering\n\n\n\nComponent Tokens\n\nYou can style the DataTable component using the following tokens:\n\n\n\nBehavior\n\nSorting\n\n- Single Column: Click column headers to sort by that column\n- Direction Toggle: Click again to toggle between ascending/descending\n- Multiple Columns: Hold Shift while clicking for multi-column sorting\n- Sort Indicators: Visual arrows show current sort direction\n\nFiltering\n\n- Column Filters: Each column can have its own filter based on data type\n- Filter Types: Text, number, select, multiselect, date, boolean, and slider filters\n- Global Search: Searches across all visible columns\n- Filter Combination: Multiple filters work together with AND logic\n\nPagination\n\n- Page Navigation: Previous/Next buttons and direct page selection\n- Page Size: Customizable rows per page with dropdown selector\n- Server-Side: Supports server-side pagination for large datasets\n- URL Sync: Optional URL synchronization for bookmarkable states\n\nRow Selection\n\n- Single Selection: Click row for single selection\n- Multiple Selection: Checkbox column for multiple row selection\n- Select All: Header checkbox to select/deselect all visible rows\n- Bulk Actions: Actions that operate on selected rows\n\nMobile Responsiveness\n\n- Column Management: Mobile drawer for showing/hiding columns\n- Horizontal Scroll: Smooth scrolling for wide tables\n- Touch Friendly: Large touch targets for mobile interaction\n- Responsive Design: Adapts layout based on screen size\n\nAccessibility\n\n- Keyboard Navigation: Full keyboard navigation support with arrow keys\n- Screen Reader: Proper ARIA labels and roles for screen readers\n- Focus Management: Clear focus indicators and logical tab order\n- Sort Announcements: Screen reader announcements for sort changes\n- Filter Labels: Descriptive labels for all filter controls\n- Loading States: Accessible loading indicators with proper announcements",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n[]', hintText: 'array' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'idField',...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "ColumnDefinition",
                "level": 2,
                "id": "columndefinition"
            },
            {
                "title": "Column Types",
                "level": 2,
                "id": "column-types"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Data Table",
                "level": 3,
                "id": "basic-data-table"
            },
            {
                "title": "Table with Search and Filtering",
                "level": 3,
                "id": "table-with-search-and-filtering"
            },
            {
                "title": "Table with Row Selection and Bulk Actions",
                "level": 3,
                "id": "table-with-row-selection-and-bulk-actions"
            },
            {
                "title": "Table with Custom Column Types",
                "level": 3,
                "id": "table-with-custom-column-types"
            },
            {
                "title": "Table with Row Expansion",
                "level": 3,
                "id": "table-with-row-expansion"
            },
            {
                "title": "Table with Pagination",
                "level": 3,
                "id": "table-with-pagination"
            },
            {
                "title": "Table with Inline Editing",
                "level": 3,
                "id": "table-with-inline-editing"
            },
            {
                "title": "Server-Side Operations",
                "level": 3,
                "id": "server-side-operations"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Sorting",
                "level": 3,
                "id": "sorting"
            },
            {
                "title": "Filtering",
                "level": 3,
                "id": "filtering"
            },
            {
                "title": "Pagination",
                "level": 3,
                "id": "pagination"
            },
            {
                "title": "Row Selection",
                "level": 3,
                "id": "row-selection"
            },
            {
                "title": "Mobile Responsiveness",
                "level": 3,
                "id": "mobile-responsiveness"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            }
        ]
    },
    "daterangepicker": {
        "title": "DateRangePicker",
        "description": "The DateRangePicker component provides a comprehensive date and time selection interface with calendar grid, preset options, mobile drawer support, and flexible configuration for single or range date selection with time picker integration.",
        "path": "components/daterangepicker",
        "slug": "daterangepicker",
        "category": "components",
        "tags": [
            "daterangepicker",
            "component",
            "date",
            "time",
            "calendar",
            "range",
            "picker",
            "form",
            "datetime",
            "schedule"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'showDateTimePicker',\n                hintText: 'Whether to show date and time inputs',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n        [\n            {\n                content: 'showPresets',\n                hintText: 'Whether to show quick preset options',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n        [\n            {\n                content: 'placeholder',\n                hintText: 'Placeholder text for the trigger',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'isDisabled',\n                hintText: 'Whether the picker is disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'icon',\n                hintText: 'Custom icon for the trigger',\n            },\n            { content: 'ReactNode', hintText: 'ReactNode' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'minDate',\n                hintText: 'Minimum selectable date',\n            },\n            { content: 'Date', hintText: 'Date' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'maxDate',\n                hintText: 'Maximum selectable date',\n            },\n            { content: 'Date', hintText: 'Date' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'dateFormat',\n                hintText: 'Format for displaying dates',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '\"dd/MM/yyyy\"' },\n        ],\n        [\n            {\n                content: 'allowSingleDateSelection',\n                hintText: 'Allow selection of single date instead of range',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'disableFutureDates',\n                hintText: 'Disable selection of future dates',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'disablePastDates',\n                hintText: 'Disable selection of past dates',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'triggerElement',\n                hintText: 'Custom trigger element',\n            },\n            { content: 'ReactNode', hintText: 'ReactNode' },\n            { content: 'null' },\n        ],\n        [\n            {\n                content: 'useDrawerOnMobile',\n                hintText: 'Use mobile drawer instead of popover on mobile',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n        [\n            {\n                content: 'skipQuickFiltersOnMobile',\n                hintText: 'Hide preset options on mobile',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nTypes\n\n\n\nComponent Tokens\n\nThe DateRangePicker uses comprehensive tokens for styling all its sub-components:\n\n\n\nThe component uses responsive tokens that provide comprehensive styling for desktop popover and mobile drawer experiences.\n\nFeatures\n\n- Date Range Selection: Select start and end dates with visual range indication\n- Time Picker Integration: Optional time selection with date ranges\n- Quick Presets: Pre-defined date ranges (Today, Yesterday, Last 7 days, etc.)\n- Mobile Optimized: Responsive design with mobile drawer on small screens\n- Single Date Mode: Option to select single dates instead of ranges\n- Date Validation: Built-in validation with min/max date constraints\n- Custom Triggers: Support for custom trigger elements\n- Keyboard Navigation: Full keyboard accessibility support\n- Flexible Formatting: Configurable date display formats\n- Time Zone Support: Handles local time zone calculations\n\nUsage Examples\n\nBasic Date Range Picker\n\nSimple date range selection with presets:\n\n\n\nSingle Date Selection\n\nDate picker for single date selection:\n\n\n\nDate Range with Time\n\nPrecise date and time range selection:\n\n\n\nHistorical Data Selection\n\nDate range picker for historical data with future dates disabled:\n\n\n\nCustom Trigger Element\n\nDate range picker with custom button trigger:\n\n\n\nMobile-Optimized Configuration\n\nDate picker optimized for mobile experience:\n\n\n\nBooking System Integration\n\nDate range picker for booking systems with constraints:\n\n\n\nAnalytics Dashboard\n\nDate range picker for analytics with common presets:\n\n\n\nBehavior\n\nDate Selection Flow\n\n- Single Click: Select single date or start of range\n- Range Selection: Click start date, then end date to complete range\n- Visual Feedback: Highlight selected dates and range preview\n- Validation: Ensure end date is after start date\n\nMobile Experience\n\n- Drawer Interface: Full-screen drawer on mobile devices\n- Touch Optimized: Large touch targets for mobile interaction\n- Preset Integration: Quick access to common date ranges\n- Time Picker: Scrollable time selection interface\n\nKeyboard Navigation\n\n- Tab Navigation: Navigate between inputs and calendar\n- Arrow Keys: Navigate calendar grid\n- Enter/Space: Select dates and activate controls\n- Escape: Close picker without selection\n\nPreset Functionality\n\n- Quick Selection: Common date ranges (Today, Last 7 days, etc.)\n- Custom Presets: Support for custom preset configurations\n- Smart Defaults: Intelligent preset suggestions based on context\n- Mobile Adaptation: Streamlined presets for mobile interfaces\n\nBest Practices\n\nWhen to Use DateRangePicker\n\n- Analytics Dashboards: Date range selection for data analysis\n- Booking Systems: Hotel, flight, and event booking date selection\n- Report Generation: Selecting time periods for reports\n- Scheduling: Meeting and event scheduling interfaces\n- Data Filtering: Filtering datasets by date ranges\n\nMobile Considerations\n\n- Drawer Mode: Use useDrawerOnMobile={true} for better mobile UX\n- Preset Optimization: Consider skipQuickFiltersOnMobile for simpler mobile UI\n- Touch Targets: Ensure adequate spacing for touch interaction\n- Responsive Design: Test across different mobile screen sizes\n\nDate Range Configuration\n\n- Logical Constraints: Set appropriate min/max dates for your use case\n- Future/Past Restrictions: Use disableFutureDates or disablePastDates as needed\n- Format Consistency: Use consistent date formats across your application\n- Time Zone Handling: Consider time zone implications for your users\n\nAccessibility Guidelines\n\n- Label Association: Provide clear labels for screen readers\n- Keyboard Support: Ensure full keyboard navigation functionality\n- Focus Management: Maintain proper focus flow through the interface\n- Error Communication: Provide accessible error messages for invalid selections\n- ARIA Labels: Use appropriate ARIA labels for complex calendar interactions\n\nPerformance Optimization\n\n- State Management: Use appropriate state management for complex applications\n- Debouncing: Consider debouncing for expensive operations triggered by date changes\n- Memory Management: Clean up event listeners and timers properly\n- Lazy Loading: Consider lazy loading for large calendar ranges\n\nForm Integration\n\n- Controlled Components: Always use controlled date range state\n- Validation: Integrate with form validation libraries\n- Submission Handling: Properly format dates for API submission\n- Reset Functionality: Implement proper form reset behavior\n- Default Values: Provide sensible default date ranges when appropriate\n\nUser Experience Guidelines\n\n- Clear Labels: Use descriptive labels and placeholders\n- Visual Feedback: Show clear selection states and hover effects\n- Error Handling: Provide helpful error messages for invalid selections\n- Loading States: Show loading indicators during data fetching\n- Confirmation: Consider confirmation steps for critical date selections\n\nData Handling\n\n- Time Zone Consistency: Handle time zones consistently across your application\n- Date Formatting: Format dates appropriately for display and storage\n- Range Validation: Validate date ranges on both client and server\n- Edge Cases: Handle edge cases like leap years and daylight saving time\n- Persistence: Consider persisting user's preferred date ranges",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'show...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Types",
                "level": 2,
                "id": "types"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Date Range Picker",
                "level": 3,
                "id": "basic-date-range-picker"
            },
            {
                "title": "Single Date Selection",
                "level": 3,
                "id": "single-date-selection"
            },
            {
                "title": "Date Range with Time",
                "level": 3,
                "id": "date-range-with-time"
            },
            {
                "title": "Historical Data Selection",
                "level": 3,
                "id": "historical-data-selection"
            },
            {
                "title": "Custom Trigger Element",
                "level": 3,
                "id": "custom-trigger-element"
            },
            {
                "title": "Mobile-Optimized Configuration",
                "level": 3,
                "id": "mobile-optimized-configuration"
            },
            {
                "title": "Booking System Integration",
                "level": 3,
                "id": "booking-system-integration"
            },
            {
                "title": "Analytics Dashboard",
                "level": 3,
                "id": "analytics-dashboard"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Date Selection Flow",
                "level": 3,
                "id": "date-selection-flow"
            },
            {
                "title": "Mobile Experience",
                "level": 3,
                "id": "mobile-experience"
            },
            {
                "title": "Keyboard Navigation",
                "level": 3,
                "id": "keyboard-navigation"
            },
            {
                "title": "Preset Functionality",
                "level": 3,
                "id": "preset-functionality"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use DateRangePicker",
                "level": 3,
                "id": "when-to-use-daterangepicker"
            },
            {
                "title": "Mobile Considerations",
                "level": 3,
                "id": "mobile-considerations"
            },
            {
                "title": "Date Range Configuration",
                "level": 3,
                "id": "date-range-configuration"
            },
            {
                "title": "Accessibility Guidelines",
                "level": 3,
                "id": "accessibility-guidelines"
            },
            {
                "title": "Performance Optimization",
                "level": 3,
                "id": "performance-optimization"
            },
            {
                "title": "Form Integration",
                "level": 3,
                "id": "form-integration"
            },
            {
                "title": "User Experience Guidelines",
                "level": 3,
                "id": "user-experience-guidelines"
            },
            {
                "title": "Data Handling",
                "level": 3,
                "id": "data-handling"
            }
        ]
    },
    "drawer": {
        "title": "Drawer",
        "description": "The Drawer component provides slide-out panels that appear from any side of the screen, offering flexible layout options for forms, navigation, detailed views, and contextual actions.",
        "path": "components/drawer",
        "slug": "drawer",
        "category": "components",
        "tags": [
            "drawer",
            "component",
            "overlay",
            "panel",
            "sidebar",
            "slide-out",
            "modal",
            "navigation"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\nDrawer\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'direction',\n                hintText: 'The direction from which the drawer slides in',\n            },\n            {\n                content: \"'top' | 'bottom' | 'left' | 'right'\",\n                hintText: 'union type',\n            },\n            { content: \"'bottom'\" },\n        ],\n        [\n            {\n                content: 'modal',\n                hintText: 'Whether the drawer should be modal with overlay',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n        [\n            {\n                content: 'dismissible',\n                hintText:\n                    'Whether the drawer can be dismissed by clicking outside',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n        [\n            {\n                content: 'showHandle',\n                hintText:\n                    'Whether to show the drag handle (bottom/top drawers only)',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n        [\n            {\n                content: 'handle',\n                hintText: 'Custom handle element to replace the default handle',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'nested',\n                hintText:\n                    'Whether the drawer should be nested for stacking effect',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'snapPoints',\n                hintText: 'Custom snap points for the drawer (bottom/top only)',\n            },\n            { content: '(string | number)[]', hintText: 'array' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'activeSnapPoint',\n                hintText: 'Active snap point index or value',\n            },\n            { content: 'number | string | null', hintText: 'union type' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onSnapPointChange',\n                hintText: 'Callback when snap point changes',\n            },\n            {\n                content: '(activeSnapPoint: number | string | null) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'fadeFromIndex',\n                hintText: 'Index from which the drawer should fade',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'snapToSequentialPoint',\n                hintText:\n                    'Disable velocity-based snapping for sequential navigation',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'mobileOffset',\n                hintText:\n                    'Custom mobile offset values overriding token defaults',\n            },\n            { content: 'MobileOffset', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'className',\n                hintText: 'Additional CSS class for the drawer content',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'overlayClassName',\n                hintText: 'Additional CSS class for the overlay',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'style',\n                hintText: 'Custom styles for the drawer content',\n            },\n            { content: 'React.CSSProperties', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'children',\n                hintText: 'Drawer trigger and content components',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nDrawerPortal\n\nA portal component that renders drawer content at the document root level, ensuring proper stacking context.\n\n\n\nDrawerOverlay\n\nThe backdrop overlay that appears behind the drawer content.\n\n\n\nDrawerContent\n\n\n\nDrawerBody\n\n\n\nData Types\n\nMobileOffset\n\nMobile positioning offset configuration:\n\n\n\nFeatures\n\n- Full-Screen Overlay: Uses DrawerPortal and DrawerOverlay to render above all app content with proper z-index stacking\n- Multi-Directional: Slide from any side (top, bottom, left, right) with responsive positioning\n- Modular Components: Composable header, body, and footer components for flexible layouts\n- Snap Points: Support for multiple snap positions on bottom/top drawers\n- Drag Handle: Optional drag handle for bottom/top drawers with gesture support\n- Mobile Optimized: Responsive design with mobile-specific positioning and offsets\n- Overlay Control: Optional modal overlay with backdrop click dismissal\n- Nested Support: Ability to stack drawers for complex navigation flows\n- Built on Vaul: Leverages Vaul library for robust gesture and animation support\n- Custom Styling: Comprehensive token system for complete visual customization\n- Accessibility First: Full keyboard navigation, focus management, and screen reader support\n- Content-Driven Height: Automatic sizing based on content with overflow handling\n- Sequential Snapping: Option to disable velocity-based snapping for controlled navigation\n\nSpecialized Components\n\nStatusDrawer\n\nPre-built drawer for status messages and confirmations:\n\n\n\nUsage Examples\n\nBasic Side Drawer\n\nSimple drawer for navigation content\n\n\n\nForm Drawer\n\nDrawer with header, form content, and footer actions\n\n\n\nStatus Drawer\n\nPre-built drawer for confirmations\n\n\n\nComponent Tokens\n\nYou can style the Drawer component using the following tokens:\n\n\n\nBehavior\n\nSlide Animation\n\n- Direction Control: Drawers slide in from the specified edge (top, bottom, left, right)\n- Smooth Transitions: Built-in spring animations for opening and closing\n- Gesture Support: Drag to open/close with velocity-based snapping\n- Snap Points: Multiple stopping positions for flexible sizing\n\nState Management\n\n- Controlled Mode: Use open and onOpenChange props for external state control\n- Uncontrolled Mode: Component manages its own open/closed state internally\n- Nested Support: Multiple drawers can be stacked for complex navigation\n\nMobile Behavior\n\n- Responsive Positioning: Custom mobile offsets for optimal mobile experience\n- Touch Gestures: Full gesture support for drag-to-open and drag-to-close\n- Safe Areas: Respects mobile safe areas and notches\n- Content Adaptation: Automatic sizing adjustments for mobile viewports\n\nContent Management\n\n- Flexible Layout: Modular header, body, and footer components\n- Scrollable Content: Body content scrolls when exceeding drawer height\n- Overflow Control: Configurable overflow behavior for different content types\n- Dynamic Sizing: Content-driven height with maximum constraints\n\nAccessibility\n\n- Focus Management: Focus is trapped within drawer when open and restored on close\n- Keyboard Navigation: Full keyboard support with Tab, Shift+Tab, and Escape keys\n- Screen Reader Support: Proper ARIA roles, labels, and live regions\n- ARIA Compliance: Uses appropriate dialog semantics and state announcements\n- High Contrast: Supports high contrast mode and custom color schemes\n- Motion Preferences: Respects user's reduced motion preferences for animations\n\nBest Practices\n\nWhen to Use Drawers\n\n- Navigation Menus: For slide-out navigation that doesn't interrupt main content\n- Detail Views: For displaying additional information without page navigation\n- Form Dialogs: For forms that need more space than traditional modals\n- Filter Panels: For advanced filtering options that need persistent visibility\n\nDrawer Design Guidelines\n\n- Always Use Portal: Always wrap DrawerContent with DrawerPortal and include DrawerOverlay for proper full-screen rendering\n- Clear Purpose: Each drawer should have a focused, single purpose\n- Appropriate Direction: Choose slide direction based on content type and screen size\n- Consistent Behavior: Use consistent slide directions throughout your application\n- Content Organization: Structure content with clear headers and logical sections\n\nContent Guidelines\n\n- Scannable Layout: Organize content with clear hierarchy and spacing\n- Action Placement: Place primary actions in footer for easy access\n- Scroll Indicators: Provide visual cues when content extends beyond visible area\n- Loading States: Show loading states for dynamic content\n\nMobile Considerations\n\n- Touch Targets: Ensure interactive elements meet minimum touch target sizes\n- Gesture Conflicts: Avoid gesture conflicts with system navigation\n- Safe Areas: Consider mobile safe areas and keyboard interactions\n- Performance: Optimize animations and content loading for mobile devices",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\nDrawer\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                conten...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Drawer",
                "level": 3,
                "id": "drawer"
            },
            {
                "title": "DrawerPortal",
                "level": 3,
                "id": "drawerportal"
            },
            {
                "title": "DrawerOverlay",
                "level": 3,
                "id": "draweroverlay"
            },
            {
                "title": "DrawerContent",
                "level": 3,
                "id": "drawercontent"
            },
            {
                "title": "DrawerBody",
                "level": 3,
                "id": "drawerbody"
            },
            {
                "title": "Data Types",
                "level": 2,
                "id": "data-types"
            },
            {
                "title": "MobileOffset",
                "level": 3,
                "id": "mobileoffset"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Specialized Components",
                "level": 2,
                "id": "specialized-components"
            },
            {
                "title": "StatusDrawer",
                "level": 3,
                "id": "statusdrawer"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Side Drawer",
                "level": 3,
                "id": "basic-side-drawer"
            },
            {
                "title": "Form Drawer",
                "level": 3,
                "id": "form-drawer"
            },
            {
                "title": "Status Drawer",
                "level": 3,
                "id": "status-drawer"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Slide Animation",
                "level": 3,
                "id": "slide-animation"
            },
            {
                "title": "State Management",
                "level": 3,
                "id": "state-management"
            },
            {
                "title": "Mobile Behavior",
                "level": 3,
                "id": "mobile-behavior"
            },
            {
                "title": "Content Management",
                "level": 3,
                "id": "content-management"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use Drawers",
                "level": 3,
                "id": "when-to-use-drawers"
            },
            {
                "title": "Drawer Design Guidelines",
                "level": 3,
                "id": "drawer-design-guidelines"
            },
            {
                "title": "Content Guidelines",
                "level": 3,
                "id": "content-guidelines"
            },
            {
                "title": "Mobile Considerations",
                "level": 3,
                "id": "mobile-considerations"
            }
        ]
    },
    "dropdowninput": {
        "title": "DropdownInput",
        "description": "The DropdownInput component combines a text input field with an integrated dropdown selector, perfect for currency inputs, unit selection, and other scenarios requiring both text entry and option selection.",
        "path": "components/dropdowninput",
        "slug": "dropdowninput",
        "category": "components",
        "tags": [
            "dropdowninput",
            "component",
            "input",
            "dropdown",
            "select",
            "combo",
            "currency",
            "unit",
            "form",
            "responsive"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'dropDownValue',\n                hintText: 'Current selected value in dropdown',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onDropDownChange',\n                hintText: 'Callback when dropdown selection changes',\n            },\n            { content: '(value: string) => void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'dropDownItems',\n                hintText: 'Items and groups for the dropdown menu',\n            },\n            { content: 'SelectMenuGroupType[]', hintText: 'array' },\n            { content: 'Required' },\n        ],\n        [\n            {\n                content: 'dropdownPosition',\n                hintText: 'Position of dropdown relative to input',\n            },\n            { content: 'DropdownPosition', hintText: 'enum' },\n            { content: 'RIGHT' },\n        ],\n        [\n            {\n                content: 'label',\n                hintText: 'Primary label for the input field',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'sublabel',\n                hintText: 'Secondary label or description',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'placeholder',\n                hintText: 'Placeholder text shown when input is empty',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'size',\n                hintText: 'Size variant of the input field',\n            },\n            { content: 'TextInputSize', hintText: 'enum' },\n            { content: 'MEDIUM' },\n        ],\n        [\n            {\n                content: 'error',\n                hintText: 'Whether the input is in error state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'errorMessage',\n                hintText: 'Error message to display when in error state',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'hintText',\n                hintText: 'Helper text displayed below the input',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'helpIconHintText',\n                hintText: 'Tooltip text for the help icon',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the input and dropdown are disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'required',\n                hintText: 'Whether the input is required',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'slot',\n                hintText: 'Content to display as an additional slot',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'name',\n                hintText: 'Name attribute for the input field',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'dropdownName',\n                hintText: 'Name attribute for the dropdown',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'maxDropdownHeight',\n                hintText: 'Maximum height for dropdown menu',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onDropdownOpen',\n                hintText: 'Callback when dropdown opens',\n            },\n            { content: '() => void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onDropdownClose',\n                hintText: 'Callback when dropdown closes',\n            },\n            { content: '() => void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onFocus',\n                hintText: 'Callback when input receives focus',\n            },\n            {\n                content: '(e: FocusEvent) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onBlur',\n                hintText: 'Callback when input loses focus',\n            },\n            {\n                content: '(e: FocusEvent) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nEnums\n\nDropdownPosition\n\nPosition of the dropdown relative to the input field:\n\n\n\nDropdownInputSize\n\nSize variants (inherits from TextInputSize):\n\n\n\nDropdownInputState\n\nInternal state variants (for styling):\n\n\n\nComponent Tokens\n\nYou can style the DropdownInput component using the following tokens:\n\n\n\nThe component uses responsive tokens that adapt to different breakpoints:\n\n- sm: Mobile-optimized with floating label behavior for large size\n- lg: Desktop layout with consistent behavior across all sizes\n\nFeatures\n\n- Dual Input System: Combined text input and dropdown selection in one component\n- Flexible Positioning: Dropdown can be positioned on left or right side\n- Responsive Design: Adaptive layout with floating labels on mobile for large size\n- Integrated SingleSelect: Uses SingleSelect component for dropdown functionality\n- Dynamic Spacing: Automatic padding adjustment based on dropdown and slot content\n- Validation States: Built-in error styling with custom error messages\n- Form Integration: Native HTML input attributes and form compatibility\n- Accessibility: Full keyboard navigation and screen reader support\n- State Management: Coordinated state between input and dropdown components\n\nUsage Examples\n\nCurrency Input\n\nInput field with currency selector:\n\n\n\nUnit Measurement Input\n\nInput with unit selector on the left:\n\n\n\nPhone Number Input\n\nPhone input with country code selector:\n\n\n\nBehavior\n\nResponsive Layout\n\n- Large Size on Mobile: Floating label animation for enhanced mobile experience\n- Dynamic Padding: Automatic adjustment based on dropdown and slot positions\n- Touch Optimization: Enhanced mobile interactions for both input and dropdown\n\nDropdown Integration\n\n- SingleSelect Component: Uses internal SingleSelect for dropdown functionality\n- NO_CONTAINER Variant: Seamless integration with minimal visual separation\n- Inline Mode: Dropdown rendered inline with input field\n- Alignment Control: Precise positioning relative to input boundaries\n\nState Coordination\n\n- Independent Controls: Input and dropdown maintain separate values and callbacks\n- Coordinated Focus: Proper focus management between input and dropdown\n- Error Handling: Unified error state affects both input and dropdown styling\n- Disabled State: Disabling affects both components consistently\n\nDynamic Spacing\n\n- Width Calculation: Automatic measurement of dropdown width for padding adjustment\n- Gap Management: Consistent spacing between input content and dropdown\n- Position Adaptation: Padding adjusts based on left or right dropdown positioning\n\nBest Practices\n\nWhen to Use DropdownInput\n\n- Currency Inputs: Amount entry with currency selection\n- Unit Values: Measurements with unit selection (px, rem, %, etc.)\n- Phone Numbers: Number entry with country code selection\n- Prefixed/Suffixed Data: Any input requiring both text and categorical selection\n\nDropdown Item Structure\n\n- Clear Labels: Use descriptive labels that are easy to scan\n- Logical Grouping: Group related items together with clear group names\n- Consistent Formatting: Maintain consistent label format across items\n- Appropriate Icons: Use icons or symbols when they add clarity\n\nPosition Selection\n\n- Left Position: Use for prefixes like country codes, protocols, or categories\n- Right Position: Use for suffixes like currencies, units, or file extensions\n- User Expectations: Follow conventional patterns for your domain\n\nForm Integration\n\n- Controlled Components: Always use controlled inputs with proper state management\n- Validation: Validate both input value and dropdown selection\n- Error Messages: Provide clear error messages for validation failures\n- Required Fields: Clearly indicate when both input and dropdown are required\n\nAccessibility Considerations\n\n- Label Association: Ensure proper labeling for both input and dropdown\n- Keyboard Navigation: Test tab order and arrow key navigation\n- Screen Readers: Verify that both components are properly announced\n- Focus Indicators: Maintain visible focus indicators for keyboard users\n\nPerformance Optimization\n\n- Item Lists: Optimize large dropdown item lists with appropriate grouping\n- State Updates: Debounce input changes if triggering expensive operations\n- Memory Management: Properly clean up event listeners and refs\n- Render Optimization: Use React.memo for dropdown items if needed",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "DropdownPosition",
                "level": 3,
                "id": "dropdownposition"
            },
            {
                "title": "DropdownInputSize",
                "level": 3,
                "id": "dropdowninputsize"
            },
            {
                "title": "DropdownInputState",
                "level": 3,
                "id": "dropdowninputstate"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Currency Input",
                "level": 3,
                "id": "currency-input"
            },
            {
                "title": "Unit Measurement Input",
                "level": 3,
                "id": "unit-measurement-input"
            },
            {
                "title": "Phone Number Input",
                "level": 3,
                "id": "phone-number-input"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Responsive Layout",
                "level": 3,
                "id": "responsive-layout"
            },
            {
                "title": "Dropdown Integration",
                "level": 3,
                "id": "dropdown-integration"
            },
            {
                "title": "State Coordination",
                "level": 3,
                "id": "state-coordination"
            },
            {
                "title": "Dynamic Spacing",
                "level": 3,
                "id": "dynamic-spacing"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use DropdownInput",
                "level": 3,
                "id": "when-to-use-dropdowninput"
            },
            {
                "title": "Dropdown Item Structure",
                "level": 3,
                "id": "dropdown-item-structure"
            },
            {
                "title": "Position Selection",
                "level": 3,
                "id": "position-selection"
            },
            {
                "title": "Form Integration",
                "level": 3,
                "id": "form-integration"
            },
            {
                "title": "Accessibility Considerations",
                "level": 3,
                "id": "accessibility-considerations"
            },
            {
                "title": "Performance Optimization",
                "level": 3,
                "id": "performance-optimization"
            }
        ]
    },
    "menu": {
        "title": "Menu",
        "description": "The Menu component provides dropdown navigation and action lists with support for grouping, search functionality, submenus, and various positioning options for organizing application functions.",
        "path": "components/menu",
        "slug": "menu",
        "category": "components",
        "tags": [
            "menu",
            "component",
            "navigation",
            "dropdown",
            "popover",
            "actions"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'asModal',\n                hintText: 'Whether to render the menu as a modal on mobile',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'alignment',\n                hintText: 'How the menu aligns relative to the trigger',\n            },\n            { content: 'MenuAlignment', hintText: 'enum' },\n            { content: 'MenuAlignment.CENTER' },\n        ],\n        [\n            {\n                content: 'side',\n                hintText: 'Which side of the trigger the menu appears on',\n            },\n            { content: 'MenuSide', hintText: 'enum' },\n            { content: 'MenuSide.BOTTOM' },\n        ],\n        [\n            {\n                content: 'sideOffset',\n                hintText: 'Distance in pixels from the trigger',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '8' },\n        ],\n        [\n            {\n                content: 'alignOffset',\n                hintText: 'Offset for fine-tuning alignment',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '0' },\n        ],\n        [\n            {\n                content: 'collisonBoundaryRef',\n                hintText: 'Element(s) to use as collision boundary',\n            },\n            {\n                content: 'Element | null | Array',\n                hintText: 'element',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nData Types\n\nMenuV2GroupType\n\nStructure for grouping menu items:\n\n\n\nMenuItemV2Type\n\nStructure for individual menu items:\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'subMenu',\n                hintText: 'Nested menu items for creating submenus',\n            },\n            { content: 'MenuItemV2Type[]', hintText: 'array' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Flexible Positioning: 4 sides and 3 alignment options for optimal placement\n- Grouped Items: Organize menu items into labeled groups with optional separators\n- Search Functionality: Built-in search to filter menu items by label\n- Multiple Content Slots: 4 content slots per item for icons, badges, and additional content\n- Action Variants: Special styling for primary and danger actions\n- Submenu Support: Nested menu items for hierarchical navigation\n- Controlled/Uncontrolled: Support for both controlled and uncontrolled open states\n- Modal Mode: Renders as modal on mobile devices for better UX\n- Collision Detection: Automatic repositioning to stay within viewport\n- Disabled States: Individual menu items can be disabled\n- Custom Sizing: Configurable width and height constraints\n- Accessibility First: Full keyboard navigation and screen reader support\n\nUsage Examples\n\nBasic Action Menu\n\nSimple menu with common actions\n\n\n\nMenu with Search\n\nMenu with search functionality for filtering\n\n\n\nGrouped Menu with Separators\n\nMenu with multiple groups and separators\n\n\n\nMenu with Custom Positioning\n\nMenu with specific positioning and offsets\n\n\n\nControlled Menu\n\nMenu with controlled open state\n\n\n\nMenu with Submenus\n\nMenu with nested submenu items\n\n\n\nMobile Modal Menu\n\nMenu that renders as modal on mobile devices\n\n\n\nMenu with Status Items\n\nMenu items with additional status information\n\n\n\nComponent Tokens\n\nYou can style the Menu component using the following tokens:\n\n\n\nBehavior\n\nPositioning Logic\n\n- Side: Menu appears on specified side of trigger (top, right, bottom, left)\n- Alignment: Menu aligns to start, center, or end of trigger\n- Collision Detection: Automatically repositions if menu would overflow viewport\n- Offsets: Fine-tune positioning with side and align offsets\n\nSearch Functionality\n\n- Live Filtering: Menu items filter as user types\n- Label Matching: Searches both main label and subLabel text\n- Case Insensitive: Search is not case sensitive\n- Group Filtering: Empty groups are hidden when all items are filtered out\n\nInteraction Patterns\n\n- Click to Open: Trigger click opens the menu\n- Click Outside: Clicking outside closes the menu\n- Escape Key: Escape key closes the menu\n- Item Selection: Clicking menu item executes action and closes menu\n\nMobile Behavior\n\n- Modal Mode: When asModal={true}, renders as full-screen modal on mobile\n- Touch Interactions: Optimized for touch interactions\n- Responsive Sizing: Adapts to screen size constraints\n\nAccessibility\n\n- Keyboard Navigation: Full keyboard support with arrow keys, Enter, and Escape\n- Focus Management: Proper focus management when opening/closing menu\n- Screen Reader Support: ARIA labels and proper semantic structure\n- ARIA Compliance: Uses aria-expanded, aria-haspopup, and role attributes\n- High Contrast: Supports high contrast mode and custom color schemes\n- Tab Navigation: Proper tab order through menu items\n\nEnums\n\nMenuAlignment\n\n\n\nMenuSide\n\n\n\nMenuItemV2Variant\n\n\n\nMenuItemV2ActionType\n\n\n\nBest Practices\n\nMenu Organization\n\n- Group Related Items: Use groups to organize related functionality\n- Logical Order: Place most common actions at the top\n- Dangerous Actions: Use danger action type for destructive actions\n- Clear Labels: Use descriptive labels that clearly indicate the action\n\nSearch Implementation\n\n- Enable for Long Lists: Use search when menu has many items\n- Meaningful Placeholder: Provide helpful search placeholder text\n- Consider Performance: Search filters client-side, suitable for moderate lists\n\nPositioning Guidelines\n\n- Consider Context: Choose side and alignment based on trigger position\n- Avoid Overflow: Ensure menu doesn't extend beyond viewport\n- Mobile Considerations: Use modal mode for complex menus on mobile",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'asMo...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Data Types",
                "level": 2,
                "id": "data-types"
            },
            {
                "title": "MenuV2GroupType",
                "level": 3,
                "id": "menuv2grouptype"
            },
            {
                "title": "MenuItemV2Type",
                "level": 3,
                "id": "menuitemv2type"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Action Menu",
                "level": 3,
                "id": "basic-action-menu"
            },
            {
                "title": "Menu with Search",
                "level": 3,
                "id": "menu-with-search"
            },
            {
                "title": "Grouped Menu with Separators",
                "level": 3,
                "id": "grouped-menu-with-separators"
            },
            {
                "title": "Menu with Custom Positioning",
                "level": 3,
                "id": "menu-with-custom-positioning"
            },
            {
                "title": "Controlled Menu",
                "level": 3,
                "id": "controlled-menu"
            },
            {
                "title": "Menu with Submenus",
                "level": 3,
                "id": "menu-with-submenus"
            },
            {
                "title": "Mobile Modal Menu",
                "level": 3,
                "id": "mobile-modal-menu"
            },
            {
                "title": "Menu with Status Items",
                "level": 3,
                "id": "menu-with-status-items"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Positioning Logic",
                "level": 3,
                "id": "positioning-logic"
            },
            {
                "title": "Search Functionality",
                "level": 3,
                "id": "search-functionality"
            },
            {
                "title": "Interaction Patterns",
                "level": 3,
                "id": "interaction-patterns"
            },
            {
                "title": "Mobile Behavior",
                "level": 3,
                "id": "mobile-behavior"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "MenuAlignment",
                "level": 3,
                "id": "menualignment"
            },
            {
                "title": "MenuSide",
                "level": 3,
                "id": "menuside"
            },
            {
                "title": "MenuItemV2Variant",
                "level": 3,
                "id": "menuitemv2variant"
            },
            {
                "title": "MenuItemV2ActionType",
                "level": 3,
                "id": "menuitemv2actiontype"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "Menu Organization",
                "level": 3,
                "id": "menu-organization"
            },
            {
                "title": "Search Implementation",
                "level": 3,
                "id": "search-implementation"
            },
            {
                "title": "Positioning Guidelines",
                "level": 3,
                "id": "positioning-guidelines"
            }
        ]
    },
    "modal": {
        "title": "Modal",
        "description": "The Modal component creates overlay dialogs that focus user attention on specific content or actions, with backdrop blur, animations, mobile drawer support, and extensive customization options.",
        "path": "components/modal",
        "slug": "modal",
        "category": "components",
        "tags": ["modal", "component", "dialog", "overlay", "drawer", "popup"],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'title',\n                hintText: 'The title displayed in the modal header',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'subtitle',\n                hintText: 'Optional subtitle displayed below the title',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'children',\n                hintText: 'The content to display in the modal body',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'primaryAction',\n                hintText: 'Primary action button configuration',\n            },\n            { content: 'ModalButtonAction', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'secondaryAction',\n                hintText: 'Secondary action button configuration',\n            },\n            { content: 'ModalButtonAction', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'className',\n                hintText: 'Additional CSS class for the modal container',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'showCloseButton',\n                hintText: 'Whether to show the X close button in header',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n        [\n            {\n                content: 'showHeader',\n                hintText: 'Whether to display the modal header section',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n        [\n            {\n                content: 'showFooter',\n                hintText: 'Whether to display the modal footer section',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n        [\n            {\n                content: 'closeOnBackdropClick',\n                hintText: 'Whether clicking the backdrop closes the modal',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'customHeader',\n                hintText:\n                    'Custom React component to replace the default header',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'customFooter',\n                hintText:\n                    'Custom React component to replace the default footer',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'headerRightSlot',\n                hintText:\n                    'Additional content displayed in the header right area',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'showDivider',\n                hintText: 'Whether to show divider line below header',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'minWidth',\n                hintText: 'Minimum width of the modal',\n            },\n            { content: 'string', hintText: 'CSS value' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'useDrawerOnMobile',\n                hintText: 'Whether to use drawer style on mobile devices',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nData Types\n\nModalButtonAction\n\nAction buttons use the Button component configuration:\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the button is disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'isLoading',\n                hintText: 'Whether the button shows loading state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'leadingIcon',\n                hintText: 'Icon displayed before the button text',\n            },\n            { content: 'React.ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'trailingIcon',\n                hintText: 'Icon displayed after the button text',\n            },\n            { content: 'React.ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Overlay Management: Full-screen overlay with backdrop blur and click-to-close options\n- Responsive Design: Automatic mobile drawer mode for better mobile experience\n- Flexible Actions: Primary and secondary actions with full Button component configuration\n- Custom Layouts: Support for custom headers, footers, and header right slots\n- Scroll Lock: Automatically prevents body scroll when modal is open\n- Accessibility First: Full keyboard navigation, focus management, and ARIA compliance\n- Animation Support: Smooth enter/exit animations with backdrop transitions\n- Header Control: Show/hide header, dividers, and close button as needed\n- Footer Control: Show/hide footer or replace with custom footer content\n- Size Control: Configurable minimum width and responsive sizing\n- Mobile Optimization: Drawer-style presentation on mobile devices\n- Backdrop Interaction: Configurable backdrop click behavior\n\nUsage Examples\n\nBasic Confirmation Modal\n\nSimple modal for confirming actions\n\n\n\nForm Modal with Loading State\n\nModal containing a form with loading action\n\n\n\nModal without Footer\n\nContent-only modal without action buttons\n\n\n\nModal with Custom Header\n\nModal with custom header content and right slot\n\n\n\nMobile Drawer Modal\n\nModal that becomes a drawer on mobile\n\n\n\nModal with Custom Footer\n\nModal with completely custom footer\n\n\n\nLarge Content Modal\n\nModal with minimum width and scrollable content\n\n\n\nModal with Icons in Actions\n\nModal with icons in action buttons\n\n\n\nCompletely Custom Modal\n\nModal with custom header and no default styling\n\n\n\nComponent Tokens\n\nYou can style the Modal component using the following tokens:\n\n\n\nBehavior\n\nModal Lifecycle\n\n- Open Animation: Smooth fade-in animation for backdrop and modal content\n- Close Animation: Fade-out animation when closing\n- Scroll Lock: Body scroll is locked when modal is open\n- Focus Management: Focus is trapped within the modal\n\nInteraction Patterns\n\n- Backdrop Click: Configurable backdrop click-to-close behavior\n- Escape Key: Escape key closes the modal by default\n- Close Button: Optional X button in header for closing\n- Action Buttons: Primary and secondary actions in footer\n\nMobile Behavior\n\n- Responsive Layout: Adapts to smaller screens automatically\n- Drawer Mode: Optional drawer-style presentation on mobile\n- Touch Interactions: Optimized for touch interactions\n- Safe Areas: Respects mobile safe areas and notches\n\nContent Management\n\n- Scrollable Content: Content area scrolls when content exceeds viewport\n- Header Pinning: Header stays fixed when content scrolls\n- Footer Pinning: Footer stays fixed at bottom\n- Responsive Sizing: Modal adapts to content size with constraints\n\nAccessibility\n\n- Focus Management: Focus is trapped within modal and restored on close\n- Keyboard Navigation: Full keyboard support with Tab, Shift+Tab, and Escape\n- Screen Reader Support: Proper ARIA roles, labels, and live regions\n- ARIA Compliance: Uses role=\"dialog\", aria-modal, and aria-labelledby\n- High Contrast: Supports high contrast mode and custom color schemes\n- Motion Preferences: Respects user's reduced motion preferences\n\nBest Practices\n\nWhen to Use Modals\n\n- Important Decisions: For critical actions that need user confirmation\n- Form Dialogs: For forms that interrupt the main workflow\n- Information Display: For detailed information that needs focus\n- Error Messages: For critical error messages that need attention\n\nModal Design Guidelines\n\n- Clear Purpose: Modal should have a clear, single purpose\n- Concise Content: Keep content focused and concise\n- Clear Actions: Action buttons should clearly indicate what will happen\n- Escape Routes: Always provide a way to close the modal\n\nMobile Considerations\n\n- Use Drawer Mode: Enable drawer mode for better mobile experience\n- Touch Targets: Ensure buttons are large enough for touch interaction\n- Content Length: Keep content length appropriate for mobile screens\n- Safe Areas: Consider mobile safe areas when positioning content\n\nAction Button Guidelines\n\n- Primary Action: Use for the main action user should take\n- Secondary Action: Use for alternative or cancel actions\n- Dangerous Actions: Use danger button type for destructive actions\n- Loading States: Show loading state for async operations",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'titl...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Data Types",
                "level": 2,
                "id": "data-types"
            },
            {
                "title": "ModalButtonAction",
                "level": 3,
                "id": "modalbuttonaction"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Confirmation Modal",
                "level": 3,
                "id": "basic-confirmation-modal"
            },
            {
                "title": "Form Modal with Loading State",
                "level": 3,
                "id": "form-modal-with-loading-state"
            },
            {
                "title": "Modal without Footer",
                "level": 3,
                "id": "modal-without-footer"
            },
            {
                "title": "Modal with Custom Header",
                "level": 3,
                "id": "modal-with-custom-header"
            },
            {
                "title": "Mobile Drawer Modal",
                "level": 3,
                "id": "mobile-drawer-modal"
            },
            {
                "title": "Modal with Custom Footer",
                "level": 3,
                "id": "modal-with-custom-footer"
            },
            {
                "title": "Large Content Modal",
                "level": 3,
                "id": "large-content-modal"
            },
            {
                "title": "Modal with Icons in Actions",
                "level": 3,
                "id": "modal-with-icons-in-actions"
            },
            {
                "title": "Completely Custom Modal",
                "level": 3,
                "id": "completely-custom-modal"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Modal Lifecycle",
                "level": 3,
                "id": "modal-lifecycle"
            },
            {
                "title": "Interaction Patterns",
                "level": 3,
                "id": "interaction-patterns"
            },
            {
                "title": "Mobile Behavior",
                "level": 3,
                "id": "mobile-behavior"
            },
            {
                "title": "Content Management",
                "level": 3,
                "id": "content-management"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use Modals",
                "level": 3,
                "id": "when-to-use-modals"
            },
            {
                "title": "Modal Design Guidelines",
                "level": 3,
                "id": "modal-design-guidelines"
            },
            {
                "title": "Mobile Considerations",
                "level": 3,
                "id": "mobile-considerations"
            },
            {
                "title": "Action Button Guidelines",
                "level": 3,
                "id": "action-button-guidelines"
            }
        ]
    },
    "multi-select": {
        "title": "Multi Select",
        "description": "The MultiSelect component allows users to select multiple options from a list, with search functionality, selection management, and customizable display options including count badges and text display.",
        "path": "components/multi-select",
        "slug": "multi-select",
        "category": "components",
        "tags": [
            "multi-select",
            "component",
            "form",
            "dropdown",
            "selection",
            "multiple",
            "search",
            "checkbox",
            "tags",
            "keyboard-navigation",
            "positioning",
            "mobile-optimized",
            "accessibility"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'items',\n                hintText: 'Array of grouped menu items for selection',\n            },\n            { content: 'MultiSelectMenuGroupType[]', hintText: 'array' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'size',\n                hintText: 'Size variant affecting the select field dimensions',\n            },\n            { content: 'MultiSelectMenuSize', hintText: 'enum' },\n            { content: 'MultiSelectMenuSize.MEDIUM' },\n        ],\n        [\n            {\n                content: 'variant',\n                hintText: 'Visual variant determining styling approach',\n            },\n            { content: 'MultiSelectVariant', hintText: 'enum' },\n            { content: 'MultiSelectVariant.CONTAINER' },\n        ],\n        [\n            {\n                content: 'selectionTagType',\n                hintText: 'How selected items are displayed (count or text)',\n            },\n            { content: 'MultiSelectSelectionTagType', hintText: 'enum' },\n            { content: 'MultiSelectSelectionTagType.COUNT' },\n        ],\n        [\n            {\n                content: 'required',\n                hintText: 'Whether the field is required (displays asterisk)',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText:\n                    'Whether the select field is disabled and non-interactive',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'helpIconHintText',\n                hintText:\n                    'Tooltip text displayed when hovering over the help icon',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'hintText',\n                hintText: 'Optional help text displayed below the select field',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'enableSearch',\n                hintText: 'Whether to show search input in the dropdown menu',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n        [\n            {\n                content: 'searchPlaceholder',\n                hintText: 'Placeholder text for the search input field',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: 'Search options...' },\n        ],\n        [\n            {\n                content: 'enableSelectAll',\n                hintText: 'Whether to show select all option in the dropdown',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'selectAllText',\n                hintText: 'Text displayed for the select all option',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: 'Select All' },\n        ],\n        [\n            {\n                content: 'slot',\n                hintText:\n                    'Content displayed inside the trigger button (e.g., icons)',\n            },\n            { content: 'React.ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'name',\n                hintText:\n                    'Name attribute for form identification and submission',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'customTrigger',\n                hintText:\n                    'Custom React element to replace the default trigger button',\n            },\n            { content: 'React.ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'useDrawerOnMobile',\n                hintText: 'Whether to render as drawer on mobile devices',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n        [\n            {\n                content: 'alignment',\n                hintText:\n                    'How the dropdown menu aligns relative to the trigger',\n            },\n            { content: 'MultiSelectMenuAlignment', hintText: 'enum' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'side',\n                hintText: 'Which side of the trigger the dropdown appears on',\n            },\n            { content: 'MultiSelectMenuSide', hintText: 'enum' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'sideOffset',\n                hintText: 'Distance in pixels between trigger and dropdown',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'alignOffset',\n                hintText: 'Alignment offset in pixels for fine positioning',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'minWidth',\n                hintText: 'Minimum width of the dropdown menu in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'maxWidth',\n                hintText: 'Maximum width of the dropdown menu in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'maxHeight',\n                hintText: 'Maximum height of the dropdown menu in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'inline',\n                hintText:\n                    'Whether the select renders inline without fixed height',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'onBlur',\n                hintText:\n                    'Callback function called when the select loses focus',\n            },\n            { content: '() => void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onFocus',\n                hintText:\n                    'Callback function called when the select gains focus',\n            },\n            { content: '() => void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'error',\n                hintText: 'Whether the select is in an error state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'errorMessage',\n                hintText: 'Error message displayed when error is true',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'showActionButtons',\n                hintText:\n                    'Whether to show action buttons in the dropdown footer',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'primaryAction',\n                hintText: 'Configuration for the primary action button',\n            },\n            { content: 'ActionButtonType', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'secondaryAction',\n                hintText: 'Configuration for the secondary action button',\n            },\n            { content: 'ActionButtonType', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'showItemDividers',\n                hintText: 'Whether to show dividers between menu items',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'showHeaderBorder',\n                hintText: 'Whether to show border below the dropdown header',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nData Types\n\nMultiSelectMenuGroupType\n\nStructure for organizing menu items into groups:\n\n\n\nMultiSelectMenuItemType\n\nStructure for individual selectable items:\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'subMenu',\n                hintText: 'Nested menu items for creating hierarchical menus',\n            },\n            { content: 'MultiSelectMenuItemType[]', hintText: 'array' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'tooltip',\n                hintText: 'Tooltip content displayed on hover',\n            },\n            { content: 'string | React.ReactNode', hintText: 'union type' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'tooltipProps',\n                hintText: 'Configuration options for the tooltip display',\n            },\n            { content: 'TooltipProps', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disableTruncation',\n                hintText: 'Whether to disable text truncation for long labels',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nActionButtonType\n\nConfiguration for action buttons in the dropdown footer:\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the button is disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'loading',\n                hintText: 'Whether the button shows loading state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Multiple Selection: Select multiple options with visual feedback and management\n- Size Variants: Three sizes (small, medium, large) for different interface densities\n- Visual Variants: Container and no-container styles for flexible integration\n- Selection Display: Count badges or comma-separated text display options\n- Search Functionality: Optional built-in search with customizable placeholder\n- Select All Option: Convenient select/deselect all functionality\n- Grouped Organization: Support for organizing items into labeled groups with separators\n- Rich Content Support: Multiple slot positions for icons, badges, and custom elements\n- Clear Selection: Easy clear button to remove all selections\n- Form Integration: Complete form support with labels, validation, and error states\n- Mobile Optimization: Automatic drawer mode on mobile devices for better UX\n- Custom Triggers: Support for completely custom trigger elements\n- Flexible Positioning: 4 sides and 3 alignment options with offset controls\n- Action Buttons: Optional footer buttons for Apply/Cancel workflows\n- Tooltip Integration: Built-in tooltip support for menu items with configuration options\n- Keyboard Navigation: Full keyboard support with space/enter for selection\n- Error Handling: Comprehensive error state management with custom error messages\n- Accessibility First: ARIA compliance, screen reader support, and focus management\n- Responsive Design: Adapts to different screen sizes and device types\n\nEnums\n\nMultiSelectMenuSize\n\n\n\nMultiSelectVariant\n\n\n\nMultiSelectSelectionTagType\n\n\n\nMultiSelectMenuAlignment\n\n\n\nMultiSelectMenuSide\n\n\n\nBehavior\n\nSelection Management\n\n- Multiple Selection: Users can select multiple options using checkboxes\n- Selection Feedback: Visual feedback shows selected items with checkmarks\n- Clear Functionality: Clear button removes all selections when visible\n- Selection Display: Shows count or text based on selectionTagType setting\n\nSearch Behavior\n\n- Live Filtering: Search filters options in real-time as user types\n- Label and SubLabel: Searches both main label and subLabel text\n- Case Insensitive: Search is not case sensitive\n- Group Filtering: Groups with no matching items are hidden\n\nKeyboard Navigation\n\n- Arrow Keys: Navigate through menu options\n- Space/Enter: Toggle selection of the currently focused option\n- Escape: Close the dropdown menu\n- Type Ahead: Jump to options by typing first letters\n\nPositioning Logic\n\n- Auto-Positioning: Dropdown repositions to stay within viewport\n- Side Options: Can appear on top, bottom, left, or right of trigger\n- Alignment Control: Align to start, center, or end of trigger\n- Offset Adjustments: Fine-tune positioning with pixel offsets\n\nMobile Behavior\n\n- Drawer Mode: Renders as drawer on mobile devices when useDrawerOnMobile is true\n- Touch Optimization: Optimized for touch interactions\n- Responsive Sizing: Adapts to mobile screen constraints\n\nAction Buttons\n\n- Optional Footer: Shows action buttons when configured\n- Apply/Cancel Pattern: Common pattern for confirming selections\n- Loading States: Support for async operations with loading indicators\n\nAccessibility\n\n- ARIA Compliance: Full ARIA support with proper roles and attributes\n- Keyboard Navigation: Complete keyboard support with arrow keys and space/enter\n- Screen Reader Support: Proper announcements for state changes and selections\n- Focus Management: Focus is trapped within dropdown and restored properly\n- Label Association: Form labels are properly associated with the select trigger\n- Group Semantics: Menu groups are announced as groups to screen readers\n- Selection Communication: Current selections are communicated to assistive technologies\n- Required Field Support: Required fields are announced to assistive technologies\n\nBest Practices\n\nWhen to Use MultiSelect\n\n- Multiple Choices: When users need to select multiple options from a list\n- Form Fields: As form controls where multiple selections are required\n- Filtering: For filtering data based on multiple criteria\n- Tag Selection: For selecting multiple tags, categories, or attributes\n\nDesign Guidelines\n\n- Clear Labels: Use descriptive labels that clearly explain the purpose\n- Logical Grouping: Group related options together with meaningful group labels\n- Appropriate Sizing: Choose size based on interface density and importance\n- Selection Feedback: Ensure users can clearly see what they've selected\n\nContent Guidelines\n\n- Concise Options: Keep option labels brief but descriptive\n- Helpful SubLabels: Use subLabels to provide additional context when needed\n- Logical Ordering: Order options logically (alphabetical, by frequency, or importance)\n- Search Support: Enable search for lists with many options\n\nMobile Considerations\n\n- Drawer Mode: Use drawer mode on mobile for better touch experience\n- Touch Targets: Ensure adequate touch target sizes for mobile devices\n- Search Functionality: Enable search for long option lists on mobile\n- Performance: Consider lazy loading for very large option sets",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'item...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Data Types",
                "level": 2,
                "id": "data-types"
            },
            {
                "title": "MultiSelectMenuGroupType",
                "level": 3,
                "id": "multiselectmenugrouptype"
            },
            {
                "title": "MultiSelectMenuItemType",
                "level": 3,
                "id": "multiselectmenuitemtype"
            },
            {
                "title": "ActionButtonType",
                "level": 3,
                "id": "actionbuttontype"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "MultiSelectMenuSize",
                "level": 3,
                "id": "multiselectmenusize"
            },
            {
                "title": "MultiSelectVariant",
                "level": 3,
                "id": "multiselectvariant"
            },
            {
                "title": "MultiSelectSelectionTagType",
                "level": 3,
                "id": "multiselectselectiontagtype"
            },
            {
                "title": "MultiSelectMenuAlignment",
                "level": 3,
                "id": "multiselectmenualignment"
            },
            {
                "title": "MultiSelectMenuSide",
                "level": 3,
                "id": "multiselectmenuside"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Selection Management",
                "level": 3,
                "id": "selection-management"
            },
            {
                "title": "Search Behavior",
                "level": 3,
                "id": "search-behavior"
            },
            {
                "title": "Keyboard Navigation",
                "level": 3,
                "id": "keyboard-navigation"
            },
            {
                "title": "Positioning Logic",
                "level": 3,
                "id": "positioning-logic"
            },
            {
                "title": "Mobile Behavior",
                "level": 3,
                "id": "mobile-behavior"
            },
            {
                "title": "Action Buttons",
                "level": 3,
                "id": "action-buttons"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use MultiSelect",
                "level": 3,
                "id": "when-to-use-multiselect"
            },
            {
                "title": "Design Guidelines",
                "level": 3,
                "id": "design-guidelines"
            },
            {
                "title": "Content Guidelines",
                "level": 3,
                "id": "content-guidelines"
            },
            {
                "title": "Mobile Considerations",
                "level": 3,
                "id": "mobile-considerations"
            }
        ]
    },
    "multivalueinput": {
        "title": "MultiValueInput",
        "description": "The MultiValueInput component allows users to input multiple values as tags in a single field, perfect for skills, keywords, email addresses, and other multi-value data entry scenarios with intuitive keyboard interactions.",
        "path": "components/multivalueinput",
        "slug": "multivalueinput",
        "category": "components",
        "tags": [
            "multivalueinput",
            "component",
            "input",
            "tags",
            "multi-value",
            "chips",
            "keywords",
            "skills",
            "form",
            "interactive"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onTagRemove',\n                hintText: 'Callback when a tag is removed',\n            },\n            { content: '(tag: string) => void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'label',\n                hintText: 'Primary label for the input field',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'sublabel',\n                hintText: 'Secondary label or description',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'placeholder',\n                hintText: 'Placeholder text shown when input is empty',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'size',\n                hintText: 'Size variant of the input field',\n            },\n            { content: 'TextInputSize', hintText: 'enum' },\n            { content: 'MEDIUM' },\n        ],\n        [\n            {\n                content: 'error',\n                hintText: 'Whether the input is in error state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'errorMessage',\n                hintText: 'Error message to display when in error state',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'hintText',\n                hintText: 'Helper text displayed below the input',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'helpIconHintText',\n                hintText: 'Tooltip text for the help icon',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the input is disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'required',\n                hintText: 'Whether the input is required',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'name',\n                hintText: 'Name attribute for the input field',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nEnums\n\nMultiValueInputSize\n\nSize variants (inherits from TextInputSize):\n\n\n\nMultiValueInputState\n\nInternal state variants (for styling):\n\n\n\nComponent Tokens\n\nYou can style the MultiValueInput component using the following tokens:\n\n\n\nThe component integrates with the Tag component system for displaying individual values with consistent styling and interactions.\n\nFeatures\n\n- Tag-Based Input: Visual representation of multiple values as removable tags\n- Keyboard Interactions: Enter to add, Backspace to remove last tag\n- Duplicate Prevention: Automatically prevents adding duplicate values\n- Interactive Tags: Click X icon or use backspace to remove individual tags\n- Flexible Container: Responsive wrapping layout that adapts to content\n- Validation States: Built-in error styling with custom error messages\n- Focus Management: Automatic focus handling for seamless user experience\n- Accessibility: Full keyboard navigation and screen reader support\n- Form Integration: Native HTML input attributes and form compatibility\n\nUsage Examples\n\nSkills Input\n\nMulti-value input for collecting technical skills:\n\n\n\nEmail Recipients\n\nInput for multiple email addresses:\n\n\n\nKeywords/Tags\n\nInput for content keywords or tags:\n\n\n\nProgramming Languages\n\nInput with validation and custom processing:\n\n\n\nBehavior\n\nKeyboard Interactions\n\n- Enter Key: Adds the current input value as a new tag\n- Backspace Key: When input is empty, removes the last tag\n- Tab Navigation: Standard tab order through tags and input\n- Focus Management: Clicking container focuses the input field\n\nTag Management\n\n- Duplicate Prevention: Automatically prevents adding existing tags\n- Trim Whitespace: Input values are automatically trimmed\n- Empty Value Handling: Empty or whitespace-only inputs are ignored\n- Case Sensitivity: Tag comparison is case-sensitive by default\n\nVisual Feedback\n\n- Focus States: Container shows focus styling when input is active\n- Hover Effects: Visual feedback on hover for better interactivity\n- Error States: Unified error styling for validation feedback\n- Tag Removal: Clear visual indicators for tag removal actions\n\nResponsive Layout\n\n- Flex Wrapping: Tags automatically wrap to new lines as needed\n- Dynamic Sizing: Container adjusts height based on content\n- Consistent Spacing: Uniform gaps between tags and input field\n- Size Adaptation: Padding and spacing adapt to size variant\n\nBest Practices\n\nWhen to Use MultiValueInput\n\n- Multiple Keywords: Tags, categories, or keywords for content\n- Skills/Technologies: Technical skills, programming languages, tools\n- Contact Lists: Email addresses, usernames, or contact identifiers\n- Filtering: Multiple filter criteria or search terms\n- Configuration: Multiple values for settings or preferences\n\nInput Validation\n\n- Format Validation: Validate input format before adding tags\n- Length Limits: Implement reasonable limits for individual tags and total count\n- Custom Processing: Transform input values (capitalize, format, etc.)\n- Duplicate Handling: Decide whether to allow or prevent duplicates\n- Error Feedback: Provide clear validation messages\n\nUser Experience\n\n- Clear Instructions: Use hint text to explain interaction patterns\n- Visual Cues: Make tag removal actions clearly visible\n- Keyboard Shortcuts: Ensure Enter and Backspace work as expected\n- Placeholder Text: Provide helpful placeholder text for context\n- Size Selection: Choose appropriate size for form context\n\nData Management\n\n- State Structure: Use arrays for simple strings, objects for complex data\n- Persistence: Save tag state appropriately for form submission\n- Performance: Consider virtualization for very large tag lists\n- Accessibility: Ensure screen readers can understand tag structure\n\nAccessibility Considerations\n\n- Label Association: Proper labeling for screen readers\n- Tag Announcement: Ensure tags are announced when added/removed\n- Keyboard Navigation: Full keyboard accessibility for all interactions\n- Focus Indicators: Visible focus indicators for keyboard users\n- Error Communication: Clear error messages for validation failures\n\nIntegration Patterns\n\n- Form Libraries: Compatible with React Hook Form, Formik, etc.\n- Validation: Integrate with form validation libraries\n- Autocomplete: Combine with suggestion systems for better UX\n- Data Sources: Connect to APIs or static data for validation/formatting\n- State Management: Use with Redux, Zustand, or other state libraries",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onTa...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "MultiValueInputSize",
                "level": 3,
                "id": "multivalueinputsize"
            },
            {
                "title": "MultiValueInputState",
                "level": 3,
                "id": "multivalueinputstate"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Skills Input",
                "level": 3,
                "id": "skills-input"
            },
            {
                "title": "Email Recipients",
                "level": 3,
                "id": "email-recipients"
            },
            {
                "title": "Keywords/Tags",
                "level": 3,
                "id": "keywords-tags"
            },
            {
                "title": "Programming Languages",
                "level": 3,
                "id": "programming-languages"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Keyboard Interactions",
                "level": 3,
                "id": "keyboard-interactions"
            },
            {
                "title": "Tag Management",
                "level": 3,
                "id": "tag-management"
            },
            {
                "title": "Visual Feedback",
                "level": 3,
                "id": "visual-feedback"
            },
            {
                "title": "Responsive Layout",
                "level": 3,
                "id": "responsive-layout"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use MultiValueInput",
                "level": 3,
                "id": "when-to-use-multivalueinput"
            },
            {
                "title": "Input Validation",
                "level": 3,
                "id": "input-validation"
            },
            {
                "title": "User Experience",
                "level": 3,
                "id": "user-experience"
            },
            {
                "title": "Data Management",
                "level": 3,
                "id": "data-management"
            },
            {
                "title": "Accessibility Considerations",
                "level": 3,
                "id": "accessibility-considerations"
            },
            {
                "title": "Integration Patterns",
                "level": 3,
                "id": "integration-patterns"
            }
        ]
    },
    "numberinput": {
        "title": "NumberInput",
        "description": "The NumberInput component provides a specialized input field for numeric values with built-in increment/decrement controls, validation, and support for min/max constraints and step intervals.",
        "path": "components/numberinput",
        "slug": "numberinput",
        "category": "components",
        "tags": [
            "numberinput",
            "component",
            "input",
            "numeric",
            "stepper",
            "quantity",
            "counter",
            "form",
            "validation",
            "controls"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n) => void',\n                hintText: 'function',\n            },\n            { content: 'Required' },\n        ],\n        [\n            {\n                content: 'min',\n                hintText: 'Minimum allowed value',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'max',\n                hintText: 'Maximum allowed value',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'step',\n                hintText: 'Increment/decrement step value',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '1' },\n        ],\n        [\n            {\n                content: 'label',\n                hintText: 'Primary label for the input field',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '\"Number Input\"' },\n        ],\n        [\n            {\n                content: 'sublabel',\n                hintText: 'Secondary label or description',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'placeholder',\n                hintText: 'Placeholder text shown when input is empty',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'size',\n                hintText: 'Size variant of the input field',\n            },\n            { content: 'NumberInputSize', hintText: 'enum' },\n            { content: 'MEDIUM' },\n        ],\n        [\n            {\n                content: 'error',\n                hintText: 'Whether the input is in error state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'errorMessage',\n                hintText: 'Error message to display when in error state',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'hintText',\n                hintText: 'Helper text displayed below the input',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'helpIconHintText',\n                hintText: 'Tooltip text for the help icon',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the input is disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'required',\n                hintText: 'Whether the input is required',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'name',\n                hintText: 'Name attribute for the input field',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onFocus',\n                hintText: 'Callback when input receives focus',\n            },\n            {\n                content: '(e: FocusEvent) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onBlur',\n                hintText: 'Callback when input loses focus',\n            },\n            {\n                content: '(e: FocusEvent) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nEnums\n\nNumberInputSize\n\nSize variants for the number input:\n\n\n\nComponent Tokens\n\nYou can style the NumberInput component using the following tokens:\n\n\n\nThe component uses responsive tokens that adapt to different breakpoints:\n\n- sm: Mobile-optimized with floating label behavior for large size\n- lg: Desktop layout with consistent behavior across all sizes\n\nFeatures\n\n- Stepper Controls: Built-in increment/decrement buttons with triangle indicators\n- Numeric Validation: Enforces numeric input with proper value handling\n- Min/Max Constraints: Automatic validation and button disabling at limits\n- Step Intervals: Configurable step size for increment/decrement operations\n- Responsive Design: Adaptive layout with floating labels on mobile for large size\n- Visual Controls: Intuitive up/down arrow buttons positioned on the right\n- Keyboard Support: Standard numeric input keyboard interactions\n- Validation States: Built-in error styling with custom error messages\n- Form Integration: Native HTML input attributes and form compatibility\n- Accessibility: Full keyboard navigation and screen reader support\n\nUsage Examples\n\nBasic Quantity Input\n\nSimple number input for quantity selection:\n\n\n\nPrice Input with Decimal Steps\n\nNumber input for price with decimal precision:\n\n\n\nAge Input with Validation\n\nNumber input with custom validation and error handling:\n\n\n\nTemperature Input\n\nNumber input for temperature with negative values:\n\n\n\nPercentage Input\n\nNumber input for percentage values:\n\n\n\nBehavior\n\nStepper Controls\n\n- Increment Button: Increases value by step amount (top arrow)\n- Decrement Button: Decreases value by step amount (bottom arrow)\n- Auto-disable: Buttons disable when reaching min/max limits\n- Visual Feedback: Hover and focus states for better interaction\n- Click Handling: Triggers onChange with synthetic events\n\nValue Management\n\n- Undefined Values: Supports undefined for empty states\n- Number Parsing: Automatic conversion from string to number\n- Step Validation: Ensures increments follow step intervals\n- Boundary Checking: Prevents values outside min/max range\n- Decimal Support: Handles decimal values with proper precision\n\nResponsive Layout\n\n- Large Size on Mobile: Floating label animation for enhanced mobile experience\n- Dynamic Spacing: Automatic adjustment of stepper button positioning\n- Touch Optimization: Enhanced mobile interactions for stepper controls\n- Consistent Styling: Maintains visual consistency across screen sizes\n\nKeyboard Interactions\n\n- Arrow Keys: Native browser support for up/down arrow increment/decrement\n- Direct Input: Standard numeric keyboard input\n- Tab Navigation: Proper tab order through input and stepper controls\n- Focus Management: Clear focus indicators for accessibility\n\nBest Practices\n\nWhen to Use NumberInput\n\n- Quantity Selection: Product quantities, item counts, etc.\n- Numeric Settings: Configuration values, limits, thresholds\n- Measurements: Dimensions, weights, temperatures, percentages\n- Financial Inputs: Prices, amounts, budgets (with appropriate step values)\n- Range Inputs: Values within specific numeric ranges\n\nValue Handling\n\n- Type Safety: Use proper TypeScript types (number | undefined)\n- Validation: Implement client-side validation for business rules\n- Error Handling: Provide clear error messages for invalid values\n- Default Values: Consider appropriate default values for better UX\n- Precision: Use appropriate step values for decimal precision\n\nMin/Max Configuration\n\n- Logical Ranges: Set realistic min/max values for your use case\n- User Feedback: Clearly communicate value constraints\n- Progressive Enhancement: Allow manual typing beyond stepper limits\n- Edge Cases: Handle edge cases like negative numbers appropriately\n\nStep Configuration\n\n- Appropriate Increments: Choose step values that make sense for your data\n- Decimal Precision: Use decimal steps (0.01, 0.1) for precise values\n- User Expectations: Match step values to user mental models\n- Performance: Consider reasonable step sizes for good UX\n\nAccessibility Considerations\n\n- Label Association: Ensure proper labeling for screen readers\n- Stepper Announcement: Verify stepper controls are accessible\n- Keyboard Navigation: Test all keyboard interactions\n- Value Changes: Ensure value changes are announced appropriately\n- Error Communication: Provide clear, accessible error messages\n\nForm Integration\n\n- Controlled Components: Always use controlled inputs with proper state\n- Validation Libraries: Compatible with React Hook Form, Formik, etc.\n- Submission Handling: Handle undefined values appropriately in forms\n- Reset Functionality: Implement proper form reset behavior\n- Loading States: Consider loading states for async operations\n\nPerformance Optimization\n\n- Debouncing: Consider debouncing for expensive validation operations\n- State Management: Use appropriate state management patterns\n- Re-rendering: Optimize for minimal unnecessary re-renders\n- Memory Cleanup: Properly clean up event listeners and timers",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n) => void',\n                hintText: 'function',\n            },\n            { content: 'Required' },\n        ],\n        [...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "NumberInputSize",
                "level": 3,
                "id": "numberinputsize"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Quantity Input",
                "level": 3,
                "id": "basic-quantity-input"
            },
            {
                "title": "Price Input with Decimal Steps",
                "level": 3,
                "id": "price-input-with-decimal-steps"
            },
            {
                "title": "Age Input with Validation",
                "level": 3,
                "id": "age-input-with-validation"
            },
            {
                "title": "Temperature Input",
                "level": 3,
                "id": "temperature-input"
            },
            {
                "title": "Percentage Input",
                "level": 3,
                "id": "percentage-input"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Stepper Controls",
                "level": 3,
                "id": "stepper-controls"
            },
            {
                "title": "Value Management",
                "level": 3,
                "id": "value-management"
            },
            {
                "title": "Responsive Layout",
                "level": 3,
                "id": "responsive-layout"
            },
            {
                "title": "Keyboard Interactions",
                "level": 3,
                "id": "keyboard-interactions"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use NumberInput",
                "level": 3,
                "id": "when-to-use-numberinput"
            },
            {
                "title": "Value Handling",
                "level": 3,
                "id": "value-handling"
            },
            {
                "title": "Min/Max Configuration",
                "level": 3,
                "id": "min-max-configuration"
            },
            {
                "title": "Step Configuration",
                "level": 3,
                "id": "step-configuration"
            },
            {
                "title": "Accessibility Considerations",
                "level": 3,
                "id": "accessibility-considerations"
            },
            {
                "title": "Form Integration",
                "level": 3,
                "id": "form-integration"
            },
            {
                "title": "Performance Optimization",
                "level": 3,
                "id": "performance-optimization"
            }
        ]
    },
    "otpinput": {
        "title": "OTPInput",
        "description": "The OTPInput component provides a specialized input field for one-time passwords and verification codes, featuring multiple individual digit inputs with automatic focus management, clipboard support, and keyboard navigation.",
        "path": "components/otpinput",
        "slug": "otpinput",
        "category": "components",
        "tags": [
            "otpinput",
            "component",
            "input",
            "otp",
            "verification",
            "authentication",
            "security",
            "digits",
            "code",
            "2fa"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'length',\n                hintText: 'Number of OTP digit inputs to display',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '6' },\n        ],\n        [\n            {\n                content: 'autoFocus',\n                hintText: 'Whether to auto-focus the first input on mount',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'label',\n                hintText: 'Primary label for the OTP input group',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'sublabel',\n                hintText: 'Secondary label or description',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'error',\n                hintText: 'Whether the OTP inputs are in error state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'errorMessage',\n                hintText: 'Error message to display when in error state',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'hintText',\n                hintText: 'Helper text displayed below the inputs',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'helpIconHintText',\n                hintText: 'Tooltip text for the help icon',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether all OTP inputs are disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'required',\n                hintText: 'Whether the OTP input is required',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'name',\n                hintText: 'Name attribute for the input group',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'form',\n                hintText: 'Form ID to associate the inputs with',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nComponent Tokens\n\nYou can style the OTPInput component using the following tokens:\n\n\n\nThe component uses responsive tokens that adapt to different breakpoints with consistent styling for optimal user experience across devices.\n\nFeatures\n\n- Individual Digit Inputs: Separate input field for each OTP digit\n- Auto-Focus Management: Automatic focus progression and regression\n- Keyboard Navigation: Arrow key navigation between inputs\n- Clipboard Support: Smart paste functionality with digit extraction\n- Numeric Validation: Only accepts numeric digits (0-9)\n- Customizable Length: Configurable number of digits (typically 4-8)\n- Error States: Visual error feedback for invalid codes\n- Accessibility: Full keyboard navigation and screen reader support\n- Form Integration: Compatible with form libraries and validation\n- Auto-Focus: Optional auto-focus on component mount\n\nUsage Examples\n\nBasic OTP Input\n\nSimple 6-digit OTP input for verification:\n\n\n\nSMS Authentication\n\n4-digit SMS OTP with custom validation:\n\n\n\nTwo-Factor Authentication\n\n8-digit 2FA code with security context:\n\n\n\nEmail Verification\n\n6-digit email verification with resend functionality:\n\n\n\nCustom Length OTP\n\nVariable length OTP based on security requirements:\n\n\n\nBehavior\n\nFocus Management\n\n- Auto-Focus: Optionally focuses first input on mount\n- Forward Focus: Automatically moves to next input when digit is entered\n- Backward Focus: Moves to previous input on backspace when current is empty\n- Arrow Navigation: Left/right arrow keys move between inputs\n- Click Focus: Clicking any input focuses that specific field\n\nInput Handling\n\n- Numeric Only: Accepts only digits (0-9), ignores other characters\n- Single Digit: Each input accepts only one digit, replacing existing\n- Backspace Logic: Clears current digit or moves to previous input\n- Overflow Handling: Extra characters are ignored, maintains single digit per input\n\nClipboard Support\n\n- Smart Paste: Paste operation on first input distributes digits across all inputs\n- Digit Extraction: Automatically extracts numeric digits from pasted content\n- Length Limiting: Only uses digits up to the specified length\n- Focus Positioning: Focuses appropriate input after paste operation\n\nState Synchronization\n\n- Value Binding: Component value stays synchronized with parent state\n- Change Callbacks: Calls onChange for every digit modification\n- Error Propagation: Error state applies to all input fields\n- Disabled State: Disabling affects all inputs uniformly\n\nBest Practices\n\nWhen to Use OTPInput\n\n- Email Verification: Confirm email addresses during registration\n- SMS Authentication: Phone number verification workflows\n- Two-Factor Authentication: Secondary authentication step\n- Password Reset: Secure password reset verification\n- Transaction Confirmation: High-security transaction verification\n\nSecurity Considerations\n\n- Time Limits: Implement appropriate code expiration times\n- Rate Limiting: Prevent brute force attacks with rate limiting\n- Secure Transmission: Always use HTTPS for OTP transmission\n- Auto-Clear: Clear codes after successful verification\n- Attempt Limits: Limit the number of verification attempts\n\nUser Experience\n\n- Clear Instructions: Provide clear context about where the code is sent\n- Visual Feedback: Show loading states during verification\n- Error Handling: Provide specific, actionable error messages\n- Resend Options: Offer code resend functionality with appropriate delays\n- Auto-Submit: Consider auto-submitting when code is complete\n\nLength Configuration\n\n- 4 Digits: Quick SMS verification, lower security scenarios\n- 6 Digits: Standard email verification, moderate security\n- 8 Digits: High-security scenarios, sensitive operations\n- Custom Length: Match your backend OTP generation settings\n\nAccessibility Considerations\n\n- Label Association: Ensure proper labeling for screen readers\n- Input Announcement: Verify each input is properly announced\n- Keyboard Navigation: Test all keyboard interactions thoroughly\n- Focus Indicators: Maintain visible focus indicators\n- Error Communication: Ensure error messages are accessible\n\nForm Integration\n\n- Controlled Components: Always use controlled inputs with proper state\n- Validation: Integrate with form validation libraries\n- Submission: Handle form submission when OTP is complete\n- Reset Functionality: Implement proper form reset behavior\n- Loading States: Show appropriate loading states during verification\n\nPerformance Optimization\n\n- Debouncing: Consider debouncing for expensive validation operations\n- Memoization: Use React.memo for input optimization if needed\n- State Management: Use appropriate state management patterns\n- Memory Cleanup: Properly clean up timers and event listeners\n\nError Handling\n\n- Validation Timing: Validate only when OTP is complete\n- Clear Messaging: Provide specific error messages for different scenarios\n- Recovery: Allow easy recovery from error states\n- Visual Feedback: Use consistent error styling across all inputs",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'leng...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic OTP Input",
                "level": 3,
                "id": "basic-otp-input"
            },
            {
                "title": "SMS Authentication",
                "level": 3,
                "id": "sms-authentication"
            },
            {
                "title": "Two-Factor Authentication",
                "level": 3,
                "id": "two-factor-authentication"
            },
            {
                "title": "Email Verification",
                "level": 3,
                "id": "email-verification"
            },
            {
                "title": "Custom Length OTP",
                "level": 3,
                "id": "custom-length-otp"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Focus Management",
                "level": 3,
                "id": "focus-management"
            },
            {
                "title": "Input Handling",
                "level": 3,
                "id": "input-handling"
            },
            {
                "title": "Clipboard Support",
                "level": 3,
                "id": "clipboard-support"
            },
            {
                "title": "State Synchronization",
                "level": 3,
                "id": "state-synchronization"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use OTPInput",
                "level": 3,
                "id": "when-to-use-otpinput"
            },
            {
                "title": "Security Considerations",
                "level": 3,
                "id": "security-considerations"
            },
            {
                "title": "User Experience",
                "level": 3,
                "id": "user-experience"
            },
            {
                "title": "Length Configuration",
                "level": 3,
                "id": "length-configuration"
            },
            {
                "title": "Accessibility Considerations",
                "level": 3,
                "id": "accessibility-considerations"
            },
            {
                "title": "Form Integration",
                "level": 3,
                "id": "form-integration"
            },
            {
                "title": "Performance Optimization",
                "level": 3,
                "id": "performance-optimization"
            },
            {
                "title": "Error Handling",
                "level": 3,
                "id": "error-handling"
            }
        ]
    },
    "popover": {
        "title": "Popover",
        "description": "The Popover component displays floating content that appears when triggered by a user action, providing contextual information, forms, or actions without navigating away from the current page.",
        "path": "components/popover",
        "slug": "popover",
        "category": "components",
        "tags": [
            "popover",
            "component",
            "floating",
            "contextual",
            "overlay",
            "tooltip",
            "dropdown",
            "positioning",
            "radix",
            "actions"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'open',\n                hintText: 'Controlled state for the popover visibility',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'asModal',\n                hintText: 'Whether the popover should behave as a modal dialog',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'primaryAction',\n                hintText:\n                    'Configuration for the primary action button in footer',\n            },\n            { content: 'PopoverActionType', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'secondaryAction',\n                hintText:\n                    'Configuration for the secondary action button in footer',\n            },\n            { content: 'PopoverActionType', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'sideOffset',\n                hintText:\n                    'Distance in pixels between the popover and trigger element',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '8' },\n        ],\n        [\n            {\n                content: 'side',\n                hintText: 'Which side of the trigger the popover appears on',\n            },\n            {\n                content: \"'top' | 'right' | 'bottom' | 'left'\",\n                hintText: 'union type',\n            },\n            { content: \"'bottom'\" },\n        ],\n        [\n            {\n                content: 'align',\n                hintText:\n                    'How the popover aligns relative to the trigger element',\n            },\n            { content: \"'start' | 'center' | 'end'\", hintText: 'union type' },\n            { content: \"'center'\" },\n        ],\n        [\n            {\n                content: 'alignOffset',\n                hintText:\n                    'Offset in pixels for fine-tuning the alignment position',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '0' },\n        ],\n        [\n            {\n                content: 'width',\n                hintText: 'Fixed width of the popover in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'minWidth',\n                hintText: 'Minimum width of the popover in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '300' },\n        ],\n        [\n            {\n                content: 'maxWidth',\n                hintText: 'Maximum width of the popover in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '400' },\n        ],\n        [\n            {\n                content: 'height',\n                hintText: 'Fixed height of the popover in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'minHeight',\n                hintText: 'Minimum height of the popover in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'maxHeight',\n                hintText: 'Maximum height of the popover in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'zIndex',\n                hintText: 'Z-index value for the popover overlay layer',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '1000' },\n        ],\n        [\n            {\n                content: 'size',\n                hintText: 'The size variant affecting typography and spacing',\n            },\n            { content: 'PopoverSize', hintText: 'enum' },\n            { content: 'PopoverSize.MEDIUM' },\n        ],\n        [\n            {\n                content: 'onClose',\n                hintText: 'Callback function called when the popover is closed',\n            },\n            { content: '() => void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'shadow',\n                hintText: 'Box shadow variant for the popover',\n            },\n            {\n                content: \"'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full'\",\n                hintText: 'union type',\n            },\n            { content: \"'lg'\" },\n        ],\n        [\n            {\n                content: 'useDrawerOnMobile',\n                hintText: 'Whether to render as drawer on mobile devices',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nData Types\n\nPopoverActionType\n\nAction buttons in popovers use the Button component configuration, excluding certain properties:\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the button is disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'loading',\n                hintText: 'Whether the button shows loading state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'size',\n                hintText: 'Size of the button',\n            },\n            { content: 'ButtonSize', hintText: 'enum' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'leadingIcon',\n                hintText: 'Icon displayed before the button text',\n            },\n            { content: 'React.ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'trailingIcon',\n                hintText: 'Icon displayed after the button text',\n            },\n            { content: 'React.ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Flexible Positioning: 4 sides (top, right, bottom, left) with 3 alignment options (start, center, end)\n- Size Variants: Two size options (small, medium) for different content types\n- Action Buttons: Primary and secondary action buttons with full Button component support\n- Header Management: Optional header with title and description text\n- Close Button: Optional X button for dismissing the popover\n- Controlled State: Support for both controlled and uncontrolled open states\n- Modal Behavior: Option to render as modal dialog for critical interactions\n- Custom Dimensions: Configurable width, height, and size constraints\n- Mobile Optimization: Automatic drawer mode on mobile devices for better UX\n- Shadow Options: 7 shadow variants for different visual emphasis levels\n- Built on Radix UI: Leverages Radix UI Popover for robust accessibility and positioning\n- Collision Detection: Automatic repositioning to stay within viewport boundaries\n- Custom Styling: Comprehensive component token system for styling customization\n- Responsive Design: Adapts to different screen sizes and device types\n- Accessibility First: Full keyboard navigation, focus management, and screen reader support\n\nUsage Examples\n\nBasic Information Popover\n\nSimple popover displaying contextual information\n\n\n\nConfirmation Popover\n\nPopover for confirming destructive actions\n\n\n\nForm Popover\n\nPopover containing a form for quick actions\n\n\n\nSmall Quick Actions Popover\n\nCompact popover for quick actions\n\n\n\nPositioned Popover\n\nPopover with specific positioning and alignment\n\n\n\nControlled State Popover\n\nPopover with external state management\n\n\n\nContent-Only Popover\n\nPopover without header for custom layouts\n\n\n\nModal-Style Popover\n\nPopover that behaves as a modal for critical interactions\n\n\n\nComponent Tokens\n\nYou can style the Popover component using the following tokens:\n\n\n\nBehavior\n\nPositioning Logic\n\n- Side Placement: Popover appears on specified side of trigger (top, right, bottom, left)\n- Alignment Options: Aligns to start, center, or end of trigger element\n- Collision Detection: Automatically repositions if popover would overflow viewport\n- Offset Controls: Fine-tune positioning with side and align offsets\n\nInteraction Patterns\n\n- Click to Open: Trigger click opens the popover\n- Click Outside: Clicking outside the popover closes it\n- Escape Key: Escape key closes the popover\n- Action Execution: Action buttons execute their onClick handlers and close popover\n\nState Management\n\n- Controlled Mode: Use open and onOpenChange props for external state control\n- Uncontrolled Mode: Component manages its own open/closed state internally\n- Close Events: Multiple ways to close including actions, close button, escape key, and backdrop click\n\nMobile Behavior\n\n- Drawer Mode: When useDrawerOnMobile is true, renders as drawer on mobile devices\n- Touch Interactions: Optimized for touch interactions and gestures\n- Responsive Sizing: Adapts to mobile screen constraints and safe areas\n\nContent Management\n\n- Flexible Content: Supports any React content in children\n- Header Control: Optional header with title and description\n- Footer Actions: Optional action buttons in footer area\n- Custom Padding: Automatic padding handling with override options for custom content\n\nAccessibility\n\n- Focus Management: Focus is trapped within popover when open and restored on close\n- Keyboard Navigation: Full keyboard support with Tab, Shift+Tab, and Escape keys\n- Screen Reader Support: Proper ARIA roles, labels, and live regions\n- ARIA Compliance: Uses aria-expanded, aria-haspopup, and proper dialog semantics\n- High Contrast: Supports high contrast mode and respects user color preferences\n- Motion Preferences: Respects user's reduced motion preferences for animations\n\nEnums\n\nPopoverSize\n\n\n\nBest Practices\n\nWhen to Use Popovers\n\n- Contextual Information: For displaying additional information without navigation\n- Quick Actions: For forms or actions that don't require full page navigation\n- Settings and Preferences: For configuration options that are secondary to main flow\n- Help and Documentation: For providing contextual help or feature explanations\n\nPopover Design Guidelines\n\n- Clear Purpose: Each popover should have a focused, single purpose\n- Appropriate Trigger: Use clear, descriptive triggers that indicate popover content\n- Concise Content: Keep content focused and avoid overwhelming users\n- Consistent Positioning: Use consistent positioning patterns throughout your application\n\nContent Guidelines\n\n- Scannable Layout: Organize content with clear hierarchy and spacing\n- Action Clarity: Make action buttons clearly indicate what will happen\n- Error Handling: Provide clear feedback for form validation and errors\n- Loading States: Show loading states for async operations in actions\n\nMobile Considerations\n\n- Use Drawer Mode: Enable drawer mode for better mobile experience\n- Touch Targets: Ensure interactive elements meet minimum touch target sizes\n- Content Length: Keep content appropriate for mobile screen sizes\n- Safe Areas: Consider mobile safe areas and keyboard interactions",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'open...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Data Types",
                "level": 2,
                "id": "data-types"
            },
            {
                "title": "PopoverActionType",
                "level": 3,
                "id": "popoveractiontype"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Information Popover",
                "level": 3,
                "id": "basic-information-popover"
            },
            {
                "title": "Confirmation Popover",
                "level": 3,
                "id": "confirmation-popover"
            },
            {
                "title": "Form Popover",
                "level": 3,
                "id": "form-popover"
            },
            {
                "title": "Small Quick Actions Popover",
                "level": 3,
                "id": "small-quick-actions-popover"
            },
            {
                "title": "Positioned Popover",
                "level": 3,
                "id": "positioned-popover"
            },
            {
                "title": "Controlled State Popover",
                "level": 3,
                "id": "controlled-state-popover"
            },
            {
                "title": "Content-Only Popover",
                "level": 3,
                "id": "content-only-popover"
            },
            {
                "title": "Modal-Style Popover",
                "level": 3,
                "id": "modal-style-popover"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Positioning Logic",
                "level": 3,
                "id": "positioning-logic"
            },
            {
                "title": "Interaction Patterns",
                "level": 3,
                "id": "interaction-patterns"
            },
            {
                "title": "State Management",
                "level": 3,
                "id": "state-management"
            },
            {
                "title": "Mobile Behavior",
                "level": 3,
                "id": "mobile-behavior"
            },
            {
                "title": "Content Management",
                "level": 3,
                "id": "content-management"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "PopoverSize",
                "level": 3,
                "id": "popoversize"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use Popovers",
                "level": 3,
                "id": "when-to-use-popovers"
            },
            {
                "title": "Popover Design Guidelines",
                "level": 3,
                "id": "popover-design-guidelines"
            },
            {
                "title": "Content Guidelines",
                "level": 3,
                "id": "content-guidelines"
            },
            {
                "title": "Mobile Considerations",
                "level": 3,
                "id": "mobile-considerations"
            }
        ]
    },
    "progressbar": {
        "title": "ProgressBar",
        "description": "The ProgressBar component provides visual feedback for ongoing processes, supporting linear and circular variants with solid and segmented styles to indicate completion status and progress over time.",
        "path": "components/progressbar",
        "slug": "progressbar",
        "category": "components",
        "tags": [
            "progressbar",
            "component",
            "progress",
            "indicator",
            "loading",
            "status",
            "completion",
            "feedback"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n\n\nFeatures\n\n- Multiple Variants: Linear solid, linear segmented, and circular progress indicators\n- Size Options: Three size variants (small, medium, large) for different contexts\n- Progress Labels: Optional percentage labels with consistent typography\n- Smooth Animations: Built-in transitions for smooth progress updates\n- Value Clamping: Automatic clamping of values between 0-100 range\n- Circular Indicators: Full circular progress with solid and segmented styles\n- Segmented Styling: Distinctive segmented appearance for step-based progress\n- Responsive Design: Adapts to container width for linear variants\n- Accessibility Ready: Semantic structure suitable for ARIA enhancements\n- Token-Based Styling: Comprehensive design token system for customization\n- High Performance: Optimized rendering for smooth animations\n- Type Safety: Full TypeScript support with proper type definitions\n\nEnums\n\nProgressBarVariant\n\n\n\nProgressBarSize\n\n\n\nProgressBarType\n\n\n\nUsage Examples\n\nLinear Progress Bar\n\nBasic linear progress indicator\n\n\n\nSegmented Progress Bar\n\nLinear progress bar with segmented appearance\n\n\n\nCircular Progress Indicator\n\nCircular progress with percentage label\n\n\n\nSegmented Circular Progress\n\nCircular progress with dashed segmented style\n\n\n\nDifferent Sizes\n\nProgress bars in various sizes\n\n\n\nLoading States\n\nProgress bars for different loading scenarios\n\n\n\nBehavior\n\nValue Management\n\n- Range Clamping: Values are automatically clamped between 0 and 100\n- Real-time Updates: Progress updates smoothly with CSS transitions\n- Percentage Display: Labels show rounded percentage values\n- Responsive Width: Linear variants adapt to container width\n\nVisual Feedback\n\n- Smooth Transitions: 0.3s ease-in-out transitions for progress changes\n- Clear Indication: Visual distinction between completed and remaining progress\n- Consistent Sizing: Proportional scaling across size variants\n- Label Positioning: Appropriately positioned labels for readability\n\nAnimation System\n\n- CSS Transitions: Hardware-accelerated transitions for smooth performance\n- Stroke Animation: Circular variants animate stroke-dashoffset for smooth circular progress\n- Width Animation: Linear variants animate width property for smooth filling\n- No Flicker: Optimized rendering to prevent visual artifacts\n\nComponent Tokens\n\nThe ProgressBar component uses a comprehensive token system for styling:\n\n\n\nBest Practices\n\nWhen to Use Progress Bars\n\n- File Operations: For file uploads, downloads, or processing\n- Multi-step Processes: For wizards, forms, or setup procedures\n- Loading States: For data loading or content generation\n- Background Tasks: For long-running operations with known duration\n\nProgress Bar Guidelines\n\n- Accurate Values: Ensure progress values accurately reflect actual completion\n- Appropriate Variants: Use segmented for step-based processes, solid for continuous progress\n- Clear Context: Provide descriptive labels explaining what's progressing\n- Size Selection: Choose sizes appropriate for the UI context and importance\n\nVisual Design\n\n- Consistent Sizing: Use consistent progress bar sizes throughout your application\n- Proper Spacing: Ensure adequate spacing around progress bars\n- Label Visibility: Show labels when progress percentage is important to users\n- Color Contrast: Ensure sufficient contrast between progress and background\n\nPerformance Considerations\n\n- Smooth Updates: Avoid frequent rapid updates that could cause visual jitter\n- Animation Optimization: Leverage CSS transitions for smooth visual feedback\n- Value Throttling: Consider throttling progress updates for better performance\n- Memory Management: Clean up intervals or timeouts used for progress simulation\n\nAccessibility Considerations\n\n- ARIA Labels: Consider adding ARIA labels for screen readers\n- Progress Context: Provide context about what process is being tracked\n- Completion Feedback: Ensure users are notified when progress completes\n- Alternative Text: Provide alternative indicators for users who can't see progress bars\n\nMobile Considerations\n\n- Touch-Friendly Sizing: Ensure progress bars are visible on mobile screens\n- Performance Optimization: Optimize animations for mobile devices\n- Battery Efficiency: Consider reducing animation frequency on mobile\n- Screen Real Estate: Choose appropriate sizes for mobile layouts",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n\n\nFeatures\n\n- Multiple Variants: Linear solid, linear segmented, and circular progress indicators\n- Size Options: Three size v...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "ProgressBarVariant",
                "level": 3,
                "id": "progressbarvariant"
            },
            {
                "title": "ProgressBarSize",
                "level": 3,
                "id": "progressbarsize"
            },
            {
                "title": "ProgressBarType",
                "level": 3,
                "id": "progressbartype"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Linear Progress Bar",
                "level": 3,
                "id": "linear-progress-bar"
            },
            {
                "title": "Segmented Progress Bar",
                "level": 3,
                "id": "segmented-progress-bar"
            },
            {
                "title": "Circular Progress Indicator",
                "level": 3,
                "id": "circular-progress-indicator"
            },
            {
                "title": "Segmented Circular Progress",
                "level": 3,
                "id": "segmented-circular-progress"
            },
            {
                "title": "Different Sizes",
                "level": 3,
                "id": "different-sizes"
            },
            {
                "title": "Loading States",
                "level": 3,
                "id": "loading-states"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Value Management",
                "level": 3,
                "id": "value-management"
            },
            {
                "title": "Visual Feedback",
                "level": 3,
                "id": "visual-feedback"
            },
            {
                "title": "Animation System",
                "level": 3,
                "id": "animation-system"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use Progress Bars",
                "level": 3,
                "id": "when-to-use-progress-bars"
            },
            {
                "title": "Progress Bar Guidelines",
                "level": 3,
                "id": "progress-bar-guidelines"
            },
            {
                "title": "Visual Design",
                "level": 3,
                "id": "visual-design"
            },
            {
                "title": "Performance Considerations",
                "level": 3,
                "id": "performance-considerations"
            },
            {
                "title": "Accessibility Considerations",
                "level": 3,
                "id": "accessibility-considerations"
            },
            {
                "title": "Mobile Considerations",
                "level": 3,
                "id": "mobile-considerations"
            }
        ]
    },
    "radio": {
        "title": "Radio",
        "description": "The Radio component allows users to select a single option from a group of mutually exclusive choices, with proper form integration and accessibility support.",
        "path": "components/radio",
        "slug": "radio",
        "category": "components",
        "tags": [
            "radio",
            "component",
            "form",
            "input",
            "selection",
            "group",
            "choice",
            "mutually-exclusive",
            "keyboard-navigation",
            "accessibility"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\nRadio Props\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText:\n                    'Whether the radio button is disabled and non-interactive',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'required',\n                hintText:\n                    'Whether the radio button is required (shows asterisk)',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'error',\n                hintText: 'Whether the radio button is in an error state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'size',\n                hintText: 'The size variant of the radio button',\n            },\n            { content: 'RadioSize', hintText: 'enum' },\n            { content: 'RadioSize.MEDIUM' },\n        ],\n        [\n            {\n                content: 'children',\n                hintText: 'The label text for the radio button',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'subtext',\n                hintText: 'Optional descriptive text displayed below the label',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'slot',\n                hintText: 'Optional element to display alongside the label',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'name',\n                hintText: 'The name attribute for form grouping',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nRadioGroup Props\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether all radio buttons in the group are disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Size Variants: Two size options (small, medium) for different contexts\n- Group Management: Automatic mutual exclusivity within RadioGroup containers\n- Rich Content Support: Optional subtext and slot elements for enhanced context\n- State Management: Support for controlled and uncontrolled modes\n- Form Integration: Native HTML radio input with proper form binding\n- Visual States: Required field indicators, error states, and disabled states\n- Keyboard Navigation: Full arrow key navigation within groups with auto-selection\n- Individual Controls: Can be used standalone outside of groups\n- Automatic IDs: Generated unique IDs when not provided\n- Accessibility First: ARIA compliance, screen reader support, and proper semantics\n- Custom Styling: Comprehensive token system for visual customization\n- Focus Management: Clear focus indicators and keyboard interaction patterns\n- Error Handling: Visual and programmatic error state communication\n- Responsive Design: Consistent behavior across different screen sizes\n- Type Safety: Full TypeScript support with proper type definitions\n\nUsage Examples\n\nBasic Radio Selection\n\nSimple radio group for basic option selection\n\n\n\nRadio with Enhanced Content\n\nRadio buttons with descriptive text and visual elements\n\n\n\nSize Variants\n\nRadio buttons in different sizes for various contexts\n\n\n\nForm Validation States\n\nRadio buttons with validation and required states\n\n\n\nPricing Options\n\nRadio group for subscription plan selection\n\n\n\nControlled vs Uncontrolled\n\nDifferent state management approaches for radio groups\n\n\n\nIndividual Radio Usage\n\nStandalone radio buttons for specific use cases\n\n\n\nComplex Configuration Form\n\nComplete configuration form with multiple radio groups\n\n\n\nDisabled State Management\n\nRadio groups with conditional disabling\n\n\n\nComponent Tokens\n\nYou can style the Radio component using the following tokens:\n\n\n\nBehavior\n\nSelection Behavior\n\n- Mutual Exclusivity: Only one radio button can be selected within a group\n- Group Management: RadioGroup automatically manages selection state\n- Value Tracking: Selected value is tracked and propagated through onChange callbacks\n- Default Selection: Support for default selected values in uncontrolled mode\n\nKeyboard Navigation\n\n- Arrow Keys: Navigate between radio buttons within a group\n- Auto-Selection: Arrow key navigation automatically selects the focused radio\n- Tab Behavior: Tab moves focus between radio groups, not individual radios\n- Space/Enter: Activates the currently focused radio button\n\nState Management\n\n- Controlled Mode: External state management with value and onChange props\n- Uncontrolled Mode: Internal state management with defaultValue prop\n- Individual Controls: Can be used standalone outside of groups\n- Validation Support: Built-in support for required and error states\n\nFocus Management\n\n- Group Focus: Only the selected radio (or first radio) in a group is focusable\n- Focus Indicators: Clear visual focus indicators for keyboard users\n- Focus Restoration: Focus is properly managed during dynamic updates\n- Skip Navigation: Proper tab order through radio groups\n\nContent Management\n\n- Label Association: Proper label association with radio inputs\n- Subtext Support: Optional descriptive text below main labels\n- Slot Content: Support for additional content like badges or icons\n- Required Indicators: Automatic asterisk display for required fields\n\nAccessibility\n\n- ARIA Compliance: Uses proper role=\"radiogroup\" and aria-checked attributes\n- Keyboard Navigation: Full keyboard support with arrow keys for navigation\n- Screen Reader Support: Proper announcements of state changes and group structure\n- Focus Management: Focus is trapped within radio groups during navigation\n- Label Association: Each radio is properly associated with its label\n- Group Semantics: Radio groups are announced as groups to screen readers\n- State Communication: Current selection and states are communicated to assistive technologies\n- Required Field Support: Required fields are announced to screen readers\n- Error State Support: Error states are communicated through ARIA attributes\n\nEnums\n\nRadioSize\n\n\n\nType Definitions\n\nRadioState\n\n\n\nRadioIndicatorState\n\n\n\nBest Practices\n\nWhen to Use Radio Buttons\n\n- Mutually Exclusive Choices: When users must select exactly one option from a list\n- Visible Options: When all options should be visible at once (typically 2-7 options)\n- Single Selection: When only one choice is allowed, unlike checkboxes\n- Form Controls: As part of forms where a selection is required\n\nRadio Group Design Guidelines\n\n- Clear Labels: Use descriptive labels that clearly explain each option\n- Logical Ordering: Order options logically (alphabetical, by importance, or frequency)\n- Default Selection: Consider providing a sensible default selection\n- Group Related Options: Keep related radio buttons together in groups\n\nContent Guidelines\n\n- Concise Labels: Keep radio button labels brief but descriptive\n- Helpful Subtext: Use subtext to provide additional context when needed\n- Consistent Formatting: Maintain consistent label and subtext formatting\n- Clear Hierarchy: Use typography and spacing to establish clear content hierarchy\n\nForm Integration\n\n- Validation: Implement proper validation for required radio groups\n- Error Messaging: Provide clear error messages for validation failures\n- Default Values: Set appropriate default values for better user experience\n- State Persistence: Consider persisting selections during form interactions",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\nRadio Props\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                c...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Radio Props",
                "level": 3,
                "id": "radio-props"
            },
            {
                "title": "RadioGroup Props",
                "level": 3,
                "id": "radiogroup-props"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Radio Selection",
                "level": 3,
                "id": "basic-radio-selection"
            },
            {
                "title": "Radio with Enhanced Content",
                "level": 3,
                "id": "radio-with-enhanced-content"
            },
            {
                "title": "Size Variants",
                "level": 3,
                "id": "size-variants"
            },
            {
                "title": "Form Validation States",
                "level": 3,
                "id": "form-validation-states"
            },
            {
                "title": "Pricing Options",
                "level": 3,
                "id": "pricing-options"
            },
            {
                "title": "Controlled vs Uncontrolled",
                "level": 3,
                "id": "controlled-vs-uncontrolled"
            },
            {
                "title": "Individual Radio Usage",
                "level": 3,
                "id": "individual-radio-usage"
            },
            {
                "title": "Complex Configuration Form",
                "level": 3,
                "id": "complex-configuration-form"
            },
            {
                "title": "Disabled State Management",
                "level": 3,
                "id": "disabled-state-management"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Selection Behavior",
                "level": 3,
                "id": "selection-behavior"
            },
            {
                "title": "Keyboard Navigation",
                "level": 3,
                "id": "keyboard-navigation"
            },
            {
                "title": "State Management",
                "level": 3,
                "id": "state-management"
            },
            {
                "title": "Focus Management",
                "level": 3,
                "id": "focus-management"
            },
            {
                "title": "Content Management",
                "level": 3,
                "id": "content-management"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "RadioSize",
                "level": 3,
                "id": "radiosize"
            },
            {
                "title": "Type Definitions",
                "level": 2,
                "id": "type-definitions"
            },
            {
                "title": "RadioState",
                "level": 3,
                "id": "radiostate"
            },
            {
                "title": "RadioIndicatorState",
                "level": 3,
                "id": "radioindicatorstate"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use Radio Buttons",
                "level": 3,
                "id": "when-to-use-radio-buttons"
            },
            {
                "title": "Radio Group Design Guidelines",
                "level": 3,
                "id": "radio-group-design-guidelines"
            },
            {
                "title": "Content Guidelines",
                "level": 3,
                "id": "content-guidelines"
            },
            {
                "title": "Form Integration",
                "level": 3,
                "id": "form-integration"
            }
        ]
    },
    "searchinput": {
        "title": "SearchInput",
        "description": "The SearchInput component provides a specialized input field for search functionality, featuring customizable left and right slots for icons, error states, and a clean minimalist design with underline borders.",
        "path": "components/searchinput",
        "slug": "searchinput",
        "category": "components",
        "tags": [
            "searchinput",
            "component",
            "input",
            "search",
            "form",
            "textfield",
            "filter",
            "query",
            "find",
            "lookup"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'placeholder',\n                hintText: 'Placeholder text for the input',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '\"Enter\"' },\n        ],\n        [\n            {\n                content: 'name',\n                hintText: 'Name attribute for the input element',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the input is disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'autoFocus',\n                hintText: 'Whether to auto-focus the input on mount',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'onFocus',\n                hintText: 'Callback when input receives focus',\n            },\n            {\n                content: '(e: React.FocusEvent) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onBlur',\n                hintText: 'Callback when input loses focus',\n            },\n            {\n                content: '(e: React.FocusEvent) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nComponent Tokens\n\nYou can style the SearchInput component using the following tokens:\n\n\n\nThe component uses a minimalist design with only bottom borders for different states and customizable padding for left and right slots.\n\nFeatures\n\n- Slot Support: Configurable left and right slots for icons or other elements\n- Dynamic Padding: Automatically adjusts padding based on slot content width\n- Error States: Visual error feedback with customizable border colors\n- Minimalist Design: Clean underline-only border styling\n- Focus Management: Proper focus and hover state handling\n- Accessibility: Full keyboard navigation and screen reader support\n- Form Integration: Compatible with form libraries and validation\n- Responsive: Adapts to container width with 100% default width\n\nUsage Examples\n\nBasic Search\n\nSimple search input with left search icon:\n\n\n\nSearch with Filter\n\nSearch input with both search and filter icons:\n\n\n\nGlobal Search Bar\n\nSearch bar for site-wide search functionality:\n\n\n\nProduct Filter Search\n\nSearch with category filter integration:\n\n\n\nError State Search\n\nSearch input with validation and error handling:\n\n\n\nAdvanced Search with Commands\n\nSearch input supporting command shortcuts:\n\n\n\nBehavior\n\nSlot Management\n\n- Dynamic Sizing: Slots automatically calculate their width to adjust input padding\n- Position: Left slot positioned at the left edge, right slot at the right edge\n- Centering: Slot content is vertically centered within the input height\n- Gap Handling: Consistent gap between slot content and input text\n\nInput Styling\n\n- Border Design: Only bottom border visible, other borders set to none\n- State Colors: Different border colors for default, hover, focus, and error states\n- Outline: Removes default browser outline for custom focus styling\n- Width: Full width by default (100%) for responsive layout\n\nFocus Behavior\n\n- Focus Indication: Bottom border changes color on focus\n- Auto-Focus: Optional auto-focus on component mount\n- Tab Navigation: Proper tab order and keyboard accessibility\n- Focus Events: Supports onFocus and onBlur event handlers\n\nError Handling\n\n- Visual Feedback: Error state changes bottom border to error color\n- State Persistence: Error state maintained until explicitly cleared\n- Validation: Can be integrated with form validation libraries\n- Accessibility: Error states are properly announced to screen readers\n\nBest Practices\n\nWhen to Use SearchInput\n\n- Search Functionality: Primary search interfaces in applications\n- Filter Interfaces: Product catalogs, data tables, and content lists\n- Command Interfaces: Admin panels and developer tools\n- Quick Find: Navigation and content discovery features\n- Global Search: Site-wide search functionality\n\nIcon and Slot Guidelines\n\n- Search Icon: Always include a search icon for recognition\n- Filter Icon: Add filter icon for advanced search capabilities\n- Clear Button: Consider adding a clear/reset button in right slot\n- Command Hints: Use keyboard shortcut hints for power users\n- Loading States: Show loading indicators during search operations\n\nAccessibility Considerations\n\n- Label Association: Ensure proper labeling for screen readers\n- Keyboard Support: Test all keyboard interactions thoroughly\n- Focus Management: Maintain visible focus indicators\n- Error Communication: Ensure error states are accessible\n- ARIA Labels: Use appropriate ARIA labels for search context\n\nPerformance Optimization\n\n- Debouncing: Implement debouncing for search API calls\n- Memoization: Use React.memo for slot components if needed\n- State Management: Use appropriate state management patterns\n- Search Optimization: Consider search suggestions and autocomplete\n\nForm Integration\n\n- Controlled Components: Always use controlled inputs with proper state\n- Validation: Integrate with form validation libraries\n- Submission: Handle form submission and search triggers\n- Reset Functionality: Implement proper form reset behavior\n- Search Context: Maintain search state across navigation\n\nStyling Guidelines\n\n- Consistent Slots: Use consistent icon sizing and colors\n- Visual Hierarchy: Ensure search input stands out appropriately\n- Responsive Design: Test on various screen sizes\n- Theme Integration: Follow design system color and spacing tokens\n- State Feedback: Provide clear visual feedback for all states\n\nSearch Experience\n\n- Real-time Results: Consider live search for better UX\n- Search History: Implement search history and suggestions\n- No Results: Handle empty search results gracefully\n- Search Analytics: Track search patterns for optimization\n- Contextual Search: Scope search to relevant content areas",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Search",
                "level": 3,
                "id": "basic-search"
            },
            {
                "title": "Search with Filter",
                "level": 3,
                "id": "search-with-filter"
            },
            {
                "title": "Global Search Bar",
                "level": 3,
                "id": "global-search-bar"
            },
            {
                "title": "Product Filter Search",
                "level": 3,
                "id": "product-filter-search"
            },
            {
                "title": "Error State Search",
                "level": 3,
                "id": "error-state-search"
            },
            {
                "title": "Advanced Search with Commands",
                "level": 3,
                "id": "advanced-search-with-commands"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Slot Management",
                "level": 3,
                "id": "slot-management"
            },
            {
                "title": "Input Styling",
                "level": 3,
                "id": "input-styling"
            },
            {
                "title": "Focus Behavior",
                "level": 3,
                "id": "focus-behavior"
            },
            {
                "title": "Error Handling",
                "level": 3,
                "id": "error-handling"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use SearchInput",
                "level": 3,
                "id": "when-to-use-searchinput"
            },
            {
                "title": "Icon and Slot Guidelines",
                "level": 3,
                "id": "icon-and-slot-guidelines"
            },
            {
                "title": "Accessibility Considerations",
                "level": 3,
                "id": "accessibility-considerations"
            },
            {
                "title": "Performance Optimization",
                "level": 3,
                "id": "performance-optimization"
            },
            {
                "title": "Form Integration",
                "level": 3,
                "id": "form-integration"
            },
            {
                "title": "Styling Guidelines",
                "level": 3,
                "id": "styling-guidelines"
            },
            {
                "title": "Search Experience",
                "level": 3,
                "id": "search-experience"
            }
        ]
    },
    "sidebar": {
        "title": "Sidebar",
        "description": "The Sidebar component provides a comprehensive navigation layout with collapsible sidebar, directory navigation, and integrated topbar, featuring merchant selection, keyboard shortcuts, and responsive design for complex application layouts.",
        "path": "components/sidebar",
        "slug": "sidebar",
        "category": "components",
        "tags": [
            "sidebar",
            "component",
            "navigation",
            "layout",
            "directory",
            "collapsible",
            "responsive",
            "application"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n\n\nData Types\n\nDirectoryData\n\nNavigation structure for the sidebar directory:\n\n\n\nLeftPanelInfo\n\nConfiguration for the optional secondary sidebar panel:\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'maxVisibleItems',\n                hintText: 'Maximum items to show before overflow menu',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '5' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nLeftPanelItem\n\nIndividual item configuration for the left panel:\n\n\n\nFeatures\n\n- Collapsible Sidebar: Expandable/collapsible sidebar with smooth animations and hover states\n- Directory Navigation: Hierarchical navigation with nested menu support using Directory component\n- Dual Panel Layout: Optional secondary left panel for tenant or context switching\n- Keyboard Shortcuts: Configurable keyboard shortcut for sidebar toggle (default: '/')\n- Responsive Design: Mobile-friendly with auto-collapse and hover expansion\n- Integrated Topbar: Sticky topbar with backdrop blur and flexible content area\n- Footer Support: Optional footer area with user information or custom content\n- Merchant Selection: Built-in merchant/context switcher with dropdown selection\n- Overflow Handling: Smart overflow management for secondary panel items\n- Smooth Animations: CSS-based transitions for expand/collapse and hover states\n- Customizable Header: Flexible sidebar header area with custom slot support\n- Backdrop Effects: Modern backdrop blur effects for enhanced visual hierarchy\n- Auto-scrolling: Custom scrollbar styling with overflow management\n- State Management: Internal state management for expand/collapse functionality\n\nUsage Examples\n\nBasic Sidebar\n\nSimple sidebar with navigation items\n\n\n\nNested Navigation\n\nSidebar with hierarchical navigation structure\n\n\n\nDual Panel Sidebar\n\nSidebar with secondary tenant/context panel\n\n\n\nCustom Footer and Header\n\nSidebar with custom header slot and footer\n\n\n\nCustom Keyboard Shortcut\n\nSidebar with custom collapse key\n\n\n\nBehavior\n\nCollapse/Expand System\n\n- Default State: Sidebar starts in expanded state\n- Toggle Methods: Click toggle button or use keyboard shortcut\n- Hover Expansion: Collapsed sidebar expands on hover\n- Animation: Smooth CSS transitions for state changes\n- Persistence: State maintained during session\n\nNavigation Interaction\n\n- Directory Integration: Uses Directory component for navigation rendering\n- Nested Menus: Supports hierarchical navigation with expandable sub-menus\n- Active States: Visual indicators for current page/section\n- Click Handling: Standard link navigation with href support\n\nResponsive Design\n\n- Mobile Adaptation: Automatic behavior adjustment for mobile screens\n- Touch Support: Touch-friendly interactions for mobile devices\n- Overflow Management: Smart content overflow handling\n- Backdrop Effects: Modern backdrop blur for depth perception\n\nPanel Management\n\n- Dual Panel Support: Optional secondary panel for context switching\n- Overflow Handling: Dropdown menu for excess panel items\n- Selection States: Visual feedback for selected panel items\n- Dynamic Content: Reactive updates based on panel selection\n\nBest Practices\n\nWhen to Use Sidebar\n\n- Complex Applications: For applications with multiple sections and deep navigation\n- Dashboard Layouts: For admin panels and data-heavy interfaces\n- Multi-Context Apps: For applications with tenant or workspace switching\n- Content Management: For systems with hierarchical content organization\n\nNavigation Design\n\n- Clear Hierarchy: Organize navigation items in logical groups\n- Consistent Icons: Use consistent icon styles throughout navigation\n- Meaningful Labels: Use clear, descriptive labels for navigation items\n- Logical Grouping: Group related navigation items together\n\nLayout Considerations\n\n- Content Area: Ensure main content area adapts to sidebar state\n- Mobile Experience: Design for mobile-first with collapsible behavior\n- Performance: Optimize navigation data structure for large menus\n- State Management: Handle navigation state at application level\n\nAccessibility Considerations\n\n- Keyboard Navigation: Ensure all functionality works with keyboard\n- Screen Readers: Provide appropriate ARIA labels and roles\n- Focus Management: Maintain logical focus order throughout navigation\n- Color Independence: Don't rely solely on color for navigation states\n\nCustomization Guidelines\n\n- Brand Integration: Customize header area with brand elements\n- Consistent Styling: Maintain visual consistency with application theme\n- Footer Content: Use footer for user information or secondary actions\n- Responsive Breakpoints: Consider custom breakpoints for sidebar behavior",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n\n\nData Types\n\nDirectoryData\n\nNavigation structure for the sidebar directory:\n\n\n\nLeftPanelInfo\n\nConfiguration for the optional...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Data Types",
                "level": 2,
                "id": "data-types"
            },
            {
                "title": "DirectoryData",
                "level": 3,
                "id": "directorydata"
            },
            {
                "title": "LeftPanelInfo",
                "level": 3,
                "id": "leftpanelinfo"
            },
            {
                "title": "LeftPanelItem",
                "level": 3,
                "id": "leftpanelitem"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Sidebar",
                "level": 3,
                "id": "basic-sidebar"
            },
            {
                "title": "Nested Navigation",
                "level": 3,
                "id": "nested-navigation"
            },
            {
                "title": "Dual Panel Sidebar",
                "level": 3,
                "id": "dual-panel-sidebar"
            },
            {
                "title": "Custom Footer and Header",
                "level": 3,
                "id": "custom-footer-and-header"
            },
            {
                "title": "Custom Keyboard Shortcut",
                "level": 3,
                "id": "custom-keyboard-shortcut"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Collapse/Expand System",
                "level": 3,
                "id": "collapse-expand-system"
            },
            {
                "title": "Navigation Interaction",
                "level": 3,
                "id": "navigation-interaction"
            },
            {
                "title": "Responsive Design",
                "level": 3,
                "id": "responsive-design"
            },
            {
                "title": "Panel Management",
                "level": 3,
                "id": "panel-management"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use Sidebar",
                "level": 3,
                "id": "when-to-use-sidebar"
            },
            {
                "title": "Navigation Design",
                "level": 3,
                "id": "navigation-design"
            },
            {
                "title": "Layout Considerations",
                "level": 3,
                "id": "layout-considerations"
            },
            {
                "title": "Accessibility Considerations",
                "level": 3,
                "id": "accessibility-considerations"
            },
            {
                "title": "Customization Guidelines",
                "level": 3,
                "id": "customization-guidelines"
            }
        ]
    },
    "single-select": {
        "title": "Single Select",
        "description": "The SingleSelect component provides a dropdown selection interface for choosing a single option from a list, with search, keyboard navigation, and customizable styling options.",
        "path": "components/single-select",
        "slug": "single-select",
        "category": "components",
        "tags": [
            "single-select",
            "component",
            "form",
            "dropdown",
            "selection",
            "search",
            "keyboard-navigation",
            "positioning",
            "mobile-optimized",
            "accessibility"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'enableSearch',\n                hintText: 'Whether to show search input in the dropdown menu',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'searchPlaceholder',\n                hintText: 'Placeholder text for the search input field',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'slot',\n                hintText:\n                    'Content displayed inside the trigger button (e.g., icons)',\n            },\n            { content: 'React.ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText:\n                    'Whether the select field is disabled and non-interactive',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'name',\n                hintText:\n                    'Name attribute for form identification and submission',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'customTrigger',\n                hintText:\n                    'Custom React element to replace the default trigger button',\n            },\n            { content: 'React.ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'useDrawerOnMobile',\n                hintText: 'Whether to render as drawer on mobile devices',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n        [\n            {\n                content: 'alignment',\n                hintText:\n                    'How the dropdown menu aligns relative to the trigger',\n            },\n            { content: 'SelectMenuAlignment', hintText: 'enum' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'side',\n                hintText: 'Which side of the trigger the dropdown appears on',\n            },\n            { content: 'SelectMenuSide', hintText: 'enum' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'sideOffset',\n                hintText: 'Distance in pixels between trigger and dropdown',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'alignOffset',\n                hintText: 'Alignment offset in pixels for fine positioning',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'minWidth',\n                hintText: 'Minimum width of the dropdown menu in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'maxWidth',\n                hintText: 'Maximum width of the dropdown menu in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'maxHeight',\n                hintText: 'Maximum height of the dropdown menu in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'inline',\n                hintText:\n                    'Whether the select renders inline without fixed height',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'onBlur',\n                hintText:\n                    'Callback function called when the select loses focus',\n            },\n            { content: '() => void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onFocus',\n                hintText:\n                    'Callback function called when the select gains focus',\n            },\n            { content: '() => void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'error',\n                hintText: 'Whether the select is in an error state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'errorMessage',\n                hintText: 'Error message displayed when error is true',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nData Types\n\nSelectMenuGroupType\n\nStructure for organizing menu items into groups:\n\n\n\nSelectMenuItemType\n\nStructure for individual selectable items:\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'subMenu',\n                hintText: 'Nested menu items for creating hierarchical menus',\n            },\n            { content: 'SelectMenuItemType[]', hintText: 'array' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'tooltip',\n                hintText: 'Tooltip content displayed on hover',\n            },\n            { content: 'string | React.ReactNode', hintText: 'union type' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'tooltipProps',\n                hintText: 'Configuration options for the tooltip display',\n            },\n            { content: 'TooltipProps', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disableTruncation',\n                hintText: 'Whether to disable text truncation for long labels',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Size Variants: Three sizes (small, medium, large) for different interface densities\n- Visual Variants: Container and no-container styles for flexible integration\n- Search Functionality: Optional built-in search with customizable placeholder\n- Grouped Organization: Support for organizing items into labeled groups with separators\n- Rich Content Support: Multiple slot positions for icons, badges, and custom elements\n- Submenu Navigation: Hierarchical menu structure with nested item support\n- Form Integration: Complete form support with labels, validation, and error states\n- Mobile Optimization: Automatic drawer mode on mobile devices for better UX\n- Custom Triggers: Support for completely custom trigger elements\n- Flexible Positioning: 4 sides and 3 alignment options with offset controls\n- Tooltip Integration: Built-in tooltip support for menu items with configuration options\n- Keyboard Navigation: Full keyboard support with arrow keys and type-ahead search\n- Error Handling: Comprehensive error state management with custom error messages\n- Accessibility First: ARIA compliance, screen reader support, and focus management\n- Responsive Design: Adapts to different screen sizes and device types\n\nUsage Examples\n\nBasic Country Selection\n\nSimple select for country selection with flags\n\n\n\nUser Assignment with Rich Content\n\nSelect for user assignment with status indicators and profiles\n\n\n\nTechnology Stack Selection\n\nSelect for technology preferences with descriptions\n\n\n\nSize and Variant Comparisons\n\nDifferent sizes and styling variants\n\n\n\nForm Validation States\n\nSelect with validation and error handling\n\n\n\nCustom Trigger Example\n\nSelect with completely custom trigger element\n\n\n\nPositioning and Alignment\n\nSelect with custom positioning\n\n\n\nInline and Focus Management\n\nSelect with inline variant and focus handling\n\n\n\nComplete Project Setup Form\n\nComplex form with multiple interdependent selects\n\n\n\nComponent Tokens\n\nYou can style the SingleSelect component using the following tokens:\n\n\n\nBehavior\n\nSelection Behavior\n\n- Single Selection: Only one option can be selected at a time\n- Value Management: Selected value is controlled through props\n- Callback Execution: onSelect callback fires when selection changes\n- Auto-Close: Dropdown automatically closes after selection\n\nSearch Behavior\n\n- Live Filtering: Search filters options in real-time as user types\n- Label and SubLabel: Searches both main label and subLabel text\n- Case Insensitive: Search is not case sensitive\n- Group Filtering: Groups with no matching items are hidden\n\nKeyboard Navigation\n\n- Arrow Keys: Navigate through menu options\n- Enter/Space: Select the currently focused option\n- Escape: Close the dropdown menu\n- Type Ahead: Jump to options by typing first letters\n\nPositioning Logic\n\n- Auto-Positioning: Dropdown repositions to stay within viewport\n- Side Options: Can appear on top, bottom, left, or right of trigger\n- Alignment Control: Align to start, center, or end of trigger\n- Offset Adjustments: Fine-tune positioning with pixel offsets\n\nMobile Behavior\n\n- Drawer Mode: Renders as drawer on mobile devices when useDrawerOnMobile is true\n- Touch Optimization: Optimized for touch interactions\n- Responsive Sizing: Adapts to mobile screen constraints\n\nError State Management\n\n- Visual Indicators: Error styling applied to trigger and labels\n- Error Messages: Displays error message below the field\n- State Synchronization: Error state clears when valid selection is made\n\nFocus Management\n\n- Trigger Focus: Focus is managed on the trigger element\n- Menu Focus: Focus moves through menu items during navigation\n- Focus Restoration: Focus returns to trigger when menu closes\n- Focus Events: onFocus and onBlur callbacks for external focus management\n\nAccessibility\n\n- ARIA Compliance: Full ARIA support with role=\"combobox\", aria-expanded, and aria-haspopup\n- Keyboard Navigation: Complete keyboard support with arrow keys, Enter, Escape, and Tab\n- Screen Reader Support: Proper announcements for state changes and selections\n- Focus Management: Focus is trapped within dropdown and restored properly\n- Label Association: Form labels are properly associated with the select trigger\n- Group Semantics: Menu groups are announced as groups to screen readers\n- Search Accessibility: Search functionality is accessible with proper ARIA attributes\n- Error Communication: Error states are communicated through ARIA attributes\n- Required Field Support: Required fields are announced to assistive technologies\n\nEnums\n\nSelectMenuSize\n\n\n\nSelectMenuVariant\n\n\n\nSelectMenuAlignment\n\n\n\nSelectMenuSide\n\n\n\nBest Practices\n\nWhen to Use SingleSelect\n\n- Option Selection: When users need to choose one option from multiple choices\n- Form Fields: As form controls where a specific selection is required\n- Settings: For configuration options and preferences\n- Data Filtering: For filtering or sorting data based on categories\n\nDesign Guidelines\n\n- Clear Labels: Use descriptive labels that clearly explain the purpose\n- Logical Grouping: Group related options together with meaningful group labels\n- Appropriate Sizing: Choose size based on interface density and importance\n- Consistent Patterns: Use consistent selection patterns throughout your application\n\nContent Guidelines\n\n- Concise Options: Keep option labels brief but descriptive\n- Helpful SubLabels: Use subLabels to provide additional context when needed\n- Logical Ordering: Order options logically (alphabetical, by frequency, or importance)\n- Search Support: Enable search for lists with many options\n\nForm Integration\n\n- Validation: Implement proper validation with clear error messages\n- Required Fields: Mark required fields clearly with asterisks\n- Help Text: Provide contextual help when selection criteria may be unclear\n- Default Values: Consider providing sensible default selections when appropriate\n\nMobile Considerations\n\n- Drawer Mode: Use drawer mode on mobile for better touch experience\n- Touch Targets: Ensure adequate touch target sizes for mobile devices\n- Search Functionality: Enable search for long option lists on mobile\n- Performance: Consider lazy loading for very large option sets",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'enab...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Data Types",
                "level": 2,
                "id": "data-types"
            },
            {
                "title": "SelectMenuGroupType",
                "level": 3,
                "id": "selectmenugrouptype"
            },
            {
                "title": "SelectMenuItemType",
                "level": 3,
                "id": "selectmenuitemtype"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Country Selection",
                "level": 3,
                "id": "basic-country-selection"
            },
            {
                "title": "User Assignment with Rich Content",
                "level": 3,
                "id": "user-assignment-with-rich-content"
            },
            {
                "title": "Technology Stack Selection",
                "level": 3,
                "id": "technology-stack-selection"
            },
            {
                "title": "Size and Variant Comparisons",
                "level": 3,
                "id": "size-and-variant-comparisons"
            },
            {
                "title": "Form Validation States",
                "level": 3,
                "id": "form-validation-states"
            },
            {
                "title": "Custom Trigger Example",
                "level": 3,
                "id": "custom-trigger-example"
            },
            {
                "title": "Positioning and Alignment",
                "level": 3,
                "id": "positioning-and-alignment"
            },
            {
                "title": "Inline and Focus Management",
                "level": 3,
                "id": "inline-and-focus-management"
            },
            {
                "title": "Complete Project Setup Form",
                "level": 3,
                "id": "complete-project-setup-form"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Selection Behavior",
                "level": 3,
                "id": "selection-behavior"
            },
            {
                "title": "Search Behavior",
                "level": 3,
                "id": "search-behavior"
            },
            {
                "title": "Keyboard Navigation",
                "level": 3,
                "id": "keyboard-navigation"
            },
            {
                "title": "Positioning Logic",
                "level": 3,
                "id": "positioning-logic"
            },
            {
                "title": "Mobile Behavior",
                "level": 3,
                "id": "mobile-behavior"
            },
            {
                "title": "Error State Management",
                "level": 3,
                "id": "error-state-management"
            },
            {
                "title": "Focus Management",
                "level": 3,
                "id": "focus-management"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "SelectMenuSize",
                "level": 3,
                "id": "selectmenusize"
            },
            {
                "title": "SelectMenuVariant",
                "level": 3,
                "id": "selectmenuvariant"
            },
            {
                "title": "SelectMenuAlignment",
                "level": 3,
                "id": "selectmenualignment"
            },
            {
                "title": "SelectMenuSide",
                "level": 3,
                "id": "selectmenuside"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use SingleSelect",
                "level": 3,
                "id": "when-to-use-singleselect"
            },
            {
                "title": "Design Guidelines",
                "level": 3,
                "id": "design-guidelines"
            },
            {
                "title": "Content Guidelines",
                "level": 3,
                "id": "content-guidelines"
            },
            {
                "title": "Form Integration",
                "level": 3,
                "id": "form-integration"
            },
            {
                "title": "Mobile Considerations",
                "level": 3,
                "id": "mobile-considerations"
            }
        ]
    },
    "slider": {
        "title": "Slider",
        "description": "The Slider component provides an interactive range input control for selecting values within a specified range, supporting single and multi-thumb configurations with customizable styling and value formatting.",
        "path": "components/slider",
        "slug": "slider",
        "category": "components",
        "tags": [
            "slider",
            "component",
            "input",
            "range",
            "control",
            "interactive",
            "value",
            "selection"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'min',\n                hintText: 'Minimum value of the slider range',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '0' },\n        ],\n        [\n            {\n                content: 'max',\n                hintText: 'Maximum value of the slider range',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '100' },\n        ],\n        [\n            {\n                content: 'step',\n                hintText: 'Step increment for value changes',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '1' },\n        ],\n        [\n            {\n                content: 'showValueLabels',\n                hintText: 'Whether to display value labels on thumbs',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'labelPosition',\n                hintText: 'Position of value labels relative to thumbs',\n            },\n            { content: \"'top' | 'bottom' | 'inline'\", hintText: 'union type' },\n            { content: \"'top'\" },\n        ],\n        [\n            {\n                content: 'valueFormat',\n                hintText: 'Configuration for value formatting and display',\n            },\n            { content: 'SliderValueFormatConfig', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the slider is disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'orientation',\n                hintText: 'Orientation of the slider',\n            },\n            { content: \"'horizontal' | 'vertical'\", hintText: 'union type' },\n            { content: \"'horizontal'\" },\n        ],\n        [\n            {\n                content: 'className',\n                hintText: 'Additional CSS class for the slider',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nData Types\n\nSliderValueFormatConfig\n\nConfiguration object for value formatting and display:\n\n string', hintText: 'function' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Range Selection: Support for single and multi-thumb configurations for range selection\n- Value Formatting: Flexible value formatting with numbers, percentages, decimals, and custom formatters\n- Visual Variants: Primary and secondary styling variants for different contexts\n- Size Options: Three size variants (small, medium, large) for different design needs\n- Value Labels: Optional value labels with configurable positioning (top, bottom, inline)\n- Accessibility First: Full keyboard navigation, ARIA compliance, and screen reader support\n- Touch Support: Optimized for touch interactions on mobile devices\n- Built on Radix UI: Leverages Radix UI Slider for robust functionality and accessibility\n- Custom Styling: Comprehensive token system for complete visual customization\n- Orientation Support: Horizontal and vertical slider orientations\n- Precise Control: Configurable step increments and min/max ranges\n- Responsive Design: Adapts to different screen sizes and input methods\n\nEnums\n\nSliderVariant\n\n\n\nSliderSize\n\n\n\nSliderValueType\n\n\n\nUsage Examples\n\nBasic Single Value Slider\n\nSimple slider for single value selection\n\n\n\nRange Slider\n\nMulti-thumb slider for range selection\n\n\n\nPercentage Slider\n\nSlider with percentage formatting\n\n\n\nCustom Formatted Slider\n\nSlider with custom value formatting\n\n\n\nVertical Slider\n\nVertical orientation slider\n\n\n\nDisabled Slider\n\nSlider in disabled state\n\n\n\nBehavior\n\nValue Management\n\n- Controlled Mode: Use value and onValueChange props for external state control\n- Uncontrolled Mode: Use defaultValue for component-managed state\n- Multi-thumb: Array values create multiple thumbs for range selection\n- Value Constraints: Values are automatically constrained to min/max bounds\n\nInteraction Patterns\n\n- Thumb Dragging: Click and drag thumbs to adjust values\n- Track Clicking: Click on track to jump thumb to that position\n- Keyboard Navigation: Arrow keys for precise value adjustment\n- Touch Support: Optimized touch interactions for mobile devices\n\nFormatting System\n\n- Type-based: Different formatting based on SliderValueType\n- Custom Formatters: Use custom functions for complex formatting\n- Prefix/Suffix: Add text before or after values\n- Precision Control: Configurable decimal places for display\n\nAccessibility Features\n\n- Keyboard Navigation: Full keyboard support with arrow keys, Page Up/Down, Home/End\n- ARIA Labels: Proper ARIA roles and labels for screen readers\n- Focus Management: Clear focus indicators and logical tab order\n- Value Announcements: Screen reader announcements for value changes\n\nBest Practices\n\nWhen to Use Sliders\n\n- Range Selection: For selecting values within a continuous range\n- Settings Adjustment: For adjusting settings like volume, brightness, or opacity\n- Filtering: For range-based filtering in search or data views\n- Quantity Selection: For selecting quantities with clear min/max bounds\n\nSlider Design Guidelines\n\n- Clear Labels: Always provide clear labels indicating what the slider controls\n- Appropriate Ranges: Choose meaningful min/max values and step increments\n- Value Feedback: Show current values either in labels or through formatting\n- Consistent Sizing: Use consistent slider sizes throughout your application\n\nValue Formatting\n\n- Meaningful Units: Use appropriate units (%, $, °C) that users understand\n- Precision Levels: Match decimal precision to the use case (whole numbers vs decimals)\n- Custom Formatters: Use custom formatters for complex business logic\n- Visual Feedback: Consider showing formatted values in real-time\n\nAccessibility Considerations\n\n- Keyboard Support: Ensure all functionality is available via keyboard\n- Screen Readers: Test with screen readers to verify announcements\n- Color Independence: Don't rely solely on color to convey state\n- Touch Targets: Ensure thumb areas are large enough for touch interaction\n\nMobile Considerations\n\n- Touch Targets: Ensure thumbs are large enough for accurate touch interaction\n- Gesture Support: Test drag gestures on various mobile devices\n- Orientation: Consider how sliders work in both portrait and landscape modes\n- Performance: Optimize for smooth animations on lower-powered devices",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'min'...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Data Types",
                "level": 2,
                "id": "data-types"
            },
            {
                "title": "SliderValueFormatConfig",
                "level": 3,
                "id": "slidervalueformatconfig"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "SliderVariant",
                "level": 3,
                "id": "slidervariant"
            },
            {
                "title": "SliderSize",
                "level": 3,
                "id": "slidersize"
            },
            {
                "title": "SliderValueType",
                "level": 3,
                "id": "slidervaluetype"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Single Value Slider",
                "level": 3,
                "id": "basic-single-value-slider"
            },
            {
                "title": "Range Slider",
                "level": 3,
                "id": "range-slider"
            },
            {
                "title": "Percentage Slider",
                "level": 3,
                "id": "percentage-slider"
            },
            {
                "title": "Custom Formatted Slider",
                "level": 3,
                "id": "custom-formatted-slider"
            },
            {
                "title": "Vertical Slider",
                "level": 3,
                "id": "vertical-slider"
            },
            {
                "title": "Disabled Slider",
                "level": 3,
                "id": "disabled-slider"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Value Management",
                "level": 3,
                "id": "value-management"
            },
            {
                "title": "Interaction Patterns",
                "level": 3,
                "id": "interaction-patterns"
            },
            {
                "title": "Formatting System",
                "level": 3,
                "id": "formatting-system"
            },
            {
                "title": "Accessibility Features",
                "level": 3,
                "id": "accessibility-features"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use Sliders",
                "level": 3,
                "id": "when-to-use-sliders"
            },
            {
                "title": "Slider Design Guidelines",
                "level": 3,
                "id": "slider-design-guidelines"
            },
            {
                "title": "Value Formatting",
                "level": 3,
                "id": "value-formatting"
            },
            {
                "title": "Accessibility Considerations",
                "level": 3,
                "id": "accessibility-considerations"
            },
            {
                "title": "Mobile Considerations",
                "level": 3,
                "id": "mobile-considerations"
            }
        ]
    },
    "snackbar": {
        "title": "Snackbar",
        "description": "The Snackbar component displays brief, non-intrusive notifications to users about the result of an action, appearing temporarily at the bottom or top of the screen.",
        "path": "components/snackbar",
        "slug": "snackbar",
        "category": "components",
        "tags": ["snackbar", "component", "notification", "toast", "feedback"],
        "content": "Usage\n\n\n\nAPI Reference\n\nSnackbar Component\n\n\n\naddSnackbar Function\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'actionButton',\n                hintText: 'Optional action button configuration',\n            },\n            {\n                content: '{ label: string; onClick: () => void }',\n                hintText: 'object',\n            },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'duration',\n                hintText: 'Optional toast duration',\n            },\n            {\n                content: 'number',\n                hintText: 'number',\n            },\n            { content: '4000' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Four visual variants (info, success, warning, error)\n- Optional description text\n- Optional action button with custom label and handler\n- Auto-dismiss functionality\n- Manual close button\n- Accessible by default\n- Customizable styling through tokens\n- Built on Sonner toast library\n- Non-intrusive notifications\n\nUsage Examples\n\nBasic Snackbar\n\nSimple snackbar with just a header\n\n\n\nSnackbar with Description\n\nSnackbar with additional descriptive text\n\n\n\nSnackbar with Action Button\n\nSnackbar with a custom action button\n\n\n\nDifferent Variants\n\nSnackbars with different visual styles\n\n\n\nSnackbar with Close Handler\n\nSnackbar with custom close callback\n\n\n\nComplete Example\n\nFull example with all features\n\n\n\nComponent Tokens\n\nYou can style the snackbar component using the following tokens:\n\n\n\nEnums\n\nSnackbarVariant\n\n\n\nSetup Requirements\n\nTo use the Snackbar component, you need to:\n\n1. Add the Snackbar component to your app root:\n\n\n\n2. Import the addSnackbar function where needed:\n\n\n\n3. Call addSnackbar with your message options:\n\n\n\nThe snackbar will automatically appear and dismiss itself after a few seconds, or when the user clicks the close button.",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\nSnackbar Component\n\n\n\naddSnackbar Function\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Snackbar Component",
                "level": 3,
                "id": "snackbar-component"
            },
            {
                "title": "addSnackbar Function",
                "level": 3,
                "id": "addsnackbar-function"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Snackbar",
                "level": 3,
                "id": "basic-snackbar"
            },
            {
                "title": "Snackbar with Description",
                "level": 3,
                "id": "snackbar-with-description"
            },
            {
                "title": "Snackbar with Action Button",
                "level": 3,
                "id": "snackbar-with-action-button"
            },
            {
                "title": "Different Variants",
                "level": 3,
                "id": "different-variants"
            },
            {
                "title": "Snackbar with Close Handler",
                "level": 3,
                "id": "snackbar-with-close-handler"
            },
            {
                "title": "Complete Example",
                "level": 3,
                "id": "complete-example"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "SnackbarVariant",
                "level": 3,
                "id": "snackbarvariant"
            },
            {
                "title": "Setup Requirements",
                "level": 2,
                "id": "setup-requirements"
            }
        ]
    },
    "split-tag": {
        "title": "Split Tag",
        "description": "The SplitTag component is a specialized tag variant that can be split into multiple sections, useful for displaying complex labels or status indicators.",
        "path": "components/split-tag",
        "slug": "split-tag",
        "category": "components",
        "tags": ["split-tag", "component", "label"],
        "content": "Usage\n\n\n\nAPI Reference\n\n\n\nTagConfig Properties\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n    ]}\n    isHoverable={true}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Split design with primary and secondary sections\n- Multiple color schemes (neutral, primary, success, error, warning, purple)\n- Three visual variants (no fill, attentive, subtle)\n- Four sizes (xs, sm, md, lg)\n- Two shapes (rounded, squarical)\n- Optional leading and trailing slots\n- Click handlers for interactive tags\n- Seamless border radius handling for split sections\n\nUsage Examples\n\nBasic Split Tag\n\nSimple split tag with primary and secondary sections",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n\n\nTagConfig Properties\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n    ]}\n    isHoverable={true}...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "TagConfig Properties",
                "level": 3,
                "id": "tagconfig-properties"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Split Tag",
                "level": 3,
                "id": "basic-split-tag"
            }
        ]
    },
    "stat-card": {
        "title": "Stat Card",
        "description": "The StatCard component displays key metrics and statistics in a card format, with support for icons, trends, and various styling options for dashboard and analytics interfaces.",
        "path": "components/stat-card",
        "slug": "stat-card",
        "category": "components",
        "tags": ["stat-card", "component", "metrics"],
        "content": "Usage\n\n\n\nAPI Reference\n\n\n\nStatCardChange API Reference\n\n\n\nChartDataPoint API Reference\n\n\n\nFeatures\n\n- Four visual variants: Line chart, Bar chart, Progress bar, and Number only\n- Built-in chart rendering with Recharts integration\n- Change indicators with increase/decrease arrows and percentages\n- Icon support for title and action areas\n- Help tooltip functionality\n- Responsive design with customizable dimensions\n- Progress bar with pattern background\n- Interactive tooltips for chart data\n- Automatic color theming based on trend direction\n- Flexible layout with header and chart sections\n\nUsage Examples\n\nBasic Number Stat Card\n\nSimple stat card showing only a number value\n\n\n\nLine Chart Stat Card\n\nStat card with line chart visualization\n\n\n\nBar Chart Stat Card\n\nStat card with bar chart visualization\n\n\n\nProgress Bar Stat Card\n\nStat card with progress bar showing completion percentage\n\n\n\nStat Card with Help Tooltip\n\nStat card with help icon and tooltip\n\n\n\nStat Card with Action Icon\n\nStat card with action icon in the header\n\n\n\nComponent Tokens\n\nYou can style the stat card component using the following tokens:",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n\n\nStatCardChange API Reference\n\n\n\nChartDataPoint API Reference\n\n\n\nFeatures\n\n- Four visual variants: Line chart, Bar chart, Pro...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "StatCardChange API Reference",
                "level": 2,
                "id": "statcardchange-api-reference"
            },
            {
                "title": "ChartDataPoint API Reference",
                "level": 2,
                "id": "chartdatapoint-api-reference"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Number Stat Card",
                "level": 3,
                "id": "basic-number-stat-card"
            },
            {
                "title": "Line Chart Stat Card",
                "level": 3,
                "id": "line-chart-stat-card"
            },
            {
                "title": "Bar Chart Stat Card",
                "level": 3,
                "id": "bar-chart-stat-card"
            },
            {
                "title": "Progress Bar Stat Card",
                "level": 3,
                "id": "progress-bar-stat-card"
            },
            {
                "title": "Stat Card with Help Tooltip",
                "level": 3,
                "id": "stat-card-with-help-tooltip"
            },
            {
                "title": "Stat Card with Action Icon",
                "level": 3,
                "id": "stat-card-with-action-icon"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            }
        ]
    },
    "switch": {
        "title": "Switch",
        "description": "The Switch component provides a toggle control for enabling or disabling features, with smooth animations and clear visual feedback for binary state changes.",
        "path": "components/switch",
        "slug": "switch",
        "category": "components",
        "tags": ["switch", "component", "toggle", "form", "input"],
        "content": "Usage\n\n\n\nAPI Reference\n\nSwitch Props\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the switch is disabled and non-interactive',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'required',\n                hintText: 'Whether the switch is required (shows asterisk)',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'error',\n                hintText: 'Whether the switch is in an error state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            { content: 'size', hintText: 'The size variant of the switch' },\n            { content: 'SwitchSize', hintText: 'enum' },\n            { content: 'SwitchSize.MEDIUM' },\n        ],\n        [\n            { content: 'label', hintText: 'The label text for the switch' },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'subtext',\n                hintText: 'Optional descriptive text displayed below the label',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'slot',\n                hintText: 'Optional element to display alongside the label',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'name',\n                hintText: 'The name attribute for form grouping',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'value',\n                hintText: 'The value associated with the switch',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nSwitchGroup Props\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Two size variants (small, medium)\n- Switch group management with multiple selections\n- Optional subtext for additional context\n- Optional slot for badges, icons, or other elements\n- Required field indicator (asterisk)\n- Error state styling\n- Disabled state support\n- Controlled and uncontrolled modes\n- Smooth animations and transitions\n- Accessible by default\n- Built on native HTML button elements\n- Customizable styling through tokens\n\nUsage Examples\n\nBasic Switch\n\nSimple switch with label\n\n\n\nSwitch with Subtext\n\nSwitch with additional descriptive text\n\n\n\nSwitch with Slot\n\nSwitch with additional elements (badges, icons, etc.)\n\n\n\nDifferent Sizes\n\nSwitches with different size variants\n\n\n\nSwitch States\n\nSwitches in various states\n\n\n\nSwitch Group\n\nGroup of switches with multiple selections\n\n\n\nControlled vs Uncontrolled\n\nSwitches with different state management approaches\n\n\n\nIndividual Switches\n\nSwitches used outside of a group\n\n\n\nComplex Form Example\n\nComplete form with switch group\n\n\n\nDisabled Switch Group\n\nSwitch group with all options disabled\n\n\n\nSwitch with Different Content\n\nSwitches with various content types\n\n\n\nComponent Tokens\n\nYou can style the switch component using the following tokens:\n\n\n\nEnums\n\nSwitchSize\n\n\n\nType Definitions\n\nSwitchState\n\n\n\nSwitchIndicatorState\n\n\n\nAccessibility Features\n\nThe Switch component includes several accessibility features:\n\n- Proper ARIA attributes: Uses role=\"switch\" and aria-checked for screen readers\n- Keyboard navigation: Supports keyboard interaction (Space, Enter, Arrow keys)\n- Screen reader support: Proper labeling and state announcements\n- Focus management: Clear focus indicators and keyboard focus\n- Required field indication: Visual and programmatic indication of required fields\n- Error state communication: Clear error state communication to assistive technologies\n- Group semantics: Proper switch group semantics for screen readers\n- Smooth animations: Provides visual feedback for state changes\n- High contrast support: Maintains accessibility in high contrast modes",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\nSwitch Props\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Switch Props",
                "level": 3,
                "id": "switch-props"
            },
            {
                "title": "SwitchGroup Props",
                "level": 3,
                "id": "switchgroup-props"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Switch",
                "level": 3,
                "id": "basic-switch"
            },
            {
                "title": "Switch with Subtext",
                "level": 3,
                "id": "switch-with-subtext"
            },
            {
                "title": "Switch with Slot",
                "level": 3,
                "id": "switch-with-slot"
            },
            {
                "title": "Different Sizes",
                "level": 3,
                "id": "different-sizes"
            },
            {
                "title": "Switch States",
                "level": 3,
                "id": "switch-states"
            },
            {
                "title": "Switch Group",
                "level": 3,
                "id": "switch-group"
            },
            {
                "title": "Controlled vs Uncontrolled",
                "level": 3,
                "id": "controlled-vs-uncontrolled"
            },
            {
                "title": "Individual Switches",
                "level": 3,
                "id": "individual-switches"
            },
            {
                "title": "Complex Form Example",
                "level": 3,
                "id": "complex-form-example"
            },
            {
                "title": "Disabled Switch Group",
                "level": 3,
                "id": "disabled-switch-group"
            },
            {
                "title": "Switch with Different Content",
                "level": 3,
                "id": "switch-with-different-content"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "SwitchSize",
                "level": 3,
                "id": "switchsize"
            },
            {
                "title": "Type Definitions",
                "level": 2,
                "id": "type-definitions"
            },
            {
                "title": "SwitchState",
                "level": 3,
                "id": "switchstate"
            },
            {
                "title": "SwitchIndicatorState",
                "level": 3,
                "id": "switchindicatorstate"
            },
            {
                "title": "Accessibility Features",
                "level": 2,
                "id": "accessibility-features"
            }
        ]
    },
    "tabs": {
        "title": "Tabs",
        "description": "The Tabs component provides a way to organize content into multiple sections that can be switched between, with support for different styles and configurations.",
        "path": "components/tabs",
        "slug": "tabs",
        "category": "components",
        "tags": ["tabs", "component", "navigation"],
        "content": "Usage\n\n\n\nAPI Reference\n\nTabs Props\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'variant',\n                hintText: 'The visual style variant of the tabs',\n            },\n            { content: 'TabsVariant', hintText: 'enum' },\n            { content: 'TabsVariant.UNDERLINE' },\n        ],\n        [\n            { content: 'size', hintText: 'The size of the tabs' },\n            { content: 'TabsSize', hintText: 'enum' },\n            { content: 'TabsSize.MD' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nTabsList Props\n\n\n\nTabsTrigger Props\n\n\n\nTabsContent Props\n\n\n\nFeatures\n\n- Multiple visual variants (underline, boxed, floating)\n- Two sizes (medium, large)\n- Support for icons in tab triggers\n- Expandable tabs to fill container width\n- Fit-content option for compact layouts\n- Controlled and uncontrolled modes\n- Accessible keyboard navigation\n- Smooth transitions and hover states\n\nUsage Examples\n\nBasic Tabs\n\nSimple tabs with underline variant\n\n\n\nBoxed Tabs\n\nTabs with boxed variant for a more prominent appearance\n\n\n\nTabs with Icons\n\nTabs with leading and trailing icons\n\n\n\nLarge Tabs\n\nTabs with large size for better touch targets\n\n\n\nExpanded Tabs\n\nTabs that expand to fill the container width\n\n\n\nControlled Tabs\n\nTabs with controlled state management\n\n\n\nComponent Tokens\n\nYou can style the tabs component using the following tokens:",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\nTabs Props\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                co...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Tabs Props",
                "level": 3,
                "id": "tabs-props"
            },
            {
                "title": "TabsList Props",
                "level": 3,
                "id": "tabslist-props"
            },
            {
                "title": "TabsTrigger Props",
                "level": 3,
                "id": "tabstrigger-props"
            },
            {
                "title": "TabsContent Props",
                "level": 3,
                "id": "tabscontent-props"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Tabs",
                "level": 3,
                "id": "basic-tabs"
            },
            {
                "title": "Boxed Tabs",
                "level": 3,
                "id": "boxed-tabs"
            },
            {
                "title": "Tabs with Icons",
                "level": 3,
                "id": "tabs-with-icons"
            },
            {
                "title": "Large Tabs",
                "level": 3,
                "id": "large-tabs"
            },
            {
                "title": "Expanded Tabs",
                "level": 3,
                "id": "expanded-tabs"
            },
            {
                "title": "Controlled Tabs",
                "level": 3,
                "id": "controlled-tabs"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            }
        ]
    },
    "tag": {
        "title": "Tag",
        "description": "The Tag component is a versatile UI element used for displaying labels, categories, and status indicators with multiple variants, colors, and interactive options.",
        "path": "components/tag",
        "slug": "tag",
        "category": "components",
        "tags": ["tag", "component", "label"],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'splitTagPosition',\n                hintText: 'Position for split tag styling',\n            },\n            { content: \"'left' | 'right'\", hintText: 'string union' },\n            { content: '' },\n        ],\n    ]}\n    isHoverable={true}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Multiple tag variants (noFill, attentive, subtle)\n- Six color themes (neutral, primary, success, error, warning, purple)\n- Four sizes (xs, sm, md, lg)\n- Two shape options (rounded, squarical)\n- Optional click functionality\n- Left and right slot support for icons or additional content\n- Split tag positioning for special styling\n- Responsive design with proper spacing\n- Accessible keyboard navigation\n\nUsage Examples\n\nBasic Tag\n\nSimple tag with text content\n\n\n\nSuccess Tag\n\nTag with success styling\n\n\n\nInteractive Tag\n\nClickable tag with custom handler\n\n\n\nTag with Icon\n\nTag with left slot icon\n\n\n\nWarning Tag\n\nTag with warning styling and right slot\n\n\n\nLarge Rounded Tag\n\nTag with large size and rounded shape\n\n\n\nNo Fill Tag\n\nTag with no background fill\n\n\n\nSplit Tag\n\nTag with split positioning for special styling",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'spli...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Tag",
                "level": 3,
                "id": "basic-tag"
            },
            {
                "title": "Success Tag",
                "level": 3,
                "id": "success-tag"
            },
            {
                "title": "Interactive Tag",
                "level": 3,
                "id": "interactive-tag"
            },
            {
                "title": "Tag with Icon",
                "level": 3,
                "id": "tag-with-icon"
            },
            {
                "title": "Warning Tag",
                "level": 3,
                "id": "warning-tag"
            },
            {
                "title": "Large Rounded Tag",
                "level": 3,
                "id": "large-rounded-tag"
            },
            {
                "title": "No Fill Tag",
                "level": 3,
                "id": "no-fill-tag"
            },
            {
                "title": "Split Tag",
                "level": 3,
                "id": "split-tag"
            }
        ]
    },
    "textarea": {
        "title": "TextArea",
        "description": "The TextArea component provides a multi-line text input field with labels, validation, error states, and responsive floating label behavior. It supports customizable rows, resize options, and comprehensive form integration.",
        "path": "components/textarea",
        "slug": "textarea",
        "category": "components",
        "tags": [
            "textarea",
            "component",
            "input",
            "multiline",
            "form",
            "textfield",
            "description",
            "comment",
            "message",
            "content"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the textarea is disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'autoFocus',\n                hintText: 'Whether to auto-focus the textarea on mount',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'onFocus',\n                hintText: 'Callback when textarea receives focus',\n            },\n            {\n                content: '(e: React.FocusEvent) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onBlur',\n                hintText: 'Callback when textarea loses focus',\n            },\n            {\n                content: '(e: React.FocusEvent) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'rows',\n                hintText: 'Number of visible text lines',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '3' },\n        ],\n        [\n            {\n                content: 'cols',\n                hintText: 'Number of visible character columns',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'label',\n                hintText: 'Primary label for the textarea',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'sublabel',\n                hintText: 'Secondary label or description',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'hintText',\n                hintText: 'Helper text displayed below the textarea',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'helpIconHintText',\n                hintText: 'Tooltip text for the help icon',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'required',\n                hintText: 'Whether the textarea is required',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'error',\n                hintText: 'Whether the textarea is in error state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'errorMessage',\n                hintText: 'Error message to display when in error state',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'resize',\n                hintText: 'Resize behavior for the textarea',\n            },\n            {\n                content:\n                    \"'none' | 'both' | 'horizontal' | 'vertical' | 'block' | 'inline'\",\n                hintText: 'string',\n            },\n            { content: \"'none'\" },\n        ],\n        [\n            {\n                content: 'wrap',\n                hintText: 'Text wrapping behavior',\n            },\n            { content: \"CSSObject['whiteSpace']\", hintText: 'string' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nComponent Tokens\n\nYou can style the TextArea component using the following tokens:\n\n\n\nThe component uses responsive tokens that adapt to different breakpoints with floating labels on small screens and consistent styling across all states.\n\nFeatures\n\n- Multi-line Input: Configurable rows and columns for text area sizing\n- Responsive Labels: Floating labels on small screens, standard labels on larger screens\n- Resize Control: Customizable resize behavior (none, vertical, horizontal, both)\n- Error States: Visual error feedback with custom error messages\n- Form Integration: Full form library support with validation\n- Accessibility: Screen reader support and proper focus management\n- Helper Text: Support for hint text and help icon tooltips\n- Character Counting: Can be extended with character count functionality\n- Auto-Focus: Optional auto-focus on component mount\n- Disabled State: Complete disabled state styling and behavior\n\nUsage Examples\n\nBasic Description Field\n\nSimple textarea for user descriptions:\n\n\n\nComment Box\n\nTextarea for user comments with validation:\n\n\n\nFeedback Form\n\nLarge textarea for detailed feedback:\n\n\n\nMessage Composer\n\nResizable textarea for message composition:\n\n\n\nCode Snippet Input\n\nTextarea for code or technical content:\n\n\n\nArticle Content\n\nLarge textarea for article or blog content:\n\n\n\nSupport Ticket\n\nTextarea for customer support requests:\n\n\n\nBehavior\n\nResponsive Labels\n\n- Large Screens: Labels appear above the textarea with sublabels\n- Small Screens: Labels float inside the textarea and scale when focused or filled\n- Focus Animation: Smooth transition for floating label positioning\n- Label Scaling: Floating labels scale down when active\n\nResize Functionality\n\n- None: No resize handle, fixed size\n- Vertical: Only vertical resizing allowed\n- Horizontal: Only horizontal resizing allowed\n- Both: Both directions resizable\n- Block/Inline: CSS logical properties for resize direction\n\nFocus and Validation\n\n- Focus States: Visual focus indicators with border and shadow changes\n- Error States: Red borders and error message display\n- Validation: Real-time validation support with error feedback\n- Required Fields: Visual indicators for required fields\n\nPadding Adjustments\n\n- Dynamic Padding: Adjusts top/bottom padding on small screens for floating labels\n- Consistent Spacing: Maintains consistent internal spacing across breakpoints\n- Content Alignment: Proper text alignment with floating label positioning\n\nBest Practices\n\nWhen to Use TextArea\n\n- Long-form Content: Comments, descriptions, articles, messages\n- Multi-line Input: Address fields, feedback forms, code snippets\n- Flexible Content: When content length is unpredictable\n- Rich Text Needs: Before implementing rich text editors\n- Form Fields: Any form requiring more than a single line of text\n\nSizing Guidelines\n\n- 3-4 Rows: Short descriptions, comments, brief feedback\n- 5-6 Rows: Medium content like detailed descriptions, messages\n- 8+ Rows: Long-form content like articles, documentation\n- Resize Options: Allow vertical resize for user flexibility\n- Character Limits: Implement and display character count when needed\n\nAccessibility Considerations\n\n- Label Association: Ensure proper label-textarea association\n- Error Announcements: Make error states accessible to screen readers\n- Focus Management: Maintain clear focus indicators\n- Keyboard Navigation: Support all standard keyboard interactions\n- Help Text: Provide clear instructions and help text\n\nForm Integration\n\n- Controlled Components: Always use controlled components with proper state\n- Validation: Integrate with form validation libraries\n- Error Handling: Provide specific, actionable error messages\n- Auto-save: Consider implementing draft saving for long forms\n- Character Counting: Show character/word count for length-limited fields\n\nPerformance Optimization\n\n- Debouncing: Debounce onChange for expensive operations\n- Auto-save: Implement debounced auto-save for long content\n- Memory Management: Clean up event listeners and timers\n- State Management: Use appropriate state management patterns\n- Memoization: Consider memoizing for complex validation logic\n\nUser Experience\n\n- Clear Placeholders: Use descriptive placeholder text\n- Progressive Enhancement: Start with basic functionality\n- Auto-resize: Consider auto-expanding textarea based on content\n- Save Indicators: Show save status for important content\n- Format Preservation: Maintain formatting when appropriate\n\nContent Guidelines\n\n- Character Limits: Set reasonable limits and communicate them clearly\n- Validation Messages: Provide helpful, specific error messages\n- Formatting Support: Consider markdown or rich text for complex content\n- Preview Options: Offer preview functionality for formatted content\n- Content Recovery: Implement draft recovery for important forms\n\nSecurity Considerations\n\n- Input Sanitization: Sanitize user input on the backend\n- XSS Prevention: Prevent cross-site scripting attacks\n- Content Validation: Validate content length and format\n- Rate Limiting: Implement rate limiting for form submissions\n- CSRF Protection: Use CSRF tokens for form submissions",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Description Field",
                "level": 3,
                "id": "basic-description-field"
            },
            {
                "title": "Comment Box",
                "level": 3,
                "id": "comment-box"
            },
            {
                "title": "Feedback Form",
                "level": 3,
                "id": "feedback-form"
            },
            {
                "title": "Message Composer",
                "level": 3,
                "id": "message-composer"
            },
            {
                "title": "Code Snippet Input",
                "level": 3,
                "id": "code-snippet-input"
            },
            {
                "title": "Article Content",
                "level": 3,
                "id": "article-content"
            },
            {
                "title": "Support Ticket",
                "level": 3,
                "id": "support-ticket"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Responsive Labels",
                "level": 3,
                "id": "responsive-labels"
            },
            {
                "title": "Resize Functionality",
                "level": 3,
                "id": "resize-functionality"
            },
            {
                "title": "Focus and Validation",
                "level": 3,
                "id": "focus-and-validation"
            },
            {
                "title": "Padding Adjustments",
                "level": 3,
                "id": "padding-adjustments"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use TextArea",
                "level": 3,
                "id": "when-to-use-textarea"
            },
            {
                "title": "Sizing Guidelines",
                "level": 3,
                "id": "sizing-guidelines"
            },
            {
                "title": "Accessibility Considerations",
                "level": 3,
                "id": "accessibility-considerations"
            },
            {
                "title": "Form Integration",
                "level": 3,
                "id": "form-integration"
            },
            {
                "title": "Performance Optimization",
                "level": 3,
                "id": "performance-optimization"
            },
            {
                "title": "User Experience",
                "level": 3,
                "id": "user-experience"
            },
            {
                "title": "Content Guidelines",
                "level": 3,
                "id": "content-guidelines"
            },
            {
                "title": "Security Considerations",
                "level": 3,
                "id": "security-considerations"
            }
        ]
    },
    "textinput": {
        "title": "TextInput",
        "description": "The TextInput component provides a flexible and accessible text input field with support for labels, hints, error states, slots, and responsive floating labels on mobile devices.",
        "path": "components/textinput",
        "slug": "textinput",
        "category": "components",
        "tags": [
            "textinput",
            "component",
            "input",
            "form",
            "text",
            "field",
            "validation",
            "responsive"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n) => void',\n                hintText: 'function',\n            },\n            { content: 'Required' },\n        ],\n        [\n            {\n                content: 'label',\n                hintText: 'Primary label for the input field',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'sublabel',\n                hintText: 'Secondary label or description',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'placeholder',\n                hintText: 'Placeholder text shown when input is empty',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '\"Enter\"' },\n        ],\n        [\n            {\n                content: 'size',\n                hintText: 'Size variant of the input field',\n            },\n            { content: 'TextInputSize', hintText: 'enum' },\n            { content: 'MEDIUM' },\n        ],\n        [\n            {\n                content: 'error',\n                hintText: 'Whether the input is in error state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'errorMessage',\n                hintText: 'Error message to display when in error state',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'hintText',\n                hintText: 'Helper text displayed below the input',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'helpIconHintText',\n                hintText: 'Tooltip text for the help icon',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the input is disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'required',\n                hintText: 'Whether the input is required',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'leftSlot',\n                hintText: 'Content to display on the left side of input',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'rightSlot',\n                hintText: 'Content to display on the right side of input',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'name',\n                hintText: 'Name attribute for the input field',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onFocus',\n                hintText: 'Callback when input receives focus',\n            },\n            {\n                content: '(e: FocusEvent) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onBlur',\n                hintText: 'Callback when input loses focus',\n            },\n            {\n                content: '(e: FocusEvent) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nEnums\n\nTextInputSize\n\nSize variants for the text input:\n\n\n\nTextInputState\n\nInternal state variants (for styling):\n\n\n\nComponent Tokens\n\nYou can style the TextInput component using the following tokens:\n\n\n\nThe component uses responsive tokens that adapt to different breakpoints:\n\n- sm: Mobile-optimized with floating label behavior for large size\n- lg: Desktop layout with consistent behavior across all sizes\n\nFeatures\n\n- Responsive Design: Adaptive layout with floating labels on mobile for large size\n- Flexible Slots: Left and right slots for icons, buttons, or custom content\n- Validation States: Built-in error styling with custom error messages\n- Accessibility: Full keyboard navigation and screen reader support\n- Form Integration: Native HTML input attributes and form compatibility\n- Visual States: Hover, focus, and disabled states with smooth transitions\n- Customizable Sizing: Three size variants for different layout needs\n- Helper Text: Support for hints, help icons, and error messages\n- Dynamic Padding: Automatic padding adjustment based on slot content\n\nUsage Examples\n\nBasic Input\n\nSimple text input with label and hint text:\n\n\n\nInput with Error State\n\nText input showing validation error:\n\n\n\nInput with Slots\n\nText input with icon slots for enhanced UX:\n\n\n\nBehavior\n\nResponsive Floating Labels\n\n- Large Size on Mobile: Automatically shows floating label animation\n- Label Positioning: Smooth transition between placeholder and floating states\n- Touch Optimization: Enhanced mobile experience with larger touch targets\n\nFocus Management\n\n- Focus States: Visual feedback with outline and shadow changes\n- Keyboard Navigation: Full tab navigation support\n- Focus Callbacks: Custom onFocus and onBlur handlers\n\nDynamic Layout\n\n- Slot Integration: Automatic padding adjustment for left/right content\n- Width Calculation: Dynamic measurement of slot content for precise spacing\n- Responsive Tokens: Breakpoint-aware styling and spacing\n\nValidation Integration\n\n- Error Styling: Automatic error state styling when error prop is true\n- Message Display: Error messages shown below input with proper styling\n- State Consistency: Visual state matches validation state throughout interaction\n\nBest Practices\n\nWhen to Use TextInput\n\n- Form Fields: Primary choice for text-based form inputs\n- Search Interfaces: With appropriate left slot icons\n- Data Entry: For capturing user information and content\n- Settings Panels: For configurable text values\n\nLabel and Hint Guidelines\n\n- Clear Labels: Use descriptive labels that explain the expected input\n- Helpful Hints: Provide context or format examples in hint text\n- Error Messages: Write specific, actionable error messages\n- Required Indication: Use required prop and clear visual indicators\n\nSize Selection\n\n- Small: Use in compact forms or secondary inputs\n- Medium: Default choice for most form scenarios\n- Large: Use for primary inputs or mobile-first experiences\n\nSlot Usage\n\n- Left Slots: Icons, currency symbols, or input prefixes\n- Right Slots: Action buttons, validation icons, or suffixes\n- Interactive Content: Ensure slot content has proper focus management\n- Visual Balance: Keep slot content appropriately sized\n\nAccessibility Considerations\n\n- Label Association: Always provide labels for screen readers\n- Error Announcement: Ensure error messages are announced to screen readers\n- Focus Indicators: Maintain visible focus indicators for keyboard users\n- Form Structure: Use proper form markup and validation patterns\n\nForm Integration\n\n- Controlled Components: Always use controlled inputs with value and onChange\n- Validation Timing: Validate on blur for better user experience\n- Form Libraries: Compatible with React Hook Form, Formik, and other libraries\n- Submit Handling: Integrate with form submission and validation flows",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n) => void',\n                hintText: 'function',\n            },\n            { content: 'Required' },\n        ],\n        [...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "TextInputSize",
                "level": 3,
                "id": "textinputsize"
            },
            {
                "title": "TextInputState",
                "level": 3,
                "id": "textinputstate"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Input",
                "level": 3,
                "id": "basic-input"
            },
            {
                "title": "Input with Error State",
                "level": 3,
                "id": "input-with-error-state"
            },
            {
                "title": "Input with Slots",
                "level": 3,
                "id": "input-with-slots"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Responsive Floating Labels",
                "level": 3,
                "id": "responsive-floating-labels"
            },
            {
                "title": "Focus Management",
                "level": 3,
                "id": "focus-management"
            },
            {
                "title": "Dynamic Layout",
                "level": 3,
                "id": "dynamic-layout"
            },
            {
                "title": "Validation Integration",
                "level": 3,
                "id": "validation-integration"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use TextInput",
                "level": 3,
                "id": "when-to-use-textinput"
            },
            {
                "title": "Label and Hint Guidelines",
                "level": 3,
                "id": "label-and-hint-guidelines"
            },
            {
                "title": "Size Selection",
                "level": 3,
                "id": "size-selection"
            },
            {
                "title": "Slot Usage",
                "level": 3,
                "id": "slot-usage"
            },
            {
                "title": "Accessibility Considerations",
                "level": 3,
                "id": "accessibility-considerations"
            },
            {
                "title": "Form Integration",
                "level": 3,
                "id": "form-integration"
            }
        ]
    },
    "tooltip": {
        "title": "Tooltip",
        "description": "The Tooltip component displays additional information when users hover over or focus on elements, providing contextual help and explanations without cluttering the interface.",
        "path": "components/tooltip",
        "slug": "tooltip",
        "category": "components",
        "tags": ["tooltip", "component", "help", "hover", "contextual"],
        "content": "Usage\n\n\n\nAPI Reference\n\n\n\nFeatures\n\n- Multiple positioning options (top, right, bottom, left)\n- Flexible alignment (start, center, end)\n- Two size variants (small, large)\n- Optional arrow indicator\n- Icon slot support with left/right positioning\n- Configurable delay and offset\n- Controlled and uncontrolled modes\n- Accessible by default\n- Customizable styling through tokens\n\nUsage Examples\n\nBasic Tooltip\n\nSimple tooltip with text content\n\n\n\nTooltip with Different Positions\n\nTooltips can be positioned on different sides of the trigger element\n\n\n\nTooltip with Icon Slot\n\nTooltip with an icon displayed alongside the content\n\n\n\nLarge Tooltip\n\nTooltip with larger size for more content\n\n\n\nTooltip without Arrow\n\nTooltip without the pointing arrow\n\n\n\nControlled Tooltip\n\nTooltip with controlled visibility state\n\n\n\nComponent Tokens\n\nYou can style the tooltip component using the following tokens:\n\n\n\nEnums\n\nTooltipSide\n\n\n\nTooltipAlign\n\n\n\nTooltipSize\n\n\n\nTooltipSlotDirection",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n\n\nFeatures\n\n- Multiple positioning options (top, right, bottom, left)\n- Flexible alignment (start, center, end)\n- Two size var...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Tooltip",
                "level": 3,
                "id": "basic-tooltip"
            },
            {
                "title": "Tooltip with Different Positions",
                "level": 3,
                "id": "tooltip-with-different-positions"
            },
            {
                "title": "Tooltip with Icon Slot",
                "level": 3,
                "id": "tooltip-with-icon-slot"
            },
            {
                "title": "Large Tooltip",
                "level": 3,
                "id": "large-tooltip"
            },
            {
                "title": "Tooltip without Arrow",
                "level": 3,
                "id": "tooltip-without-arrow"
            },
            {
                "title": "Controlled Tooltip",
                "level": 3,
                "id": "controlled-tooltip"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "TooltipSide",
                "level": 3,
                "id": "tooltipside"
            },
            {
                "title": "TooltipAlign",
                "level": 3,
                "id": "tooltipalign"
            },
            {
                "title": "TooltipSize",
                "level": 3,
                "id": "tooltipsize"
            },
            {
                "title": "TooltipSlotDirection",
                "level": 3,
                "id": "tooltipslotdirection"
            }
        ]
    },
    "unitinput": {
        "title": "UnitInput",
        "description": "The UnitInput component provides a specialized numeric input field with integrated unit display, configurable positioning, multiple sizes, and support for left/right slots. Perfect for measurements, quantities, and unit-based data entry.",
        "path": "components/unitinput",
        "slug": "unitinput",
        "category": "components",
        "tags": [
            "unitinput",
            "component",
            "input",
            "numeric",
            "unit",
            "measurement",
            "quantity",
            "form",
            "number",
            "weight"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'unit',\n                hintText: 'Unit text to display (e.g., \"kg\", \"cm\", \"$\")',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'unitPosition',\n                hintText: 'Position of the unit display',\n            },\n            {\n                content: 'UnitPosition.LEFT | UnitPosition.RIGHT',\n                hintText: 'enum',\n            },\n            { content: 'UnitPosition.RIGHT' },\n        ],\n        [\n            {\n                content: 'size',\n                hintText: 'Size variant of the input',\n            },\n            {\n                content: 'UnitInputSize.MEDIUM | UnitInputSize.LARGE',\n                hintText: 'enum',\n            },\n            { content: 'UnitInputSize.MEDIUM' },\n        ],\n        [\n            {\n                content: 'min',\n                hintText: 'Minimum allowed value',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'max',\n                hintText: 'Maximum allowed value',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'step',\n                hintText: 'Step interval for numeric input',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'error',\n                hintText: 'Whether the input is in error state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'errorMessage',\n                hintText: 'Error message to display when in error state',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'required',\n                hintText: 'Whether the input is required',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the input is disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'label',\n                hintText: 'Primary label for the input',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '\"Number Input\"' },\n        ],\n        [\n            {\n                content: 'sublabel',\n                hintText: 'Secondary label or description',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'placeholder',\n                hintText: 'Placeholder text for the input',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'hintText',\n                hintText: 'Helper text displayed below the input',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'helpIconHintText',\n                hintText: 'Tooltip text for the help icon',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'leftSlot',\n                hintText: 'React element to display on the left side',\n            },\n            { content: 'React.ReactNode', hintText: 'ReactNode' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'rightSlot',\n                hintText: 'React element to display on the right side',\n            },\n            { content: 'React.ReactNode', hintText: 'ReactNode' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'name',\n                hintText: 'Name attribute for the input element',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onFocus',\n                hintText: 'Callback when input receives focus',\n            },\n            {\n                content: '(e: React.FocusEvent) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onBlur',\n                hintText: 'Callback when input loses focus',\n            },\n            {\n                content: '(e: React.FocusEvent) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nComponent Tokens\n\nYou can style the UnitInput component using the following tokens:\n\n\n\nThe component uses responsive tokens that adapt to different breakpoints with size-specific padding and consistent styling across all states.\n\nFeatures\n\n- Integrated Unit Display: Built-in unit label with configurable positioning\n- Multiple Sizes: Medium and large size variants with responsive behavior\n- Numeric Input: Number input type with min, max, and step validation\n- Slot Support: Configurable left and right slots for icons or additional elements\n- Responsive Labels: Floating labels on small screens for large size variant\n- Error States: Visual error feedback with custom error messages\n- Form Integration: Full form library support with validation\n- Accessibility: Screen reader support and proper focus management\n- Dynamic Padding: Automatically adjusts padding based on unit and slot positioning\n- Default Icon: Includes Weight icon as default right slot\n\nUsage Examples\n\nWeight Input\n\nBasic weight input with right-positioned unit:\n\n\n\nCurrency Input\n\nPrice input with left-positioned currency unit:\n\n\n\nDistance Measurement\n\nDistance input with validation and error handling:\n\n\n\nTemperature Input\n\nTemperature measurement with custom icon:\n\n\n\nDimension Input\n\nHeight measurement with large size:\n\n\n\nSpeed Input\n\nSpeed measurement with custom validation:\n\n\n\nVolume Input\n\nVolume measurement with percentage display:\n\n\n\nBehavior\n\nUnit Positioning\n\n- Right Position: Unit appears on the right side with gray background\n- Left Position: Unit appears on the left side with gray background\n- Border Integration: Unit has matching border styling with the input\n- Dynamic Width: Unit container adjusts width based on content length\n\nSize Variants\n\n- Medium Size: Standard padding and font size for most use cases\n- Large Size: Increased padding with floating labels on small screens\n- Responsive Behavior: Large size shows floating labels on mobile devices\n- Consistent Spacing: Maintains proper spacing regardless of size\n\nSlot Management\n\n- Left Slot: Positioned between left edge and input, adjusted for unit position\n- Right Slot: Positioned between input and right edge, includes default Weight icon\n- Dynamic Padding: Input padding automatically adjusts based on slot widths\n- Icon Integration: Slots integrate seamlessly with unit positioning\n\nFocus and Validation\n\n- Focus States: Visual focus indicators with border and shadow changes\n- Numeric Validation: Enforces numeric input with min, max, and step constraints\n- Error Feedback: Red borders and error message display for invalid states\n- Required Fields: Visual indicators for required form fields\n\nBest Practices\n\nWhen to Use UnitInput\n\n- Measurements: Weight, height, distance, temperature, speed\n- Quantities: Inventory counts, limits, quotas with units\n- Financial: Prices, amounts, budgets with currency units\n- Scientific: Laboratory measurements, calculations with units\n- Configuration: Settings that require specific units or measurements\n\nUnit Selection Guidelines\n\n- Clear Units: Use widely recognized unit abbreviations (kg, cm, $, %)\n- Consistent Units: Maintain unit consistency within related inputs\n- Localization: Consider locale-specific units and formats\n- Abbreviations: Keep unit text short to maintain clean appearance\n- Context: Choose units appropriate for the target audience\n\nSize and Layout\n\n- Medium Size: Default choice for most form layouts\n- Large Size: Use for prominent inputs or mobile-first designs\n- Responsive Design: Test floating label behavior on small screens\n- Form Consistency: Maintain consistent sizing within form groups\n- Visual Hierarchy: Use size to indicate input importance\n\nAccessibility Considerations\n\n- Label Association: Ensure proper labeling including unit information\n- Screen Readers: Unit information should be accessible to assistive technology\n- Focus Management: Maintain clear focus indicators and keyboard navigation\n- Error Communication: Make validation errors accessible and specific\n- Help Text: Provide clear instructions about expected values and units\n\nValidation and Error Handling\n\n- Range Validation: Set appropriate min/max values for the context\n- Step Validation: Use logical step values for the measurement type\n- Unit Conversion: Consider providing unit conversion helpers\n- Error Messages: Provide specific, actionable error messages\n- Real-time Validation: Validate input as user types when appropriate\n\nForm Integration\n\n- Controlled Components: Always use controlled inputs with proper state management\n- Data Types: Handle number/undefined types appropriately\n- Submission: Convert and validate units before form submission\n- Default Values: Provide sensible defaults when appropriate\n- Reset Functionality: Implement proper form reset behavior\n\nPerformance Optimization\n\n- State Management: Use appropriate state patterns for complex forms\n- Debouncing: Consider debouncing for expensive validation operations\n- Memory Management: Clean up event listeners and effects properly\n- Render Optimization: Memoize expensive calculations and validations\n\nUser Experience\n\n- Clear Placeholders: Use descriptive placeholder text\n- Helpful Hints: Provide context about expected ranges and formats\n- Progressive Enhancement: Start with basic functionality\n- Visual Feedback: Show clear confirmation of successful input\n- Error Recovery: Allow easy correction of invalid inputs",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n) => void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Weight Input",
                "level": 3,
                "id": "weight-input"
            },
            {
                "title": "Currency Input",
                "level": 3,
                "id": "currency-input"
            },
            {
                "title": "Distance Measurement",
                "level": 3,
                "id": "distance-measurement"
            },
            {
                "title": "Temperature Input",
                "level": 3,
                "id": "temperature-input"
            },
            {
                "title": "Dimension Input",
                "level": 3,
                "id": "dimension-input"
            },
            {
                "title": "Speed Input",
                "level": 3,
                "id": "speed-input"
            },
            {
                "title": "Volume Input",
                "level": 3,
                "id": "volume-input"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Unit Positioning",
                "level": 3,
                "id": "unit-positioning"
            },
            {
                "title": "Size Variants",
                "level": 3,
                "id": "size-variants"
            },
            {
                "title": "Slot Management",
                "level": 3,
                "id": "slot-management"
            },
            {
                "title": "Focus and Validation",
                "level": 3,
                "id": "focus-and-validation"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use UnitInput",
                "level": 3,
                "id": "when-to-use-unitinput"
            },
            {
                "title": "Unit Selection Guidelines",
                "level": 3,
                "id": "unit-selection-guidelines"
            },
            {
                "title": "Size and Layout",
                "level": 3,
                "id": "size-and-layout"
            },
            {
                "title": "Accessibility Considerations",
                "level": 3,
                "id": "accessibility-considerations"
            },
            {
                "title": "Validation and Error Handling",
                "level": 3,
                "id": "validation-and-error-handling"
            },
            {
                "title": "Form Integration",
                "level": 3,
                "id": "form-integration"
            },
            {
                "title": "Performance Optimization",
                "level": 3,
                "id": "performance-optimization"
            },
            {
                "title": "User Experience",
                "level": 3,
                "id": "user-experience"
            }
        ]
    },
    "contributing": {
        "title": "Contributing",
        "description": "Learn how to contribute to Blend Design System. Guidelines for open source contributors, developers, and designers.",
        "path": "contributing",
        "slug": "contributing",
        "category": "documentation",
        "tags": ["contributing", "open-source", "development", "community"],
        "content": "Contributing to Blend Design System\n\nWe welcome contributions from the community! Whether you're fixing bugs, adding new components, improving documentation, or proposing new features, your contributions help make Blend better for everyone.\n\nBefore You Start\n\nCode of Conduct\n\nPlease read and follow our Code of Conduct. We're committed to maintaining a welcoming and inclusive community.\n\nGetting Help\n\n- GitHub Discussions: Ask questions and share ideas\n- Issues: Report bugs and request features\n- Discord: Join our community for real-time chat\n\nDevelopment Setup\n\nPrerequisites\n\n- Node.js 18+\n- pnpm (recommended package manager)\n- Git for version control\n- Code Editor (VS Code recommended with ReScript extension)\n\nFork and Clone\n\n\n\nInstall Dependencies\n\n\n\nDevelopment Workflow\n\n\n\nProject Structure\n\nUnderstanding the monorepo structure:\n\n\n\nTypes of Contributions\n\n🐛 Bug Fixes\n\n1. Check existing issues before creating new ones\n2. Include reproduction steps and expected vs actual behavior\n3. Add tests to prevent regression\n4. Update documentation if needed\n\nExample Bug Fix Process:\n\n\n\n✨ New Components\n\nCreating new components requires careful planning and implementation:\n\nComponent Structure\n\n\n\nComponent Template\n\n\n\nReScript Bindings\n\n\n\nRequirements for New Components\n\n- Accessibility: WCAG 2.1 AA compliance\n- TypeScript: Full type definitions\n- ReScript: Complete bindings\n- Tests: Unit and integration tests\n- Stories: Comprehensive Storybook stories\n- Documentation: Usage examples and API reference\n\n📚 Documentation\n\nDocumentation improvements are always welcome:\n\n- Improve existing component documentation\n- Add usage examples and best practices\n- Update getting started guides\n- Fix typos and improve clarity\n- Add troubleshooting sections\n\n🎨 Design Tokens\n\nWhen proposing design token changes:\n\n1. Create an issue first to discuss the change\n2. Ensure backward compatibility where possible\n3. Update all affected components\n4. Include design rationale and use cases\n5. Test across all themes\n\nTesting Requirements\n\nUnit Tests\n\n- Test all component variants and states\n- Test accessibility features\n- Test error boundaries and edge cases\n- Maintain minimum 80% code coverage\n\nIntegration Tests\n\n- Test component interactions\n- Test theme switching\n- Test responsive behavior\n\nVisual Regression Tests\n\n- Use Storybook for visual testing\n- Test all component stories\n- Include different themes and screen sizes\n\nRunning Tests\n\n\n\nDocumentation Standards\n\nComponent Documentation\n\nEach component should include:\n\n- API Reference: Complete prop documentation\n- Usage Examples: Common use cases\n- Accessibility: ARIA labels, keyboard navigation\n- Do's and Don'ts: Best practices and anti-patterns\n- Troubleshooting: Common issues and solutions\n\nCode Comments\n\n- Document complex logic and business rules\n- Explain design decisions and trade-offs\n- Include links to relevant design specifications\n- Use JSDoc for public APIs\n\nSubmission Guidelines\n\nBefore Submitting\n\n1. Ensure all tests pass: pnpm test\n2. Run linting: pnpm lint\n3. Check TypeScript: pnpm type-check\n4. Update documentation if needed\n5. Add changeset for versioning\n\nChangeset Creation\n\n\n\nPull Request Guidelines\n\nPR Title Format\n\n\n\nPR Description Template\n\n\n\nReview Process\n\n1. Automated checks must pass\n2. Design team review for UI changes\n3. Code review by maintainers\n4. Documentation review if applicable\n5. Final approval and merge\n\nRelease Process\n\nSemantic Versioning\n\nWe follow Semantic Versioning:\n\n- Patch (1.0.1): Bug fixes\n- Minor (1.1.0): New features, backward compatible\n- Major (2.0.0): Breaking changes\n\nRelease Notes\n\nContributors are recognized in release notes:\n\n- Bug fixes and improvements\n- New features and components\n- Breaking changes\n- Special thanks to contributors\n\nCommunity Recognition\n\nContributor Levels\n\n- First-time Contributor: Welcome badge\n- Regular Contributor: Community member badge\n- Core Contributor: Maintainer consideration\n- Maintainer: Repository access and responsibilities\n\nShowcase\n\nProjects using Blend are featured in our community showcase. Share your implementations to inspire others!\n\nTroubleshooting\n\nCommon Development Issues\n\nBuild failures:\n\n\n\nTypeScript errors:\n\n- Check component exports in index.ts\n- Verify type definitions are complete\n- Ensure ReScript bindings match TypeScript interfaces\n\nTest failures:\n\n- Check for async operations in tests\n- Verify mocks are properly configured\n- Ensure clean test environment\n\nGetting Unstuck\n\nIf you're stuck:\n\n1. Check existing documentation and issues\n2. Ask in GitHub Discussions\n3. Join our Discord community\n4. Reach out to maintainers\n\nResources\n\nDevelopment Tools\n\n- Storybook: Component development and testing\n- TypeScript: Type safety and IntelliSense\n- ReScript: Functional programming support\n- Jest: Testing framework\n- ESLint: Code linting\n\nDesign Resources\n\n- Figma: Design files and specifications\n- Design Tokens: Token definitions and usage\n- Accessibility: WCAG guidelines and tools\n\nLearning Materials\n\n- React: Component development\n- TypeScript: Type system\n- ReScript: Functional programming\n- Testing: Best practices\n\nThank You\n\nThank you for contributing to Blend Design System! Your efforts help create better experiences for developers and users worldwide. Every contribution, no matter how small, makes a difference.\n\nWelcome to the community! 🎉",
        "excerpt": "Contributing to Blend Design System\n\nWe welcome contributions from the community! Whether you're fixing bugs, adding new components, improving documen...",
        "sections": [
            {
                "title": "Contributing to Blend Design System",
                "level": 1,
                "id": "contributing-to-blend-design-system"
            },
            {
                "title": "Before You Start",
                "level": 2,
                "id": "before-you-start"
            },
            {
                "title": "Code of Conduct",
                "level": 3,
                "id": "code-of-conduct"
            },
            {
                "title": "Getting Help",
                "level": 3,
                "id": "getting-help"
            },
            {
                "title": "Development Setup",
                "level": 2,
                "id": "development-setup"
            },
            {
                "title": "Prerequisites",
                "level": 3,
                "id": "prerequisites"
            },
            {
                "title": "Fork and Clone",
                "level": 3,
                "id": "fork-and-clone"
            },
            {
                "title": "Fork the repository on GitHub, then clone your fork",
                "level": 1,
                "id": "fork-the-repository-on-github-then-clone-your-fork"
            },
            {
                "title": "Add upstream remote",
                "level": 1,
                "id": "add-upstream-remote"
            },
            {
                "title": "Install Dependencies",
                "level": 3,
                "id": "install-dependencies"
            },
            {
                "title": "Install all dependencies",
                "level": 1,
                "id": "install-all-dependencies"
            },
            {
                "title": "Build the design system",
                "level": 1,
                "id": "build-the-design-system"
            },
            {
                "title": "Start development mode",
                "level": 1,
                "id": "start-development-mode"
            },
            {
                "title": "Development Workflow",
                "level": 3,
                "id": "development-workflow"
            },
            {
                "title": "Create a new branch for your feature",
                "level": 1,
                "id": "create-a-new-branch-for-your-feature"
            },
            {
                "title": "Make your changes",
                "level": 1,
                "id": "make-your-changes"
            },
            {
                "title": "...",
                "level": 1,
                "id": ""
            },
            {
                "title": "Run tests",
                "level": 1,
                "id": "run-tests"
            },
            {
                "title": "Run linting",
                "level": 1,
                "id": "run-linting"
            },
            {
                "title": "Build to ensure everything works",
                "level": 1,
                "id": "build-to-ensure-everything-works"
            },
            {
                "title": "Project Structure",
                "level": 2,
                "id": "project-structure"
            },
            {
                "title": "Types of Contributions",
                "level": 2,
                "id": "types-of-contributions"
            },
            {
                "title": "🐛 Bug Fixes",
                "level": 3,
                "id": "bug-fixes"
            },
            {
                "title": "Create branch",
                "level": 1,
                "id": "create-branch"
            },
            {
                "title": "Make your fix",
                "level": 1,
                "id": "make-your-fix"
            },
            {
                "title": "Add tests",
                "level": 1,
                "id": "add-tests"
            },
            {
                "title": "Update docs if needed",
                "level": 1,
                "id": "update-docs-if-needed"
            },
            {
                "title": "Commit and push",
                "level": 1,
                "id": "commit-and-push"
            },
            {
                "title": "✨ New Components",
                "level": 3,
                "id": "new-components"
            },
            {
                "title": "Component Structure",
                "level": 4,
                "id": "component-structure"
            },
            {
                "title": "Component Template",
                "level": 4,
                "id": "component-template"
            },
            {
                "title": "ReScript Bindings",
                "level": 4,
                "id": "rescript-bindings"
            },
            {
                "title": "Requirements for New Components",
                "level": 4,
                "id": "requirements-for-new-components"
            },
            {
                "title": "📚 Documentation",
                "level": 3,
                "id": "documentation"
            },
            {
                "title": "🎨 Design Tokens",
                "level": 3,
                "id": "design-tokens"
            },
            {
                "title": "Testing Requirements",
                "level": 2,
                "id": "testing-requirements"
            },
            {
                "title": "Unit Tests",
                "level": 3,
                "id": "unit-tests"
            },
            {
                "title": "Integration Tests",
                "level": 3,
                "id": "integration-tests"
            },
            {
                "title": "Visual Regression Tests",
                "level": 3,
                "id": "visual-regression-tests"
            },
            {
                "title": "Running Tests",
                "level": 3,
                "id": "running-tests"
            },
            {
                "title": "Run all tests",
                "level": 1,
                "id": "run-all-tests"
            },
            {
                "title": "Run tests in watch mode",
                "level": 1,
                "id": "run-tests-in-watch-mode"
            },
            {
                "title": "Run tests with coverage",
                "level": 1,
                "id": "run-tests-with-coverage"
            },
            {
                "title": "Run visual tests",
                "level": 1,
                "id": "run-visual-tests"
            },
            {
                "title": "Documentation Standards",
                "level": 2,
                "id": "documentation-standards"
            },
            {
                "title": "Component Documentation",
                "level": 3,
                "id": "component-documentation"
            },
            {
                "title": "Code Comments",
                "level": 3,
                "id": "code-comments"
            },
            {
                "title": "Submission Guidelines",
                "level": 2,
                "id": "submission-guidelines"
            },
            {
                "title": "Before Submitting",
                "level": 3,
                "id": "before-submitting"
            },
            {
                "title": "Changeset Creation",
                "level": 3,
                "id": "changeset-creation"
            },
            {
                "title": "Add changeset for your changes",
                "level": 1,
                "id": "add-changeset-for-your-changes"
            },
            {
                "title": "Follow prompts to describe your changes",
                "level": 1,
                "id": "follow-prompts-to-describe-your-changes"
            },
            {
                "title": "Choose appropriate semver bump (patch/minor/major)",
                "level": 1,
                "id": "choose-appropriate-semver-bump-patch-minor-major"
            },
            {
                "title": "Pull Request Guidelines",
                "level": 3,
                "id": "pull-request-guidelines"
            },
            {
                "title": "PR Title Format",
                "level": 4,
                "id": "pr-title-format"
            },
            {
                "title": "PR Description Template",
                "level": 4,
                "id": "pr-description-template"
            },
            {
                "title": "Description",
                "level": 2,
                "id": "description"
            },
            {
                "title": "Type of Change",
                "level": 2,
                "id": "type-of-change"
            },
            {
                "title": "Testing",
                "level": 2,
                "id": "testing"
            },
            {
                "title": "Screenshots (if applicable)",
                "level": 2,
                "id": "screenshots-if-applicable"
            },
            {
                "title": "Breaking Changes",
                "level": 2,
                "id": "breaking-changes"
            },
            {
                "title": "Related Issues",
                "level": 2,
                "id": "related-issues"
            },
            {
                "title": "Review Process",
                "level": 3,
                "id": "review-process"
            },
            {
                "title": "Release Process",
                "level": 2,
                "id": "release-process"
            },
            {
                "title": "Semantic Versioning",
                "level": 3,
                "id": "semantic-versioning"
            },
            {
                "title": "Release Notes",
                "level": 3,
                "id": "release-notes"
            },
            {
                "title": "Community Recognition",
                "level": 2,
                "id": "community-recognition"
            },
            {
                "title": "Contributor Levels",
                "level": 3,
                "id": "contributor-levels"
            },
            {
                "title": "Showcase",
                "level": 3,
                "id": "showcase"
            },
            {
                "title": "Troubleshooting",
                "level": 2,
                "id": "troubleshooting"
            },
            {
                "title": "Common Development Issues",
                "level": 3,
                "id": "common-development-issues"
            },
            {
                "title": "Clear everything and reinstall",
                "level": 1,
                "id": "clear-everything-and-reinstall"
            },
            {
                "title": "Getting Unstuck",
                "level": 3,
                "id": "getting-unstuck"
            },
            {
                "title": "Resources",
                "level": 2,
                "id": "resources"
            },
            {
                "title": "Development Tools",
                "level": 3,
                "id": "development-tools"
            },
            {
                "title": "Design Resources",
                "level": 3,
                "id": "design-resources"
            },
            {
                "title": "Learning Materials",
                "level": 3,
                "id": "learning-materials"
            },
            {
                "title": "Thank You",
                "level": 2,
                "id": "thank-you"
            }
        ]
    },
    "getting-started": {
        "title": "Getting Started",
        "description": "Get started with Blend Design System. Learn installation, setup, and best practices for using our design system in your projects.",
        "path": "getting-started",
        "slug": "getting-started",
        "category": "documentation",
        "tags": ["getting-started", "installation", "setup"],
        "content": "Getting Started with Blend Design System\n\nWelcome to Blend Design System! This guide will help you get started with implementing Blend in your project, whether you're a team member or an open source contributor.\n\nWhat is Blend?\n\nBlend is a comprehensive design system that provides:\n\n- React Components: Production-ready components with TypeScript support\n- Design Tokens: Consistent design tokens for colors, typography, spacing, and more\n- Figma Integration: Direct sync between Figma designs and code components\n\nInstallation\n\nChoose your preferred package manager to install Blend:\n\n\n\nBasic Setup\n\n1. Start Using Components\n\n\n\n2. Theme Configuration (Optional)\n\nConfigure your application theme:\n\n\n\nFramework-Specific Setup\n\nNext.js Configuration\n\nFor Next.js applications, add this to your next.config.js:\n\n\n\nTypeScript Configuration\n\nEnsure your tsconfig.json includes:\n\n\n\nDevelopment Environment Setup\n\nFor contributors or those wanting to run the project locally:\n\nPrerequisites\n\n- Node.js 18+ and pnpm\n- Git for version control\n\nSetup Steps\n\n\n\nBest Practices\n\nComponent Usage\n\n- Always refer to our component documentation for API reference\n- Use TypeScript for better development experience and type safety\n- Follow established patterns for consistent implementation\n\nDesign Tokens\n\n- Use design tokens instead of hardcoded values\n- Reference our design tokens guide for available tokens\n- Maintain consistency with the design system guidelines\n\nNext Steps\n\n1. Explore Components: Browse our component library\n2. Learn Design Tokens: Understand our foundation system\n3. Contributing: Check our contribution guide to contribute to the project\n4. Get Support: Join our community discussions for help and feedback\n\nThat's it! You're ready to start building with Blend Design System. 🚀",
        "excerpt": "Getting Started with Blend Design System\n\nWelcome to Blend Design System! This guide will help you get started with implementing Blend in your project...",
        "sections": [
            {
                "title": "Getting Started with Blend Design System",
                "level": 1,
                "id": "getting-started-with-blend-design-system"
            },
            {
                "title": "What is Blend?",
                "level": 2,
                "id": "what-is-blend"
            },
            {
                "title": "Installation",
                "level": 2,
                "id": "installation"
            },
            {
                "title": "npm",
                "level": 1,
                "id": "npm"
            },
            {
                "title": "yarn",
                "level": 1,
                "id": "yarn"
            },
            {
                "title": "pnpm",
                "level": 1,
                "id": "pnpm"
            },
            {
                "title": "Basic Setup",
                "level": 2,
                "id": "basic-setup"
            },
            {
                "title": "1. Start Using Components",
                "level": 3,
                "id": "1-start-using-components"
            },
            {
                "title": "2. Theme Configuration (Optional)",
                "level": 3,
                "id": "2-theme-configuration-optional"
            },
            {
                "title": "Framework-Specific Setup",
                "level": 2,
                "id": "framework-specific-setup"
            },
            {
                "title": "Next.js Configuration",
                "level": 3,
                "id": "next-js-configuration"
            },
            {
                "title": "TypeScript Configuration",
                "level": 3,
                "id": "typescript-configuration"
            },
            {
                "title": "Development Environment Setup",
                "level": 2,
                "id": "development-environment-setup"
            },
            {
                "title": "Prerequisites",
                "level": 3,
                "id": "prerequisites"
            },
            {
                "title": "Setup Steps",
                "level": 3,
                "id": "setup-steps"
            },
            {
                "title": "Clone the repository",
                "level": 1,
                "id": "clone-the-repository"
            },
            {
                "title": "Install dependencies",
                "level": 1,
                "id": "install-dependencies"
            },
            {
                "title": "Build the design system",
                "level": 1,
                "id": "build-the-design-system"
            },
            {
                "title": "Start development mode",
                "level": 1,
                "id": "start-development-mode"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "Component Usage",
                "level": 3,
                "id": "component-usage"
            },
            {
                "title": "Design Tokens",
                "level": 3,
                "id": "design-tokens"
            },
            {
                "title": "Next Steps",
                "level": 2,
                "id": "next-steps"
            }
        ]
    }
}
