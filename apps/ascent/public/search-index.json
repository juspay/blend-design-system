{
    "(date-range-picker)": {
        "title": "Date Range Picker",
        "description": "The DateRangePicker component allows users to select a range of dates with a calendar interface, useful for filtering data, scheduling, and time-based selections.",
        "path": "components/(date-range-picker)",
        "slug": "(date-range-picker)",
        "category": "components",
        "tags": ["date-range-picker", "component", "date"],
        "content": "",
        "excerpt": "",
        "sections": []
    },
    "(inputs)": {
        "title": "Inputs",
        "description": "The Inputs component provides various form input types including text fields, textareas, and other input controls with validation, styling, and accessibility features.",
        "path": "components/(inputs)",
        "slug": "(inputs)",
        "category": "components",
        "tags": ["inputs", "component", "form"],
        "content": "",
        "excerpt": "",
        "sections": []
    },
    "(multi-select)": {
        "title": "Multi Select",
        "description": "The MultiSelect component allows users to select multiple options from a dropdown list with search functionality, tags, and various selection patterns for complex form inputs.",
        "path": "components/(multi-select)",
        "slug": "(multi-select)",
        "category": "components",
        "tags": ["multi-select", "component", "form"],
        "content": "",
        "excerpt": "",
        "sections": []
    },
    "(sidebar)": {
        "title": "Sidebar",
        "description": "The Sidebar component provides a collapsible navigation panel that can contain links, menus, and other navigation elements for organizing application structure and navigation.",
        "path": "components/(sidebar)",
        "slug": "(sidebar)",
        "category": "components",
        "tags": ["sidebar", "component", "navigation"],
        "content": "",
        "excerpt": "",
        "sections": []
    },
    "accordion": {
        "title": "Accordion",
        "description": "The Accordion component creates collapsible content sections that can expand and collapse, helping to organize information hierarchically and save screen space.",
        "path": "components/accordion",
        "slug": "accordion",
        "category": "components",
        "tags": [
            "accordion",
            "component",
            "collapsible",
            "expandable",
            "hierarchical",
            "navigation",
            "organization"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\nAccordion Props\n\n void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nAccordionItem Props\n\n\n\nFeatures\n\n- Visual Variants: Two distinct styles - bordered and borderless for different design contexts\n- Selection Modes: Single or multiple item expansion with controlled state management\n- Flexible Layout: Customizable chevron positioning (left or right side)\n- Rich Content Support: Multiple content slots for icons, subtitles, and additional elements\n- Interactive States: Comprehensive state management including hover, active, and disabled states\n- Accessibility First: Full keyboard navigation with ARIA compliance and screen reader support\n- Smooth Animations: Built-in expand/collapse animations with smooth transitions\n- Responsive Design: Adapts to different screen sizes with responsive design tokens\n- Controlled/Uncontrolled: Support for both controlled and uncontrolled component patterns\n- Customizable Styling: Extensive theming through design tokens for consistent branding\n\nUsage Examples\n\nBasic Accordion\n\nSimple accordion with border styling\n\n\n\nNo Border Accordion\n\nAccordion without border styling for a cleaner look\n\n\n\nMultiple Selection Accordion\n\nAllow multiple items to be expanded simultaneously\n\n\n\nAccordion with Icons and Slots\n\nRich accordion items with icons and additional content\n\n\n\nControlled Accordion\n\nAccordion with controlled state management\n\n\n\nDisabled Accordion Item\n\nAccordion item that cannot be expanded\n\n\n\nComponent Tokens\n\nYou can style the accordion component using the following tokens:\n\n\n\nBehavior\n\nExpansion Modes\n- Single Mode: Only one accordion item can be expanded at a time (default behavior)\n- Multiple Mode: Multiple items can be expanded simultaneously when isMultiple={true}\n- Default Values: Set initially expanded items using defaultValue prop\n\nState Management\n- Controlled: Use value and onValueChange props for external state control\n- Uncontrolled: Component manages its own internal state when no value prop is provided\n- Disabled Items: Individual items can be disabled while maintaining visual consistency\n\nAnimations\n- Smooth Transitions: Built-in CSS transitions for expand/collapse animations\n- Performance Optimized: Uses transform and opacity changes for smooth rendering\n- Accessibility Friendly: Respects user's motion preferences\n\nAccessibility\n\n- Keyboard Navigation: Full keyboard support with Enter/Space to toggle items\n- ARIA Compliance: Proper aria-expanded, aria-controls, and aria-labelledby attributes\n- Screen Reader Support: Descriptive labels and state announcements\n- Focus Management: Clear focus indicators and logical tab order\n- Semantic HTML: Uses proper heading and button elements for structure\n- High Contrast: Supports high contrast mode and custom color schemes\n\nEnums\n\nAccordionType\n\n\n\nAccordionChevronPosition",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\nAccordion Props\n\n void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n    ]}...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Accordion Props",
                "level": 3,
                "id": "accordion-props"
            },
            {
                "title": "AccordionItem Props",
                "level": 3,
                "id": "accordionitem-props"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Accordion",
                "level": 3,
                "id": "basic-accordion"
            },
            {
                "title": "No Border Accordion",
                "level": 3,
                "id": "no-border-accordion"
            },
            {
                "title": "Multiple Selection Accordion",
                "level": 3,
                "id": "multiple-selection-accordion"
            },
            {
                "title": "Accordion with Icons and Slots",
                "level": 3,
                "id": "accordion-with-icons-and-slots"
            },
            {
                "title": "Controlled Accordion",
                "level": 3,
                "id": "controlled-accordion"
            },
            {
                "title": "Disabled Accordion Item",
                "level": 3,
                "id": "disabled-accordion-item"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Expansion Modes",
                "level": 3,
                "id": "expansion-modes"
            },
            {
                "title": "State Management",
                "level": 3,
                "id": "state-management"
            },
            {
                "title": "Animations",
                "level": 3,
                "id": "animations"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "AccordionType",
                "level": 3,
                "id": "accordiontype"
            },
            {
                "title": "AccordionChevronPosition",
                "level": 3,
                "id": "accordionchevronposition"
            }
        ]
    },
    "alert": {
        "title": "Alert",
        "description": "The Alert component is a versatile notification element used to display important messages to users with multiple variants, styles, and interactive options.",
        "path": "components/alert",
        "slug": "alert",
        "category": "components",
        "tags": [
            "alert",
            "component",
            "notification",
            "message",
            "banner",
            "status",
            "feedback"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'icon',\n                hintText: 'Custom icon displayed at the start of the alert',\n            },\n            { content: 'React.ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'actionPlacement',\n                hintText: 'Position of action buttons relative to content',\n            },\n            { content: 'AlertActionPlacement', hintText: 'enum' },\n            { content: 'AlertActionPlacement.RIGHT' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nAlertAction Type\n\nThe AlertAction type defines the structure for action buttons:\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- 7 Semantic Variants: Primary, Success, Warning, Error, Purple, Orange, and Neutral for different message types\n- 2 Visual Styles: Subtle (filled background) and No Fill (outline only) for different design contexts\n- Flexible Actions: Support for primary and secondary action buttons with customizable placement\n- Dismissible: Optional close button with callback functionality\n- Custom Icons: Support for custom icons to enhance visual communication\n- Responsive Layout: Automatic layout adjustment based on content and screen size\n- Accessible Design: Full keyboard navigation and screen reader support\n- Action Placement: Buttons can be positioned on the right or bottom for optimal layout\n- Max Width Control: Built-in max-width of 900px for optimal readability\n- Theme Integration: Consistent styling through design tokens\n\nUsage Examples\n\nBasic Information Alert\n\nSimple alert with heading and description only\n\n\n\nSuccess Alert with Close Button\n\nAlert confirming successful action with dismissible option\n\n\n\nWarning Alert with Actions\n\nAlert requiring user decision with action buttons\n\n\n\nError Alert with Custom Icon\n\nError alert with custom icon for enhanced visual communication\n\n\n\nAlert with Bottom Action Placement\n\nAlert with action buttons positioned below the content\n\n\n\nNo Fill Style Alert\n\nAlert with transparent background and border-only styling\n\n\n\nAlert with Only Close Button\n\nAlert with automatic bottom placement when only close button is provided\n\n\n\nComponent Tokens\n\nYou can style the Alert component using the following tokens:\n\n\n\nBehavior\n\nAction Placement Logic\n- Right Placement: When both primary and secondary actions are provided\n- Bottom Placement: When actionPlacement={AlertActionPlacement.BOTTOM} is explicitly set\n- Automatic Bottom: When only onClose is provided without other actions\n\nClose Button Behavior\n- Auto-positioning: Close button automatically moves to bottom when no other actions are present\n- Always Visible: Close button remains accessible when onClose prop is provided\n- Icon Consistency: Uses standard X icon from Lucide React\n\nResponsive Behavior\n- Max Width: Component has a maximum width of 900px for optimal readability\n- Flexible Layout: Content and actions adapt to available space\n- Mobile Friendly: Action buttons stack appropriately on smaller screens\n\nAccessibility\n\n- Semantic HTML: Uses proper ARIA roles and landmarks for alert content\n- Keyboard Navigation: All interactive elements are keyboard accessible\n- Screen Reader Support: Proper announcements for alert content and state changes\n- Focus Management: Clear focus indicators on all interactive elements\n- Color Independence: Alert meaning conveyed through text, not color alone\n- High Contrast: Supports high contrast mode and custom color schemes\n\nEnums\n\nAlertVariant\n\n\n\nAlertStyle\n\n\n\nAlertActionPlacement",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'icon...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "AlertAction Type",
                "level": 2,
                "id": "alertaction-type"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Information Alert",
                "level": 3,
                "id": "basic-information-alert"
            },
            {
                "title": "Success Alert with Close Button",
                "level": 3,
                "id": "success-alert-with-close-button"
            },
            {
                "title": "Warning Alert with Actions",
                "level": 3,
                "id": "warning-alert-with-actions"
            },
            {
                "title": "Error Alert with Custom Icon",
                "level": 3,
                "id": "error-alert-with-custom-icon"
            },
            {
                "title": "Alert with Bottom Action Placement",
                "level": 3,
                "id": "alert-with-bottom-action-placement"
            },
            {
                "title": "No Fill Style Alert",
                "level": 3,
                "id": "no-fill-style-alert"
            },
            {
                "title": "Alert with Only Close Button",
                "level": 3,
                "id": "alert-with-only-close-button"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Action Placement Logic",
                "level": 3,
                "id": "action-placement-logic"
            },
            {
                "title": "Close Button Behavior",
                "level": 3,
                "id": "close-button-behavior"
            },
            {
                "title": "Responsive Behavior",
                "level": 3,
                "id": "responsive-behavior"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "AlertVariant",
                "level": 3,
                "id": "alertvariant"
            },
            {
                "title": "AlertStyle",
                "level": 3,
                "id": "alertstyle"
            },
            {
                "title": "AlertActionPlacement",
                "level": 3,
                "id": "alertactionplacement"
            }
        ]
    },
    "avatar-group": {
        "title": "Avatar Group",
        "description": "The AvatarGroup component displays multiple user profile images in a compact, stacked layout with overflow handling and optional selection functionality.",
        "path": "components/avatar-group",
        "slug": "avatar-group",
        "category": "components",
        "tags": ["avatar-group", "component", "group", "users", "selection"],
        "content": "Usage\n\n\n\nAPI Reference\n\n void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nAvatarData Type\n\nThe avatars prop accepts an array of AvatarData objects with the following properties:\n\n\n\nFeatures\n\n- Compact stacked layout for displaying multiple avatars\n- Configurable maximum visible count with overflow handling\n- Interactive overflow counter with searchable dropdown menu\n- Optional multi-selection functionality with visual feedback\n- Consistent sizing and shape options across all avatars\n- Accessible keyboard navigation and screen reader support\n- Automatic positioning of overflow menu\n- Built-in search functionality for large avatar lists\n- Smooth animations and hover effects\n\nUsage Examples\n\nBasic Avatar Group\n\nSimple avatar group with default settings\n\n\n\nAvatar Group with Overflow\n\nAvatar group that shows overflow counter when exceeding maxCount\n\n\n\nAvatar Group with Selection\n\nAvatar group with controlled selection functionality\n\n\n\nDifferent Sizes\n\nAvatar groups in various sizes\n\n\n\nRounded Shape\n\nAvatar group with rounded corners instead of circular\n\n\n\nAvatar Group with Online Status\n\nAvatar group showing online status indicators\n\n\n\nLarge Avatar Group with Search\n\nAvatar group with many avatars demonstrating search functionality\n\n\n\nComponent Tokens\n\nYou can style the avatar group component using the following tokens:\n\n\n\nAccessibility\n\n- ARIA Support: Uses proper ARIA roles and labels for screen readers\n- Keyboard Navigation: Full keyboard support with Enter/Space activation\n- Focus Management: Clear focus indicators and logical tab order\n- Screen Reader Announcements: Announces selection state and overflow information\n- Semantic HTML: Uses appropriate button and group roles\n- High Contrast: Supports high contrast mode with proper color tokens",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "AvatarData Type",
                "level": 2,
                "id": "avatardata-type"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Avatar Group",
                "level": 3,
                "id": "basic-avatar-group"
            },
            {
                "title": "Avatar Group with Overflow",
                "level": 3,
                "id": "avatar-group-with-overflow"
            },
            {
                "title": "Avatar Group with Selection",
                "level": 3,
                "id": "avatar-group-with-selection"
            },
            {
                "title": "Different Sizes",
                "level": 3,
                "id": "different-sizes"
            },
            {
                "title": "Rounded Shape",
                "level": 3,
                "id": "rounded-shape"
            },
            {
                "title": "Avatar Group with Online Status",
                "level": 3,
                "id": "avatar-group-with-online-status"
            },
            {
                "title": "Large Avatar Group with Search",
                "level": 3,
                "id": "large-avatar-group-with-search"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            }
        ]
    },
    "avatar": {
        "title": "Avatar",
        "description": "The Avatar component displays user profile images, initials, or fallback icons with various sizes and styling options for user identification and personalization.",
        "path": "components/avatar",
        "slug": "avatar",
        "category": "components",
        "tags": ["avatar", "component", "user", "profile", "image"],
        "content": "Usage\n\n\n\nAPI Reference\n\n\n\nFeatures\n\n- Multiple size variants (SM, MD, LG, XL)\n- Two shape options (circular and rounded)\n- Automatic fallback to initials when image fails\n- Custom fallback content support\n- Online status indicator\n- Leading and trailing slots for additional content\n- Accessible screen reader support\n- Automatic image error handling\n- Customizable styling through design tokens\n\nUsage Examples\n\nBasic Avatar\n\nSimple avatar with image source\n\n\n\nAvatar with Initials Fallback\n\nAvatar that shows initials when image is unavailable\n\n\n\nCustom Fallback Content\n\nAvatar with custom fallback content\n\n\n\nOnline Status Indicator\n\nAvatar with online status indicator\n\n\n\nDifferent Sizes\n\nAvatars in various sizes\n\n\n\nRounded Shape\n\nAvatar with rounded corners instead of circular\n\n\n\nAvatar with Slots\n\nAvatar with leading and trailing content\n\n\n\nText-Only Avatar\n\nAvatar using only initials (no image)\n\n\n\nComponent Tokens\n\nYou can style the avatar component using the following tokens:\n\n\n\nEnums\n\nAvatarSize\n\n\n\nAvatarShape",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n\n\nFeatures\n\n- Multiple size variants (SM, MD, LG, XL)\n- Two shape options (circular and rounded)\n- Automatic fallback to initi...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Avatar",
                "level": 3,
                "id": "basic-avatar"
            },
            {
                "title": "Avatar with Initials Fallback",
                "level": 3,
                "id": "avatar-with-initials-fallback"
            },
            {
                "title": "Custom Fallback Content",
                "level": 3,
                "id": "custom-fallback-content"
            },
            {
                "title": "Online Status Indicator",
                "level": 3,
                "id": "online-status-indicator"
            },
            {
                "title": "Different Sizes",
                "level": 3,
                "id": "different-sizes"
            },
            {
                "title": "Rounded Shape",
                "level": 3,
                "id": "rounded-shape"
            },
            {
                "title": "Avatar with Slots",
                "level": 3,
                "id": "avatar-with-slots"
            },
            {
                "title": "Text-Only Avatar",
                "level": 3,
                "id": "text-only-avatar"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "AvatarSize",
                "level": 3,
                "id": "avatarsize"
            },
            {
                "title": "AvatarShape",
                "level": 3,
                "id": "avatarshape"
            }
        ]
    },
    "breadcrumb": {
        "title": "Breadcrumb",
        "description": "The Breadcrumb component provides navigation context by showing the current page's location within a site hierarchy, helping users understand where they are and navigate back.",
        "path": "components/breadcrumb",
        "slug": "breadcrumb",
        "category": "components",
        "tags": ["breadcrumb", "component", "navigation", "hierarchy", "path"],
        "content": "Usage\n\n\n\nAPI Reference\n\n\n\nBreadcrumbItemType\n\nEach item in the items array should have the following structure:\n\n\n\nFeatures\n\n- Hierarchical navigation display with clear visual separators\n- Automatic overflow handling for long navigation paths (max 4 visible items)\n- Responsive design that adapts to different screen sizes\n- Support for custom icons and content through left/right slots\n- Active state styling for the current page (last item)\n- Keyboard accessible navigation with proper focus management\n- Ellipsis menu for collapsed items (when more than 4 items)\n- Consistent spacing and typography following design tokens\n\nUsage Examples\n\nBasic Breadcrumb\n\nSimple breadcrumb with text-only navigation\n\n\n\nBreadcrumb with Icons\n\nBreadcrumb items with left slot icons\n\n\n\nLong Navigation Path\n\nBreadcrumb with overflow handling (shows ellipsis for middle items)\n\n\n\nBreadcrumb with Right Slots\n\nBreadcrumb items with additional content on the right\n\n\n\nSingle Item Breadcrumb\n\nBreadcrumb with just one item (shows as active)\n\n\n\nEmpty Breadcrumb\n\nBreadcrumb gracefully handles empty array\n\n\n\nComplex Navigation with Mixed Content\n\nBreadcrumb with various combinations of slots\n\n\n\nComponent Tokens\n\nYou can style the breadcrumb component using the following tokens:\n\n\n\nBehavior\n\nOverflow Handling\n\n- Up to 4 items: All items are displayed\n- More than 4 items: Shows first item + ellipsis + last 3 items\n- Ellipsis button: Indicates collapsed items (menu functionality planned)\n\nActive State\n\n- The last item in the breadcrumb is considered \"active\" (current page)\n- Active items use different styling (color, font weight)\n- Active items are not clickable (no href applied)\n\nNavigation\n\n- All items except the last one are clickable links\n- Proper semantic HTML structure for screen readers\n- Keyboard navigation support through standard link behavior\n\nAccessibility\n\n- Semantic HTML: Uses proper link elements for navigation\n- ARIA Support: Proper roles and labels for screen readers\n- Keyboard Navigation: Standard tab navigation through links\n- Visual Hierarchy: Clear distinction between active and inactive states\n- Focus Management: Visible focus indicators for keyboard users",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n\n\nBreadcrumbItemType\n\nEach item in the items array should have the following structure:\n\n\n\nFeatures\n\n- Hierarchical navigation...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "BreadcrumbItemType",
                "level": 2,
                "id": "breadcrumbitemtype"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Breadcrumb",
                "level": 3,
                "id": "basic-breadcrumb"
            },
            {
                "title": "Breadcrumb with Icons",
                "level": 3,
                "id": "breadcrumb-with-icons"
            },
            {
                "title": "Long Navigation Path",
                "level": 3,
                "id": "long-navigation-path"
            },
            {
                "title": "Breadcrumb with Right Slots",
                "level": 3,
                "id": "breadcrumb-with-right-slots"
            },
            {
                "title": "Single Item Breadcrumb",
                "level": 3,
                "id": "single-item-breadcrumb"
            },
            {
                "title": "Empty Breadcrumb",
                "level": 3,
                "id": "empty-breadcrumb"
            },
            {
                "title": "Complex Navigation with Mixed Content",
                "level": 3,
                "id": "complex-navigation-with-mixed-content"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Overflow Handling",
                "level": 3,
                "id": "overflow-handling"
            },
            {
                "title": "Active State",
                "level": 3,
                "id": "active-state"
            },
            {
                "title": "Navigation",
                "level": 3,
                "id": "navigation"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            }
        ]
    },
    "button-group": {
        "title": "Button Group",
        "description": "The ButtonGroup component is a container that groups multiple Button components together with flexible layout options and automatic positioning for cohesive action interfaces.",
        "path": "components/button-group",
        "slug": "button-group",
        "category": "components",
        "tags": ["button-group", "component", "layout", "container", "actions"],
        "content": "Usage\n\n\n\nAPI Reference\n\n | ReactElement[]',\n                hintText: 'React elements',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- 2 Layout Modes: Horizontal (default) and vertical stacked layouts for different design contexts\n- Automatic Positioning: Intelligent button positioning with left, center, and right positioning in stacked mode\n- Seamless Integration: Works exclusively with Button components for consistent styling\n- Smart Spacing: Automatic gap management - 10px for horizontal, 0px for stacked layout\n- Dynamic Children: Supports any number of Button components as children\n- Position Awareness: Automatically sets buttonGroupPosition prop for stacked buttons\n- Flexible Styling: Inherits all Button component styling capabilities\n- Responsive Design: Adapts to container constraints and screen sizes\n- Type Safety: TypeScript support with proper Button component validation\n- Clean Rendering: Optimized rendering with React.cloneElement for stacked mode\n\nUsage Examples\n\nBasic Horizontal Group\n\nDefault horizontal layout with standard spacing\n\n\n\nStacked Vertical Group\n\nVertical layout with connected button styling\n\n\n\nForm Action Buttons\n\nCommon form submission pattern\n\n\n\nNavigation Button Group\n\nStacked navigation menu with different button types\n\n\n\nDialog Action Buttons\n\nStandard dialog confirmation pattern\n\n\n\nToolbar Actions\n\nMultiple action buttons in horizontal layout\n\n\n\nLoading State Group\n\nButton group with loading states\n\n\n\nMixed Size Buttons\n\nButtons with different sizes in one group\n\n\n\nComponent Tokens\n\nButtonGroup uses the Button component's tokens for styling. The container itself has minimal styling:\n\n\n\nBehavior\n\nLayout Modes\n- Horizontal (Default): Buttons arranged side-by-side with 10px gap\n- Stacked: Buttons arranged vertically with 0px gap for connected appearance\n\nAutomatic Positioning\n- First Button: Gets buttonGroupPosition=\"left\" in stacked mode\n- Middle Buttons: Get buttonGroupPosition=\"center\" in stacked mode  \n- Last Button: Gets buttonGroupPosition=\"right\" in stacked mode\n- Single Button: Gets buttonGroupPosition=\"left\" in stacked mode\n\nChildren Management\n- Type Safety: Only accepts Button components as children\n- Dynamic Rendering: Automatically handles single or multiple Button children\n- Prop Injection: Adds positioning props to buttons in stacked mode\n- Key Management: Preserves existing keys or generates index-based keys\n\nResponsive Behavior\n- Container Adaptation: Adapts to parent container constraints\n- Button Scaling: Individual buttons maintain their responsive behavior\n- Overflow Handling: Horizontal groups may wrap based on Button properties\n\nAccessibility\n\n- Focus Management: Maintains proper tab order through button sequence\n- Keyboard Navigation: Standard button keyboard navigation (Tab, Enter, Space)\n- Screen Reader Support: Each button maintains its individual accessibility features\n- Semantic Structure: Uses proper button semantics for each child component\n- ARIA Compliance: Inherits ARIA attributes from individual Button components\n- High Contrast: Supports high contrast mode through Button component styling\n\nLayout Specifications\n\nHorizontal Layout (Default)\n\n\nStacked Layout\n\n\nBest Practices\n\nWhen to Use Horizontal Layout\n- Form action buttons (Cancel, Submit)\n- Dialog confirmations (No, Yes)\n- Navigation controls (Previous, Next)\n- Toolbar actions with limited buttons\n\nWhen to Use Stacked Layout\n- Vertical navigation menus\n- Action lists in sidebars\n- Mobile-first button groups\n- When vertical space is preferred over horizontal\n\nButton Combinations\n- Primary + Secondary: Most common pattern for forms\n- Multiple Secondary: For equal-weight actions\n- Danger + Secondary: For destructive confirmations\n- Success + Secondary: For positive confirmations",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n | ReactElement[]',\n                hintText: 'React elements',\n            },\n            { content: '' },\n        ],\n    ]}...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Horizontal Group",
                "level": 3,
                "id": "basic-horizontal-group"
            },
            {
                "title": "Stacked Vertical Group",
                "level": 3,
                "id": "stacked-vertical-group"
            },
            {
                "title": "Form Action Buttons",
                "level": 3,
                "id": "form-action-buttons"
            },
            {
                "title": "Navigation Button Group",
                "level": 3,
                "id": "navigation-button-group"
            },
            {
                "title": "Dialog Action Buttons",
                "level": 3,
                "id": "dialog-action-buttons"
            },
            {
                "title": "Toolbar Actions",
                "level": 3,
                "id": "toolbar-actions"
            },
            {
                "title": "Loading State Group",
                "level": 3,
                "id": "loading-state-group"
            },
            {
                "title": "Mixed Size Buttons",
                "level": 3,
                "id": "mixed-size-buttons"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Layout Modes",
                "level": 3,
                "id": "layout-modes"
            },
            {
                "title": "Automatic Positioning",
                "level": 3,
                "id": "automatic-positioning"
            },
            {
                "title": "Children Management",
                "level": 3,
                "id": "children-management"
            },
            {
                "title": "Responsive Behavior",
                "level": 3,
                "id": "responsive-behavior"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Layout Specifications",
                "level": 2,
                "id": "layout-specifications"
            },
            {
                "title": "Horizontal Layout (Default)",
                "level": 3,
                "id": "horizontal-layout-default"
            },
            {
                "title": "Stacked Layout",
                "level": 3,
                "id": "stacked-layout"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use Horizontal Layout",
                "level": 3,
                "id": "when-to-use-horizontal-layout"
            },
            {
                "title": "When to Use Stacked Layout",
                "level": 3,
                "id": "when-to-use-stacked-layout"
            },
            {
                "title": "Button Combinations",
                "level": 3,
                "id": "button-combinations"
            }
        ]
    },
    "button": {
        "title": "Button",
        "description": "The Button component is a fundamental UI element used for user interactions, supporting multiple variants, sizes, and states.",
        "path": "components/button",
        "slug": "button",
        "category": "components",
        "tags": ["button", "component", "interaction", "action", "primary"],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'loading',\n                hintText: 'Alternative prop for loading state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'fullWidth',\n                hintText: 'Whether the button should take full width of its container',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'buttonGroupPosition',\n                hintText: 'Position when used within a button group',\n            },\n            { content: \"'center' | 'left' | 'right'\", hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'justifyContent',\n                hintText: 'CSS justify-content property for button content alignment',\n            },\n            { content: 'CSSObject[\"justifyContent\"]', hintText: 'CSS property' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- 4 Button Types: Primary, Secondary, Danger, and Success variants for different actions\n- 3 Size Options: Small, Medium, and Large sizes for various interface contexts\n- 3 Sub-Types: Default, Icon Only, and Inline styles for different use cases\n- Icon Support: Leading and trailing icons with proper spacing and alignment\n- Loading States: Built-in loading spinner with text replacement\n- Disabled States: Visual and interactive disabled state support\n- Full Width Option: Expandable to container width when needed\n- Button Group Support: Integrated positioning for button group components\n- Flexible Alignment: Customizable content justification\n- Accessible Design: Full keyboard navigation and screen reader support\n- Consistent Styling: Design token integration for consistent theming\n\nUsage Examples\n\nBasic Button\n\nSimple primary button with text only\n\n\n\nButton with Leading Icon\n\nButton with an icon positioned before the text\n\n\n\nButton with Trailing Icon\n\nButton with an icon positioned after the text\n\n\n\nIcon Only Button\n\nButton displaying only an icon without text\n\n\n\nLoading Button\n\nButton in loading state with spinner\n\n\n\nDisabled Button\n\nButton in disabled state\n\n\n\nDanger Button\n\nButton for destructive actions\n\n\n\nSuccess Button\n\nButton for positive confirmation actions\n\n\n\nFull Width Button\n\nButton that expands to fill container width\n\n\n\nInline Button\n\nButton with inline styling for text-like appearance\n\n\n\nSmall Size Button\n\nCompact button for tight spaces\n\n\n\nLarge Size Button\n\nProminent button for primary actions\n\n\n\nComponent Tokens\n\nYou can style the Button component using the following tokens:\n\n\n\nBehavior\n\nLoading State\n- Spinner Display: Shows loading spinner and hides text content\n- Disabled Interaction: Button becomes non-interactive during loading\n- Visual Feedback: Provides clear indication of ongoing process\n\nDisabled State\n- Visual Changes: Reduced opacity and muted colors\n- Interaction Prevention: Click events are prevented\n- Focus Management: Button cannot receive keyboard focus\n\nIcon Positioning\n- Leading Icons: Positioned before text with proper spacing\n- Trailing Icons: Positioned after text with proper spacing\n- Icon Only: Centers icon when no text is present\n\nSize Scaling\n- Proportional Scaling: All elements scale proportionally with size\n- Icon Sizing: Icons automatically resize based on button size\n- Padding Adjustment: Internal spacing adjusts for optimal proportions\n\nAccessibility\n\n- Keyboard Navigation: Full keyboard support with Enter and Space key activation\n- Focus Indicators: Clear visual focus indicators for keyboard users\n- Screen Reader Support: Proper labeling and state announcements\n- ARIA Attributes: Appropriate aria-disabled and aria-pressed attributes\n- Color Independence: Button functionality conveyed through more than color alone\n- High Contrast: Supports high contrast mode and custom color schemes\n\nEnums\n\nButtonType\n\n\n\nButtonSize\n\n\n\nButtonSubType",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'load...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Button",
                "level": 3,
                "id": "basic-button"
            },
            {
                "title": "Button with Leading Icon",
                "level": 3,
                "id": "button-with-leading-icon"
            },
            {
                "title": "Button with Trailing Icon",
                "level": 3,
                "id": "button-with-trailing-icon"
            },
            {
                "title": "Icon Only Button",
                "level": 3,
                "id": "icon-only-button"
            },
            {
                "title": "Loading Button",
                "level": 3,
                "id": "loading-button"
            },
            {
                "title": "Disabled Button",
                "level": 3,
                "id": "disabled-button"
            },
            {
                "title": "Danger Button",
                "level": 3,
                "id": "danger-button"
            },
            {
                "title": "Success Button",
                "level": 3,
                "id": "success-button"
            },
            {
                "title": "Full Width Button",
                "level": 3,
                "id": "full-width-button"
            },
            {
                "title": "Inline Button",
                "level": 3,
                "id": "inline-button"
            },
            {
                "title": "Small Size Button",
                "level": 3,
                "id": "small-size-button"
            },
            {
                "title": "Large Size Button",
                "level": 3,
                "id": "large-size-button"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Loading State",
                "level": 3,
                "id": "loading-state"
            },
            {
                "title": "Disabled State",
                "level": 3,
                "id": "disabled-state"
            },
            {
                "title": "Icon Positioning",
                "level": 3,
                "id": "icon-positioning"
            },
            {
                "title": "Size Scaling",
                "level": 3,
                "id": "size-scaling"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "ButtonType",
                "level": 3,
                "id": "buttontype"
            },
            {
                "title": "ButtonSize",
                "level": 3,
                "id": "buttonsize"
            },
            {
                "title": "ButtonSubType",
                "level": 3,
                "id": "buttonsubtype"
            }
        ]
    },
    "charts": {
        "title": "Charts",
        "description": "The Charts component provides comprehensive data visualization with support for line charts, bar charts, and pie charts, featuring interactive legends, customizable axes, and responsive design.",
        "path": "components/charts",
        "slug": "charts",
        "category": "components",
        "tags": [
            "charts",
            "component",
            "data-visualization",
            "analytics",
            "graphs",
            "recharts"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n\n\nData Types\n\nNewNestedDataPoint\n\nThe main data structure for chart data:\n\n\n\nDataPoint\n\nStructure for individual data series:\n\n\n\nAxisConfig\n\nConfiguration for chart axes:\n\n string', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            { content: 'customTick', hintText: 'Custom tick component' },\n            { content: 'React.ComponentType', hintText: 'component' },\n            { content: '' },\n        ],\n        [\n            { content: 'dateOnly', hintText: 'For date axes, show only date without time' },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: '' },\n        ],\n        [\n            { content: 'smart', hintText: 'Enable smart formatting and intervals' },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- 3 Chart Types: Line, Bar, and Pie charts for different data visualization needs\n- Interactive Legends: Clickable legends with hover effects and data series toggling\n- Responsive Design: Adapts to different screen sizes with mobile-optimized layouts\n- Fullscreen Mode: Built-in fullscreen toggle for detailed data analysis\n- Custom Axes: Configurable X and Y axes with multiple data types and formatting options\n- Flexible Data Structure: Nested data format supporting multiple series and auxiliary data\n- Color Customization: Customizable color schemes with default palette\n- Header Slots: Multiple slots for custom header content and controls\n- Stacked Legends: Advanced legend layout with delta values and change indicators\n- Tooltip Integration: Rich tooltips with custom formatting and data display\n- Export Capabilities: Built-in chart export and fullscreen viewing\n- Accessibility Support: Screen reader compatible with proper ARIA labels\n\nUsage Examples\n\nBasic Line Chart\n\nSimple line chart with two data series\n\n\n\nBar Chart with Custom Axes\n\nBar chart with currency formatting on Y-axis\n\n\n\nPie Chart with Legend\n\nPie chart showing market share distribution\n\n\n\nChart with Header Slots\n\nChart with custom header content in multiple slots\n\n\n\nChart with Stacked Legends\n\nChart with delta values and change indicators\n\n\n\nChart with Custom Tick Formatting\n\nChart with percentage formatting and custom intervals\n\n\n\nResponsive Chart with Mobile Layout\n\nChart optimized for different screen sizes\n\n\n\nComponent Tokens\n\nYou can style the Charts component using the following tokens:\n\n\n\nBehavior\n\nInteractive Features\n- Legend Interaction: Click legends to toggle data series visibility\n- Hover Effects: Hover over chart elements for detailed tooltips\n- Fullscreen Mode: Toggle fullscreen for detailed analysis\n- Responsive Legends: Legends adapt position based on screen size\n\nData Processing\n- Data Transformation: Automatically flattens nested data for chart libraries\n- Series Management: Dynamic handling of multiple data series\n- Key Selection: Interactive selection and deselection of data keys\n\nMobile Responsiveness\n- Layout Adaptation: Automatic layout changes for small screens\n- Touch Interactions: Optimized touch interactions for mobile devices\n- Legend Positioning: Smart legend positioning based on screen size\n\nAccessibility\n\n- Keyboard Navigation: Full keyboard support for interactive elements\n- Screen Reader Support: Proper ARIA labels and data announcements\n- High Contrast: Supports high contrast mode and custom color schemes\n- Focus Management: Clear focus indicators for all interactive elements\n- Alternative Text: Meaningful descriptions for chart data\n- Color Independence: Chart data conveyed through patterns and labels, not just color\n\nEnums\n\nChartType\n\n\n\nChartLegendPosition\n\n\n\nAxisType\n\n\n\nAxisIntervalType\n\n\n\nLegendsChangeType",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n\n\nData Types\n\nNewNestedDataPoint\n\nThe main data structure for chart data:\n\n\n\nDataPoint\n\nStructure for individual data series:...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Data Types",
                "level": 2,
                "id": "data-types"
            },
            {
                "title": "NewNestedDataPoint",
                "level": 3,
                "id": "newnesteddatapoint"
            },
            {
                "title": "DataPoint",
                "level": 3,
                "id": "datapoint"
            },
            {
                "title": "AxisConfig",
                "level": 3,
                "id": "axisconfig"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Line Chart",
                "level": 3,
                "id": "basic-line-chart"
            },
            {
                "title": "Bar Chart with Custom Axes",
                "level": 3,
                "id": "bar-chart-with-custom-axes"
            },
            {
                "title": "Pie Chart with Legend",
                "level": 3,
                "id": "pie-chart-with-legend"
            },
            {
                "title": "Chart with Header Slots",
                "level": 3,
                "id": "chart-with-header-slots"
            },
            {
                "title": "Chart with Stacked Legends",
                "level": 3,
                "id": "chart-with-stacked-legends"
            },
            {
                "title": "Chart with Custom Tick Formatting",
                "level": 3,
                "id": "chart-with-custom-tick-formatting"
            },
            {
                "title": "Responsive Chart with Mobile Layout",
                "level": 3,
                "id": "responsive-chart-with-mobile-layout"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Interactive Features",
                "level": 3,
                "id": "interactive-features"
            },
            {
                "title": "Data Processing",
                "level": 3,
                "id": "data-processing"
            },
            {
                "title": "Mobile Responsiveness",
                "level": 3,
                "id": "mobile-responsiveness"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "ChartType",
                "level": 3,
                "id": "charttype"
            },
            {
                "title": "ChartLegendPosition",
                "level": 3,
                "id": "chartlegendposition"
            },
            {
                "title": "AxisType",
                "level": 3,
                "id": "axistype"
            },
            {
                "title": "AxisIntervalType",
                "level": 3,
                "id": "axisintervaltype"
            },
            {
                "title": "LegendsChangeType",
                "level": 3,
                "id": "legendschangetype"
            }
        ]
    },
    "checkbox": {
        "title": "Checkbox",
        "description": "The Checkbox component allows users to select one or more options from a list, with support for indeterminate states, custom styling, and comprehensive accessibility features.",
        "path": "components/checkbox",
        "slug": "checkbox",
        "category": "components",
        "tags": [
            "checkbox",
            "component",
            "form",
            "input",
            "selection",
            "control"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n void\",\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the checkbox is disabled and non-interactive',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'required',\n                hintText: 'Whether the checkbox is required for form validation',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'error',\n                hintText: 'Whether the checkbox is in an error state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'size',\n                hintText: 'The size variant of the checkbox',\n            },\n            { content: 'CheckboxSize', hintText: 'enum' },\n            { content: 'CheckboxSize.MEDIUM' },\n        ],\n        [\n            {\n                content: 'children',\n                hintText: 'The label content displayed next to the checkbox',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'subtext',\n                hintText: 'Optional descriptive text displayed below the label',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'slot',\n                hintText: 'Optional content slot for additional elements',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- 3 Checkbox States: Checked, unchecked, and indeterminate states for complex scenarios\n- 2 Size Options: Small and medium sizes for different interface contexts\n- Interactive States: Hover, disabled, and error states with visual feedback\n- Controlled/Uncontrolled: Support for both controlled and uncontrolled component patterns\n- Form Integration: Seamless integration with forms including validation support\n- Accessibility First: Full ARIA compliance and keyboard navigation support\n- Custom Content: Support for labels, subtext, and additional content slots\n- Responsive Design: Consistent sizing and spacing across different screen sizes\n- Error Handling: Built-in error state styling for form validation\n- Icon Integration: Uses Lucide React icons for consistent check and indeterminate indicators\n- Theme Integration: Fully styled using design tokens for consistent theming\n\nUsage Examples\n\nBasic Checkbox\n\nSimple checkbox with label text\n\n\n\nCheckbox with Subtext\n\nCheckbox with additional descriptive text\n\n\n\nSmall Size Checkbox\n\nCompact checkbox for dense layouts\n\n\n\nIndeterminate Checkbox\n\nCheckbox in indeterminate state (partially selected)\n\n\n\nDisabled Checkbox\n\nNon-interactive checkbox in disabled state\n\n\n\nRequired Checkbox\n\nCheckbox marked as required for form validation\n\n\n\nError State Checkbox\n\nCheckbox in error state for validation feedback\n\n\n\nCheckbox with Custom Slot\n\nCheckbox with additional content in the slot\n\n\n\nUncontrolled Checkbox\n\nCheckbox with default state (uncontrolled)\n\n\n\nCheckbox List\n\nMultiple checkboxes for option selection\n\n\n\nForm Integration Example\n\nCheckbox integrated with form handling\n\n\n\nComponent Tokens\n\nYou can style the Checkbox component using the following tokens:\n\n\n\nBehavior\n\nState Management\n- Controlled: Use checked and onCheckedChange props for external state control\n- Uncontrolled: Use defaultChecked for internal state management\n- Indeterminate: Special state for partial selection scenarios\n\nInteractive States\n- Default: Normal interactive state with hover effects\n- Hover: Visual feedback on mouse hover\n- Disabled: Non-interactive state with reduced opacity\n- Error: Red styling to indicate validation errors\n\nForm Integration\n- Required Field: Visual indicators and validation support\n- Value Handling: Proper value attribute for form submissions\n- Validation: Error state styling for failed validation\n\nAccessibility Features\n- Keyboard Navigation: Tab navigation and Space key activation\n- Screen Reader: Proper labeling and state announcements\n- Focus Indicators: Clear visual focus indicators\n\nAccessibility\n\n- ARIA Compliance: Proper aria-checked, aria-disabled, and aria-required attributes\n- Keyboard Navigation: Full keyboard support with Tab and Space key activation\n- Screen Reader Support: Descriptive labels and state announcements\n- Focus Management: Clear focus indicators with proper contrast\n- Label Association: Proper label-input association using htmlFor attributes\n- Error Announcements: Screen reader announcements for error states\n- High Contrast: Supports high contrast mode and custom color schemes\n\nEnums\n\nCheckboxSize\n\n\n\nCheckbox States\n\n\n\nBest Practices\n\nWhen to Use\n- Multiple Selection: When users need to select multiple options\n- Terms Acceptance: For accepting terms, conditions, or agreements\n- Settings/Preferences: For enabling/disabling features or options\n- Form Controls: As part of larger forms for data collection\n\nLabel Guidelines\n- Clear and Concise: Use descriptive labels that clearly explain what will happen\n- Action-Oriented: Frame labels as actions (e.g., \"Enable notifications\")\n- Positive Language: Use positive phrasing when possible\n- Context Specific: Provide additional context through subtext when needed\n\nIndeterminate State\n- Partial Selection: Use when representing a partially selected state\n- Parent-Child Relationships: Common in hierarchical lists or tree structures\n- Group Selection: When some but not all items in a group are selected",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void\",\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n        [\n            {...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Checkbox",
                "level": 3,
                "id": "basic-checkbox"
            },
            {
                "title": "Checkbox with Subtext",
                "level": 3,
                "id": "checkbox-with-subtext"
            },
            {
                "title": "Small Size Checkbox",
                "level": 3,
                "id": "small-size-checkbox"
            },
            {
                "title": "Indeterminate Checkbox",
                "level": 3,
                "id": "indeterminate-checkbox"
            },
            {
                "title": "Disabled Checkbox",
                "level": 3,
                "id": "disabled-checkbox"
            },
            {
                "title": "Required Checkbox",
                "level": 3,
                "id": "required-checkbox"
            },
            {
                "title": "Error State Checkbox",
                "level": 3,
                "id": "error-state-checkbox"
            },
            {
                "title": "Checkbox with Custom Slot",
                "level": 3,
                "id": "checkbox-with-custom-slot"
            },
            {
                "title": "Uncontrolled Checkbox",
                "level": 3,
                "id": "uncontrolled-checkbox"
            },
            {
                "title": "Checkbox List",
                "level": 3,
                "id": "checkbox-list"
            },
            {
                "title": "Form Integration Example",
                "level": 3,
                "id": "form-integration-example"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "State Management",
                "level": 3,
                "id": "state-management"
            },
            {
                "title": "Interactive States",
                "level": 3,
                "id": "interactive-states"
            },
            {
                "title": "Form Integration",
                "level": 3,
                "id": "form-integration"
            },
            {
                "title": "Accessibility Features",
                "level": 3,
                "id": "accessibility-features"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "CheckboxSize",
                "level": 3,
                "id": "checkboxsize"
            },
            {
                "title": "Checkbox States",
                "level": 3,
                "id": "checkbox-states"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use",
                "level": 3,
                "id": "when-to-use"
            },
            {
                "title": "Label Guidelines",
                "level": 3,
                "id": "label-guidelines"
            },
            {
                "title": "Indeterminate State",
                "level": 3,
                "id": "indeterminate-state"
            }
        ]
    },
    "data-table": {
        "title": "Data Table",
        "description": "The DataTable component displays structured data in a tabular format with sorting, filtering, pagination, and selection capabilities for managing large datasets efficiently.",
        "path": "components/data-table",
        "slug": "data-table",
        "category": "components",
        "tags": [
            "data-table",
            "component",
            "table",
            "pagination",
            "sorting",
            "filtering"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n[]', hintText: 'array' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'idField',\n                hintText: 'Field name to use as unique identifier for rows',\n            },\n            { content: 'keyof T', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'title',\n                hintText: 'Optional title displayed above the table',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'description',\n                hintText: 'Optional description displayed below the title',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'enableSearch',\n                hintText: 'Enable global search functionality',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'enableFiltering',\n                hintText: 'Enable column-based filtering',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'enableRowSelection',\n                hintText: 'Enable row selection with checkboxes',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'enableRowExpansion',\n                hintText: 'Enable expandable rows for additional content',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'pagination',\n                hintText: 'Pagination configuration object',\n            },\n            { content: 'PaginationConfig', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'isLoading',\n                hintText: 'Show loading state for async operations',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nColumnDefinition\n\nEach column in the columns array should have the following structure:\n\n ReactNode',\n                hintText: 'function',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nColumn Types\n\nThe DataTable supports various column types for different data presentations:\n\n\n\nFeatures\n\n- Flexible Column Types: Support for text, numbers, avatars, tags, progress bars, dates, and custom React elements\n- Advanced Sorting: Multi-column sorting with ascending/descending directions\n- Powerful Filtering: Column-based filters with multiple filter types (text, number, select, multiselect, date, boolean)\n- Global Search: Search across all columns or specific fields\n- Pagination: Client-side and server-side pagination with customizable page sizes\n- Row Selection: Single or multiple row selection with bulk actions\n- Row Expansion: Expandable rows for displaying additional content\n- Inline Editing: Editable cells with validation and save/cancel functionality\n- Column Management: Show/hide columns and adjust column order\n- Mobile Responsive: Optimized mobile view with column selection\n- Loading States: Built-in loading indicators for async operations\n- Export Functionality: Export selected rows to CSV\n- Custom Styling: Extensive theming with responsive design tokens\n- Accessibility: Full keyboard navigation and screen reader support\n\nUsage Examples\n\nBasic Data Table\n\nSimple table with text columns and sorting\n\n\n\nTable with Search and Filtering\n\nTable with global search and column filters\n\n\n\nTable with Row Selection and Bulk Actions\n\nTable with row selection and bulk action capabilities\n\n\n\nTable with Custom Column Types\n\nTable featuring avatar, tag, and progress columns\n\n\n\nTable with Row Expansion\n\nTable with expandable rows for additional details\n\n\n\nTable with Pagination\n\nTable with client-side pagination\n\n\n\nTable with Inline Editing\n\nTable with editable cells and save/cancel functionality\n\n\n\nServer-Side Operations\n\nTable with server-side pagination, sorting, and filtering\n\n\n\nComponent Tokens\n\nYou can style the DataTable component using the following tokens:\n\n\n\nBehavior\n\nSorting\n\n- Single Column: Click column headers to sort by that column\n- Direction Toggle: Click again to toggle between ascending/descending\n- Multiple Columns: Hold Shift while clicking for multi-column sorting\n- Sort Indicators: Visual arrows show current sort direction\n\nFiltering\n\n- Column Filters: Each column can have its own filter based on data type\n- Filter Types: Text, number, select, multiselect, date, boolean, and slider filters\n- Global Search: Searches across all visible columns\n- Filter Combination: Multiple filters work together with AND logic\n\nPagination\n\n- Page Navigation: Previous/Next buttons and direct page selection\n- Page Size: Customizable rows per page with dropdown selector\n- Server-Side: Supports server-side pagination for large datasets\n- URL Sync: Optional URL synchronization for bookmarkable states\n\nRow Selection\n\n- Single Selection: Click row for single selection\n- Multiple Selection: Checkbox column for multiple row selection\n- Select All: Header checkbox to select/deselect all visible rows\n- Bulk Actions: Actions that operate on selected rows\n\nMobile Responsiveness\n\n- Column Management: Mobile drawer for showing/hiding columns\n- Horizontal Scroll: Smooth scrolling for wide tables\n- Touch Friendly: Large touch targets for mobile interaction\n- Responsive Design: Adapts layout based on screen size\n\nAccessibility\n\n- Keyboard Navigation: Full keyboard navigation support with arrow keys\n- Screen Reader: Proper ARIA labels and roles for screen readers\n- Focus Management: Clear focus indicators and logical tab order\n- Sort Announcements: Screen reader announcements for sort changes\n- Filter Labels: Descriptive labels for all filter controls\n- Loading States: Accessible loading indicators with proper announcements",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n[]', hintText: 'array' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'idField',...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "ColumnDefinition",
                "level": 2,
                "id": "columndefinition"
            },
            {
                "title": "Column Types",
                "level": 2,
                "id": "column-types"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Data Table",
                "level": 3,
                "id": "basic-data-table"
            },
            {
                "title": "Table with Search and Filtering",
                "level": 3,
                "id": "table-with-search-and-filtering"
            },
            {
                "title": "Table with Row Selection and Bulk Actions",
                "level": 3,
                "id": "table-with-row-selection-and-bulk-actions"
            },
            {
                "title": "Table with Custom Column Types",
                "level": 3,
                "id": "table-with-custom-column-types"
            },
            {
                "title": "Table with Row Expansion",
                "level": 3,
                "id": "table-with-row-expansion"
            },
            {
                "title": "Table with Pagination",
                "level": 3,
                "id": "table-with-pagination"
            },
            {
                "title": "Table with Inline Editing",
                "level": 3,
                "id": "table-with-inline-editing"
            },
            {
                "title": "Server-Side Operations",
                "level": 3,
                "id": "server-side-operations"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Sorting",
                "level": 3,
                "id": "sorting"
            },
            {
                "title": "Filtering",
                "level": 3,
                "id": "filtering"
            },
            {
                "title": "Pagination",
                "level": 3,
                "id": "pagination"
            },
            {
                "title": "Row Selection",
                "level": 3,
                "id": "row-selection"
            },
            {
                "title": "Mobile Responsiveness",
                "level": 3,
                "id": "mobile-responsiveness"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            }
        ]
    },
    "menu": {
        "title": "Menu",
        "description": "The Menu component provides dropdown navigation and action lists with support for grouping, search functionality, submenus, and various positioning options for organizing application functions.",
        "path": "components/menu",
        "slug": "menu",
        "category": "components",
        "tags": [
            "menu",
            "component",
            "navigation",
            "dropdown",
            "popover",
            "actions"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'asModal',\n                hintText: 'Whether to render the menu as a modal on mobile',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'alignment',\n                hintText: 'How the menu aligns relative to the trigger',\n            },\n            { content: 'MenuAlignment', hintText: 'enum' },\n            { content: 'MenuAlignment.CENTER' },\n        ],\n        [\n            {\n                content: 'side',\n                hintText: 'Which side of the trigger the menu appears on',\n            },\n            { content: 'MenuSide', hintText: 'enum' },\n            { content: 'MenuSide.BOTTOM' },\n        ],\n        [\n            {\n                content: 'sideOffset',\n                hintText: 'Distance in pixels from the trigger',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '8' },\n        ],\n        [\n            {\n                content: 'alignOffset',\n                hintText: 'Offset for fine-tuning alignment',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '0' },\n        ],\n        [\n            {\n                content: 'collisonBoundaryRef',\n                hintText: 'Element(s) to use as collision boundary',\n            },\n            { content: 'Element | null | Array', hintText: 'element' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nData Types\n\nMenuV2GroupType\n\nStructure for grouping menu items:\n\n\n\nMenuItemV2Type\n\nStructure for individual menu items:\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'subMenu',\n                hintText: 'Nested menu items for creating submenus',\n            },\n            { content: 'MenuItemV2Type[]', hintText: 'array' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Flexible Positioning: 4 sides and 3 alignment options for optimal placement\n- Grouped Items: Organize menu items into labeled groups with optional separators\n- Search Functionality: Built-in search to filter menu items by label\n- Multiple Content Slots: 4 content slots per item for icons, badges, and additional content\n- Action Variants: Special styling for primary and danger actions\n- Submenu Support: Nested menu items for hierarchical navigation\n- Controlled/Uncontrolled: Support for both controlled and uncontrolled open states\n- Modal Mode: Renders as modal on mobile devices for better UX\n- Collision Detection: Automatic repositioning to stay within viewport\n- Disabled States: Individual menu items can be disabled\n- Custom Sizing: Configurable width and height constraints\n- Accessibility First: Full keyboard navigation and screen reader support\n\nUsage Examples\n\nBasic Action Menu\n\nSimple menu with common actions\n\n\n\nMenu with Search\n\nMenu with search functionality for filtering\n\n\n\nGrouped Menu with Separators\n\nMenu with multiple groups and separators\n\n\n\nMenu with Custom Positioning\n\nMenu with specific positioning and offsets\n\n\n\nControlled Menu\n\nMenu with controlled open state\n\n\n\nMenu with Submenus\n\nMenu with nested submenu items\n\n\n\nMobile Modal Menu\n\nMenu that renders as modal on mobile devices\n\n\n\nMenu with Status Items\n\nMenu items with additional status information\n\n\n\nComponent Tokens\n\nYou can style the Menu component using the following tokens:\n\n\n\nBehavior\n\nPositioning Logic\n- Side: Menu appears on specified side of trigger (top, right, bottom, left)\n- Alignment: Menu aligns to start, center, or end of trigger\n- Collision Detection: Automatically repositions if menu would overflow viewport\n- Offsets: Fine-tune positioning with side and align offsets\n\nSearch Functionality\n- Live Filtering: Menu items filter as user types\n- Label Matching: Searches both main label and subLabel text\n- Case Insensitive: Search is not case sensitive\n- Group Filtering: Empty groups are hidden when all items are filtered out\n\nInteraction Patterns\n- Click to Open: Trigger click opens the menu\n- Click Outside: Clicking outside closes the menu\n- Escape Key: Escape key closes the menu\n- Item Selection: Clicking menu item executes action and closes menu\n\nMobile Behavior\n- Modal Mode: When asModal={true}, renders as full-screen modal on mobile\n- Touch Interactions: Optimized for touch interactions\n- Responsive Sizing: Adapts to screen size constraints\n\nAccessibility\n\n- Keyboard Navigation: Full keyboard support with arrow keys, Enter, and Escape\n- Focus Management: Proper focus management when opening/closing menu\n- Screen Reader Support: ARIA labels and proper semantic structure\n- ARIA Compliance: Uses aria-expanded, aria-haspopup, and role attributes\n- High Contrast: Supports high contrast mode and custom color schemes\n- Tab Navigation: Proper tab order through menu items\n\nEnums\n\nMenuAlignment\n\n\n\nMenuSide\n\n\n\nMenuItemV2Variant\n\n\n\nMenuItemV2ActionType\n\n\n\nBest Practices\n\nMenu Organization\n- Group Related Items: Use groups to organize related functionality\n- Logical Order: Place most common actions at the top\n- Dangerous Actions: Use danger action type for destructive actions\n- Clear Labels: Use descriptive labels that clearly indicate the action\n\nSearch Implementation\n- Enable for Long Lists: Use search when menu has many items\n- Meaningful Placeholder: Provide helpful search placeholder text\n- Consider Performance: Search filters client-side, suitable for moderate lists\n\nPositioning Guidelines\n- Consider Context: Choose side and alignment based on trigger position\n- Avoid Overflow: Ensure menu doesn't extend beyond viewport\n- Mobile Considerations: Use modal mode for complex menus on mobile",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'asMo...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Data Types",
                "level": 2,
                "id": "data-types"
            },
            {
                "title": "MenuV2GroupType",
                "level": 3,
                "id": "menuv2grouptype"
            },
            {
                "title": "MenuItemV2Type",
                "level": 3,
                "id": "menuitemv2type"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Action Menu",
                "level": 3,
                "id": "basic-action-menu"
            },
            {
                "title": "Menu with Search",
                "level": 3,
                "id": "menu-with-search"
            },
            {
                "title": "Grouped Menu with Separators",
                "level": 3,
                "id": "grouped-menu-with-separators"
            },
            {
                "title": "Menu with Custom Positioning",
                "level": 3,
                "id": "menu-with-custom-positioning"
            },
            {
                "title": "Controlled Menu",
                "level": 3,
                "id": "controlled-menu"
            },
            {
                "title": "Menu with Submenus",
                "level": 3,
                "id": "menu-with-submenus"
            },
            {
                "title": "Mobile Modal Menu",
                "level": 3,
                "id": "mobile-modal-menu"
            },
            {
                "title": "Menu with Status Items",
                "level": 3,
                "id": "menu-with-status-items"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Positioning Logic",
                "level": 3,
                "id": "positioning-logic"
            },
            {
                "title": "Search Functionality",
                "level": 3,
                "id": "search-functionality"
            },
            {
                "title": "Interaction Patterns",
                "level": 3,
                "id": "interaction-patterns"
            },
            {
                "title": "Mobile Behavior",
                "level": 3,
                "id": "mobile-behavior"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "MenuAlignment",
                "level": 3,
                "id": "menualignment"
            },
            {
                "title": "MenuSide",
                "level": 3,
                "id": "menuside"
            },
            {
                "title": "MenuItemV2Variant",
                "level": 3,
                "id": "menuitemv2variant"
            },
            {
                "title": "MenuItemV2ActionType",
                "level": 3,
                "id": "menuitemv2actiontype"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "Menu Organization",
                "level": 3,
                "id": "menu-organization"
            },
            {
                "title": "Search Implementation",
                "level": 3,
                "id": "search-implementation"
            },
            {
                "title": "Positioning Guidelines",
                "level": 3,
                "id": "positioning-guidelines"
            }
        ]
    },
    "modal": {
        "title": "Modal",
        "description": "The Modal component creates overlay dialogs that focus user attention on specific content or actions, with backdrop blur, animations, mobile drawer support, and extensive customization options.",
        "path": "components/modal",
        "slug": "modal",
        "category": "components",
        "tags": ["modal", "component", "dialog", "overlay", "drawer", "popup"],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'title',\n                hintText: 'The title displayed in the modal header',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'subtitle',\n                hintText: 'Optional subtitle displayed below the title',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'children',\n                hintText: 'The content to display in the modal body',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'primaryAction',\n                hintText: 'Primary action button configuration',\n            },\n            { content: 'ModalButtonAction', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'secondaryAction',\n                hintText: 'Secondary action button configuration',\n            },\n            { content: 'ModalButtonAction', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'className',\n                hintText: 'Additional CSS class for the modal container',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'showCloseButton',\n                hintText: 'Whether to show the X close button in header',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n        [\n            {\n                content: 'showHeader',\n                hintText: 'Whether to display the modal header section',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n        [\n            {\n                content: 'showFooter',\n                hintText: 'Whether to display the modal footer section',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n        [\n            {\n                content: 'closeOnBackdropClick',\n                hintText: 'Whether clicking the backdrop closes the modal',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'customHeader',\n                hintText: 'Custom React component to replace the default header',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'customFooter',\n                hintText: 'Custom React component to replace the default footer',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'headerRightSlot',\n                hintText: 'Additional content displayed in the header right area',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'showDivider',\n                hintText: 'Whether to show divider line below header',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'minWidth',\n                hintText: 'Minimum width of the modal',\n            },\n            { content: 'string', hintText: 'CSS value' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'useDrawerOnMobile',\n                hintText: 'Whether to use drawer style on mobile devices',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nData Types\n\nModalButtonAction\n\nAction buttons use the Button component configuration:\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the button is disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'isLoading',\n                hintText: 'Whether the button shows loading state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'leadingIcon',\n                hintText: 'Icon displayed before the button text',\n            },\n            { content: 'React.ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'trailingIcon',\n                hintText: 'Icon displayed after the button text',\n            },\n            { content: 'React.ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Overlay Management: Full-screen overlay with backdrop blur and click-to-close options\n- Responsive Design: Automatic mobile drawer mode for better mobile experience\n- Flexible Actions: Primary and secondary actions with full Button component configuration\n- Custom Layouts: Support for custom headers, footers, and header right slots\n- Scroll Lock: Automatically prevents body scroll when modal is open\n- Accessibility First: Full keyboard navigation, focus management, and ARIA compliance\n- Animation Support: Smooth enter/exit animations with backdrop transitions\n- Header Control: Show/hide header, dividers, and close button as needed\n- Footer Control: Show/hide footer or replace with custom footer content\n- Size Control: Configurable minimum width and responsive sizing\n- Mobile Optimization: Drawer-style presentation on mobile devices\n- Backdrop Interaction: Configurable backdrop click behavior\n\nUsage Examples\n\nBasic Confirmation Modal\n\nSimple modal for confirming actions\n\n\n\nForm Modal with Loading State\n\nModal containing a form with loading action\n\n\n\nModal without Footer\n\nContent-only modal without action buttons\n\n\n\nModal with Custom Header\n\nModal with custom header content and right slot\n\n\n\nMobile Drawer Modal\n\nModal that becomes a drawer on mobile\n\n\n\nModal with Custom Footer\n\nModal with completely custom footer\n\n\n\nLarge Content Modal\n\nModal with minimum width and scrollable content\n\n\n\nModal with Icons in Actions\n\nModal with icons in action buttons\n\n\n\nCompletely Custom Modal\n\nModal with custom header and no default styling\n\n\n\nComponent Tokens\n\nYou can style the Modal component using the following tokens:\n\n\n\nBehavior\n\nModal Lifecycle\n- Open Animation: Smooth fade-in animation for backdrop and modal content\n- Close Animation: Fade-out animation when closing\n- Scroll Lock: Body scroll is locked when modal is open\n- Focus Management: Focus is trapped within the modal\n\nInteraction Patterns\n- Backdrop Click: Configurable backdrop click-to-close behavior\n- Escape Key: Escape key closes the modal by default\n- Close Button: Optional X button in header for closing\n- Action Buttons: Primary and secondary actions in footer\n\nMobile Behavior\n- Responsive Layout: Adapts to smaller screens automatically\n- Drawer Mode: Optional drawer-style presentation on mobile\n- Touch Interactions: Optimized for touch interactions\n- Safe Areas: Respects mobile safe areas and notches\n\nContent Management\n- Scrollable Content: Content area scrolls when content exceeds viewport\n- Header Pinning: Header stays fixed when content scrolls\n- Footer Pinning: Footer stays fixed at bottom\n- Responsive Sizing: Modal adapts to content size with constraints\n\nAccessibility\n\n- Focus Management: Focus is trapped within modal and restored on close\n- Keyboard Navigation: Full keyboard support with Tab, Shift+Tab, and Escape\n- Screen Reader Support: Proper ARIA roles, labels, and live regions\n- ARIA Compliance: Uses role=\"dialog\", aria-modal, and aria-labelledby\n- High Contrast: Supports high contrast mode and custom color schemes\n- Motion Preferences: Respects user's reduced motion preferences\n\nBest Practices\n\nWhen to Use Modals\n- Important Decisions: For critical actions that need user confirmation\n- Form Dialogs: For forms that interrupt the main workflow\n- Information Display: For detailed information that needs focus\n- Error Messages: For critical error messages that need attention\n\nModal Design Guidelines\n- Clear Purpose: Modal should have a clear, single purpose\n- Concise Content: Keep content focused and concise\n- Clear Actions: Action buttons should clearly indicate what will happen\n- Escape Routes: Always provide a way to close the modal\n\nMobile Considerations\n- Use Drawer Mode: Enable drawer mode for better mobile experience\n- Touch Targets: Ensure buttons are large enough for touch interaction\n- Content Length: Keep content length appropriate for mobile screens\n- Safe Areas: Consider mobile safe areas when positioning content\n\nAction Button Guidelines\n- Primary Action: Use for the main action user should take\n- Secondary Action: Use for alternative or cancel actions\n- Dangerous Actions: Use danger button type for destructive actions\n- Loading States: Show loading state for async operations",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'titl...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Data Types",
                "level": 2,
                "id": "data-types"
            },
            {
                "title": "ModalButtonAction",
                "level": 3,
                "id": "modalbuttonaction"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Confirmation Modal",
                "level": 3,
                "id": "basic-confirmation-modal"
            },
            {
                "title": "Form Modal with Loading State",
                "level": 3,
                "id": "form-modal-with-loading-state"
            },
            {
                "title": "Modal without Footer",
                "level": 3,
                "id": "modal-without-footer"
            },
            {
                "title": "Modal with Custom Header",
                "level": 3,
                "id": "modal-with-custom-header"
            },
            {
                "title": "Mobile Drawer Modal",
                "level": 3,
                "id": "mobile-drawer-modal"
            },
            {
                "title": "Modal with Custom Footer",
                "level": 3,
                "id": "modal-with-custom-footer"
            },
            {
                "title": "Large Content Modal",
                "level": 3,
                "id": "large-content-modal"
            },
            {
                "title": "Modal with Icons in Actions",
                "level": 3,
                "id": "modal-with-icons-in-actions"
            },
            {
                "title": "Completely Custom Modal",
                "level": 3,
                "id": "completely-custom-modal"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Modal Lifecycle",
                "level": 3,
                "id": "modal-lifecycle"
            },
            {
                "title": "Interaction Patterns",
                "level": 3,
                "id": "interaction-patterns"
            },
            {
                "title": "Mobile Behavior",
                "level": 3,
                "id": "mobile-behavior"
            },
            {
                "title": "Content Management",
                "level": 3,
                "id": "content-management"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use Modals",
                "level": 3,
                "id": "when-to-use-modals"
            },
            {
                "title": "Modal Design Guidelines",
                "level": 3,
                "id": "modal-design-guidelines"
            },
            {
                "title": "Mobile Considerations",
                "level": 3,
                "id": "mobile-considerations"
            },
            {
                "title": "Action Button Guidelines",
                "level": 3,
                "id": "action-button-guidelines"
            }
        ]
    },
    "popover": {
        "title": "Popover",
        "description": "The Popover component displays floating content that appears when triggered by a user action, providing contextual information, forms, or actions without navigating away from the current page.",
        "path": "components/popover",
        "slug": "popover",
        "category": "components",
        "tags": [
            "popover",
            "component",
            "floating",
            "contextual",
            "overlay",
            "tooltip",
            "dropdown",
            "positioning",
            "radix",
            "actions"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'open',\n                hintText: 'Controlled state for the popover visibility',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'asModal',\n                hintText: 'Whether the popover should behave as a modal dialog',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'primaryAction',\n                hintText: 'Configuration for the primary action button in footer',\n            },\n            { content: 'PopoverActionType', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'secondaryAction',\n                hintText: 'Configuration for the secondary action button in footer',\n            },\n            { content: 'PopoverActionType', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'sideOffset',\n                hintText: 'Distance in pixels between the popover and trigger element',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '8' },\n        ],\n        [\n            {\n                content: 'side',\n                hintText: 'Which side of the trigger the popover appears on',\n            },\n            {\n                content: \"'top' | 'right' | 'bottom' | 'left'\",\n                hintText: 'union type',\n            },\n            { content: \"'bottom'\" },\n        ],\n        [\n            {\n                content: 'align',\n                hintText: 'How the popover aligns relative to the trigger element',\n            },\n            { content: \"'start' | 'center' | 'end'\", hintText: 'union type' },\n            { content: \"'center'\" },\n        ],\n        [\n            {\n                content: 'alignOffset',\n                hintText: 'Offset in pixels for fine-tuning the alignment position',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '0' },\n        ],\n        [\n            {\n                content: 'width',\n                hintText: 'Fixed width of the popover in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'minWidth',\n                hintText: 'Minimum width of the popover in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '300' },\n        ],\n        [\n            {\n                content: 'maxWidth',\n                hintText: 'Maximum width of the popover in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '400' },\n        ],\n        [\n            {\n                content: 'height',\n                hintText: 'Fixed height of the popover in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'minHeight',\n                hintText: 'Minimum height of the popover in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'maxHeight',\n                hintText: 'Maximum height of the popover in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'zIndex',\n                hintText: 'Z-index value for the popover overlay layer',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '1000' },\n        ],\n        [\n            {\n                content: 'size',\n                hintText: 'The size variant affecting typography and spacing',\n            },\n            { content: 'PopoverSize', hintText: 'enum' },\n            { content: 'PopoverSize.MEDIUM' },\n        ],\n        [\n            {\n                content: 'onClose',\n                hintText: 'Callback function called when the popover is closed',\n            },\n            { content: '() => void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'shadow',\n                hintText: 'Box shadow variant for the popover',\n            },\n            { content: \"'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full'\", hintText: 'union type' },\n            { content: \"'lg'\" },\n        ],\n        [\n            {\n                content: 'useDrawerOnMobile',\n                hintText: 'Whether to render as drawer on mobile devices',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nData Types\n\nPopoverActionType\n\nAction buttons in popovers use the Button component configuration, excluding certain properties:\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the button is disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'loading',\n                hintText: 'Whether the button shows loading state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'size',\n                hintText: 'Size of the button',\n            },\n            { content: 'ButtonSize', hintText: 'enum' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'leadingIcon',\n                hintText: 'Icon displayed before the button text',\n            },\n            { content: 'React.ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'trailingIcon',\n                hintText: 'Icon displayed after the button text',\n            },\n            { content: 'React.ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Flexible Positioning: 4 sides (top, right, bottom, left) with 3 alignment options (start, center, end)\n- Size Variants: Two size options (small, medium) for different content types\n- Action Buttons: Primary and secondary action buttons with full Button component support\n- Header Management: Optional header with title and description text\n- Close Button: Optional X button for dismissing the popover\n- Controlled State: Support for both controlled and uncontrolled open states\n- Modal Behavior: Option to render as modal dialog for critical interactions\n- Custom Dimensions: Configurable width, height, and size constraints\n- Mobile Optimization: Automatic drawer mode on mobile devices for better UX\n- Shadow Options: 7 shadow variants for different visual emphasis levels\n- Built on Radix UI: Leverages Radix UI Popover for robust accessibility and positioning\n- Collision Detection: Automatic repositioning to stay within viewport boundaries\n- Custom Styling: Comprehensive component token system for styling customization\n- Responsive Design: Adapts to different screen sizes and device types\n- Accessibility First: Full keyboard navigation, focus management, and screen reader support\n\nUsage Examples\n\nBasic Information Popover\n\nSimple popover displaying contextual information\n\n\n\nConfirmation Popover\n\nPopover for confirming destructive actions\n\n\n\nForm Popover\n\nPopover containing a form for quick actions\n\n\n\nSmall Quick Actions Popover\n\nCompact popover for quick actions\n\n\n\nPositioned Popover\n\nPopover with specific positioning and alignment\n\n\n\nControlled State Popover\n\nPopover with external state management\n\n\n\nContent-Only Popover\n\nPopover without header for custom layouts\n\n\n\nModal-Style Popover\n\nPopover that behaves as a modal for critical interactions\n\n\n\nComponent Tokens\n\nYou can style the Popover component using the following tokens:\n\n\n\nBehavior\n\nPositioning Logic\n- Side Placement: Popover appears on specified side of trigger (top, right, bottom, left)\n- Alignment Options: Aligns to start, center, or end of trigger element\n- Collision Detection: Automatically repositions if popover would overflow viewport\n- Offset Controls: Fine-tune positioning with side and align offsets\n\nInteraction Patterns\n- Click to Open: Trigger click opens the popover\n- Click Outside: Clicking outside the popover closes it\n- Escape Key: Escape key closes the popover\n- Action Execution: Action buttons execute their onClick handlers and close popover\n\nState Management\n- Controlled Mode: Use open and onOpenChange props for external state control\n- Uncontrolled Mode: Component manages its own open/closed state internally\n- Close Events: Multiple ways to close including actions, close button, escape key, and backdrop click\n\nMobile Behavior\n- Drawer Mode: When useDrawerOnMobile is true, renders as drawer on mobile devices\n- Touch Interactions: Optimized for touch interactions and gestures\n- Responsive Sizing: Adapts to mobile screen constraints and safe areas\n\nContent Management\n- Flexible Content: Supports any React content in children\n- Header Control: Optional header with title and description\n- Footer Actions: Optional action buttons in footer area\n- Custom Padding: Automatic padding handling with override options for custom content\n\nAccessibility\n\n- Focus Management: Focus is trapped within popover when open and restored on close\n- Keyboard Navigation: Full keyboard support with Tab, Shift+Tab, and Escape keys\n- Screen Reader Support: Proper ARIA roles, labels, and live regions\n- ARIA Compliance: Uses aria-expanded, aria-haspopup, and proper dialog semantics\n- High Contrast: Supports high contrast mode and respects user color preferences\n- Motion Preferences: Respects user's reduced motion preferences for animations\n\nEnums\n\nPopoverSize\n\n\n\nBest Practices\n\nWhen to Use Popovers\n- Contextual Information: For displaying additional information without navigation\n- Quick Actions: For forms or actions that don't require full page navigation\n- Settings and Preferences: For configuration options that are secondary to main flow\n- Help and Documentation: For providing contextual help or feature explanations\n\nPopover Design Guidelines\n- Clear Purpose: Each popover should have a focused, single purpose\n- Appropriate Trigger: Use clear, descriptive triggers that indicate popover content\n- Concise Content: Keep content focused and avoid overwhelming users\n- Consistent Positioning: Use consistent positioning patterns throughout your application\n\nContent Guidelines\n- Scannable Layout: Organize content with clear hierarchy and spacing\n- Action Clarity: Make action buttons clearly indicate what will happen\n- Error Handling: Provide clear feedback for form validation and errors\n- Loading States: Show loading states for async operations in actions\n\nMobile Considerations\n- Use Drawer Mode: Enable drawer mode for better mobile experience\n- Touch Targets: Ensure interactive elements meet minimum touch target sizes\n- Content Length: Keep content appropriate for mobile screen sizes\n- Safe Areas: Consider mobile safe areas and keyboard interactions",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'open...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Data Types",
                "level": 2,
                "id": "data-types"
            },
            {
                "title": "PopoverActionType",
                "level": 3,
                "id": "popoveractiontype"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Information Popover",
                "level": 3,
                "id": "basic-information-popover"
            },
            {
                "title": "Confirmation Popover",
                "level": 3,
                "id": "confirmation-popover"
            },
            {
                "title": "Form Popover",
                "level": 3,
                "id": "form-popover"
            },
            {
                "title": "Small Quick Actions Popover",
                "level": 3,
                "id": "small-quick-actions-popover"
            },
            {
                "title": "Positioned Popover",
                "level": 3,
                "id": "positioned-popover"
            },
            {
                "title": "Controlled State Popover",
                "level": 3,
                "id": "controlled-state-popover"
            },
            {
                "title": "Content-Only Popover",
                "level": 3,
                "id": "content-only-popover"
            },
            {
                "title": "Modal-Style Popover",
                "level": 3,
                "id": "modal-style-popover"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Positioning Logic",
                "level": 3,
                "id": "positioning-logic"
            },
            {
                "title": "Interaction Patterns",
                "level": 3,
                "id": "interaction-patterns"
            },
            {
                "title": "State Management",
                "level": 3,
                "id": "state-management"
            },
            {
                "title": "Mobile Behavior",
                "level": 3,
                "id": "mobile-behavior"
            },
            {
                "title": "Content Management",
                "level": 3,
                "id": "content-management"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "PopoverSize",
                "level": 3,
                "id": "popoversize"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use Popovers",
                "level": 3,
                "id": "when-to-use-popovers"
            },
            {
                "title": "Popover Design Guidelines",
                "level": 3,
                "id": "popover-design-guidelines"
            },
            {
                "title": "Content Guidelines",
                "level": 3,
                "id": "content-guidelines"
            },
            {
                "title": "Mobile Considerations",
                "level": 3,
                "id": "mobile-considerations"
            }
        ]
    },
    "radio": {
        "title": "Radio",
        "description": "The Radio component allows users to select a single option from a group of mutually exclusive choices, with proper form integration and accessibility support.",
        "path": "components/radio",
        "slug": "radio",
        "category": "components",
        "tags": [
            "radio",
            "component",
            "form",
            "input",
            "selection",
            "group",
            "choice",
            "mutually-exclusive",
            "keyboard-navigation",
            "accessibility"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\nRadio Props\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText:\n                    'Whether the radio button is disabled and non-interactive',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'required',\n                hintText:\n                    'Whether the radio button is required (shows asterisk)',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'error',\n                hintText: 'Whether the radio button is in an error state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'size',\n                hintText: 'The size variant of the radio button',\n            },\n            { content: 'RadioSize', hintText: 'enum' },\n            { content: 'RadioSize.MEDIUM' },\n        ],\n        [\n            {\n                content: 'children',\n                hintText: 'The label text for the radio button',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'subtext',\n                hintText: 'Optional descriptive text displayed below the label',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'slot',\n                hintText: 'Optional element to display alongside the label',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'name',\n                hintText: 'The name attribute for form grouping',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nRadioGroup Props\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether all radio buttons in the group are disabled',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Size Variants: Two size options (small, medium) for different contexts\n- Group Management: Automatic mutual exclusivity within RadioGroup containers\n- Rich Content Support: Optional subtext and slot elements for enhanced context\n- State Management: Support for controlled and uncontrolled modes\n- Form Integration: Native HTML radio input with proper form binding\n- Visual States: Required field indicators, error states, and disabled states\n- Keyboard Navigation: Full arrow key navigation within groups with auto-selection\n- Individual Controls: Can be used standalone outside of groups\n- Automatic IDs: Generated unique IDs when not provided\n- Accessibility First: ARIA compliance, screen reader support, and proper semantics\n- Custom Styling: Comprehensive token system for visual customization\n- Focus Management: Clear focus indicators and keyboard interaction patterns\n- Error Handling: Visual and programmatic error state communication\n- Responsive Design: Consistent behavior across different screen sizes\n- Type Safety: Full TypeScript support with proper type definitions\n\nUsage Examples\n\nBasic Radio Selection\n\nSimple radio group for basic option selection\n\n\n\nRadio with Enhanced Content\n\nRadio buttons with descriptive text and visual elements\n\n\n\nSize Variants\n\nRadio buttons in different sizes for various contexts\n\n\n\nForm Validation States\n\nRadio buttons with validation and required states\n\n\n\nPricing Options\n\nRadio group for subscription plan selection\n\n\n\nControlled vs Uncontrolled\n\nDifferent state management approaches for radio groups\n\n\n\nIndividual Radio Usage\n\nStandalone radio buttons for specific use cases\n\n\n\nComplex Configuration Form\n\nComplete configuration form with multiple radio groups\n\n\n\nDisabled State Management\n\nRadio groups with conditional disabling\n\n\n\nComponent Tokens\n\nYou can style the Radio component using the following tokens:\n\n\n\nBehavior\n\nSelection Behavior\n- Mutual Exclusivity: Only one radio button can be selected within a group\n- Group Management: RadioGroup automatically manages selection state\n- Value Tracking: Selected value is tracked and propagated through onChange callbacks\n- Default Selection: Support for default selected values in uncontrolled mode\n\nKeyboard Navigation\n- Arrow Keys: Navigate between radio buttons within a group\n- Auto-Selection: Arrow key navigation automatically selects the focused radio\n- Tab Behavior: Tab moves focus between radio groups, not individual radios\n- Space/Enter: Activates the currently focused radio button\n\nState Management\n- Controlled Mode: External state management with value and onChange props\n- Uncontrolled Mode: Internal state management with defaultValue prop\n- Individual Controls: Can be used standalone outside of groups\n- Validation Support: Built-in support for required and error states\n\nFocus Management\n- Group Focus: Only the selected radio (or first radio) in a group is focusable\n- Focus Indicators: Clear visual focus indicators for keyboard users\n- Focus Restoration: Focus is properly managed during dynamic updates\n- Skip Navigation: Proper tab order through radio groups\n\nContent Management\n- Label Association: Proper label association with radio inputs\n- Subtext Support: Optional descriptive text below main labels\n- Slot Content: Support for additional content like badges or icons\n- Required Indicators: Automatic asterisk display for required fields\n\nAccessibility\n\n- ARIA Compliance: Uses proper role=\"radiogroup\" and aria-checked attributes\n- Keyboard Navigation: Full keyboard support with arrow keys for navigation\n- Screen Reader Support: Proper announcements of state changes and group structure\n- Focus Management: Focus is trapped within radio groups during navigation\n- Label Association: Each radio is properly associated with its label\n- Group Semantics: Radio groups are announced as groups to screen readers\n- State Communication: Current selection and states are communicated to assistive technologies\n- Required Field Support: Required fields are announced to screen readers\n- Error State Support: Error states are communicated through ARIA attributes\n\nEnums\n\nRadioSize\n\n\n\nType Definitions\n\nRadioState\n\n\n\nRadioIndicatorState\n\n\n\nBest Practices\n\nWhen to Use Radio Buttons\n- Mutually Exclusive Choices: When users must select exactly one option from a list\n- Visible Options: When all options should be visible at once (typically 2-7 options)\n- Single Selection: When only one choice is allowed, unlike checkboxes\n- Form Controls: As part of forms where a selection is required\n\nRadio Group Design Guidelines\n- Clear Labels: Use descriptive labels that clearly explain each option\n- Logical Ordering: Order options logically (alphabetical, by importance, or frequency)\n- Default Selection: Consider providing a sensible default selection\n- Group Related Options: Keep related radio buttons together in groups\n\nContent Guidelines\n- Concise Labels: Keep radio button labels brief but descriptive\n- Helpful Subtext: Use subtext to provide additional context when needed\n- Consistent Formatting: Maintain consistent label and subtext formatting\n- Clear Hierarchy: Use typography and spacing to establish clear content hierarchy\n\nForm Integration\n- Validation: Implement proper validation for required radio groups\n- Error Messaging: Provide clear error messages for validation failures\n- Default Values: Set appropriate default values for better user experience\n- State Persistence: Consider persisting selections during form interactions",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\nRadio Props\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                c...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Radio Props",
                "level": 3,
                "id": "radio-props"
            },
            {
                "title": "RadioGroup Props",
                "level": 3,
                "id": "radiogroup-props"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Radio Selection",
                "level": 3,
                "id": "basic-radio-selection"
            },
            {
                "title": "Radio with Enhanced Content",
                "level": 3,
                "id": "radio-with-enhanced-content"
            },
            {
                "title": "Size Variants",
                "level": 3,
                "id": "size-variants"
            },
            {
                "title": "Form Validation States",
                "level": 3,
                "id": "form-validation-states"
            },
            {
                "title": "Pricing Options",
                "level": 3,
                "id": "pricing-options"
            },
            {
                "title": "Controlled vs Uncontrolled",
                "level": 3,
                "id": "controlled-vs-uncontrolled"
            },
            {
                "title": "Individual Radio Usage",
                "level": 3,
                "id": "individual-radio-usage"
            },
            {
                "title": "Complex Configuration Form",
                "level": 3,
                "id": "complex-configuration-form"
            },
            {
                "title": "Disabled State Management",
                "level": 3,
                "id": "disabled-state-management"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Selection Behavior",
                "level": 3,
                "id": "selection-behavior"
            },
            {
                "title": "Keyboard Navigation",
                "level": 3,
                "id": "keyboard-navigation"
            },
            {
                "title": "State Management",
                "level": 3,
                "id": "state-management"
            },
            {
                "title": "Focus Management",
                "level": 3,
                "id": "focus-management"
            },
            {
                "title": "Content Management",
                "level": 3,
                "id": "content-management"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "RadioSize",
                "level": 3,
                "id": "radiosize"
            },
            {
                "title": "Type Definitions",
                "level": 2,
                "id": "type-definitions"
            },
            {
                "title": "RadioState",
                "level": 3,
                "id": "radiostate"
            },
            {
                "title": "RadioIndicatorState",
                "level": 3,
                "id": "radioindicatorstate"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use Radio Buttons",
                "level": 3,
                "id": "when-to-use-radio-buttons"
            },
            {
                "title": "Radio Group Design Guidelines",
                "level": 3,
                "id": "radio-group-design-guidelines"
            },
            {
                "title": "Content Guidelines",
                "level": 3,
                "id": "content-guidelines"
            },
            {
                "title": "Form Integration",
                "level": 3,
                "id": "form-integration"
            }
        ]
    },
    "single-select": {
        "title": "Single Select",
        "description": "The SingleSelect component provides a dropdown selection interface for choosing a single option from a list, with search, keyboard navigation, and customizable styling options.",
        "path": "components/single-select",
        "slug": "single-select",
        "category": "components",
        "tags": [
            "single-select",
            "component",
            "form",
            "dropdown",
            "selection",
            "search",
            "keyboard-navigation",
            "positioning",
            "mobile-optimized",
            "accessibility"
        ],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'enableSearch',\n                hintText: 'Whether to show search input in the dropdown menu',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'searchPlaceholder',\n                hintText: 'Placeholder text for the search input field',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'slot',\n                hintText: 'Content displayed inside the trigger button (e.g., icons)',\n            },\n            { content: 'React.ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the select field is disabled and non-interactive',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'name',\n                hintText: 'Name attribute for form identification and submission',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'customTrigger',\n                hintText: 'Custom React element to replace the default trigger button',\n            },\n            { content: 'React.ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'useDrawerOnMobile',\n                hintText: 'Whether to render as drawer on mobile devices',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'true' },\n        ],\n        [\n            {\n                content: 'alignment',\n                hintText: 'How the dropdown menu aligns relative to the trigger',\n            },\n            { content: 'SelectMenuAlignment', hintText: 'enum' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'side',\n                hintText: 'Which side of the trigger the dropdown appears on',\n            },\n            { content: 'SelectMenuSide', hintText: 'enum' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'sideOffset',\n                hintText: 'Distance in pixels between trigger and dropdown',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'alignOffset',\n                hintText: 'Alignment offset in pixels for fine positioning',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'minWidth',\n                hintText: 'Minimum width of the dropdown menu in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'maxWidth',\n                hintText: 'Maximum width of the dropdown menu in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'maxHeight',\n                hintText: 'Maximum height of the dropdown menu in pixels',\n            },\n            { content: 'number', hintText: 'number' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'inline',\n                hintText: 'Whether the select renders inline without fixed height',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'onBlur',\n                hintText: 'Callback function called when the select loses focus',\n            },\n            { content: '() => void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'onFocus',\n                hintText: 'Callback function called when the select gains focus',\n            },\n            { content: '() => void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'error',\n                hintText: 'Whether the select is in an error state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'errorMessage',\n                hintText: 'Error message displayed when error is true',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nData Types\n\nSelectMenuGroupType\n\nStructure for organizing menu items into groups:\n\n\n\nSelectMenuItemType\n\nStructure for individual selectable items:\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'subMenu',\n                hintText: 'Nested menu items for creating hierarchical menus',\n            },\n            { content: 'SelectMenuItemType[]', hintText: 'array' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'tooltip',\n                hintText: 'Tooltip content displayed on hover',\n            },\n            { content: 'string | React.ReactNode', hintText: 'union type' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'tooltipProps',\n                hintText: 'Configuration options for the tooltip display',\n            },\n            { content: 'TooltipProps', hintText: 'object' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disableTruncation',\n                hintText: 'Whether to disable text truncation for long labels',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Size Variants: Three sizes (small, medium, large) for different interface densities\n- Visual Variants: Container and no-container styles for flexible integration\n- Search Functionality: Optional built-in search with customizable placeholder\n- Grouped Organization: Support for organizing items into labeled groups with separators\n- Rich Content Support: Multiple slot positions for icons, badges, and custom elements\n- Submenu Navigation: Hierarchical menu structure with nested item support\n- Form Integration: Complete form support with labels, validation, and error states\n- Mobile Optimization: Automatic drawer mode on mobile devices for better UX\n- Custom Triggers: Support for completely custom trigger elements\n- Flexible Positioning: 4 sides and 3 alignment options with offset controls\n- Tooltip Integration: Built-in tooltip support for menu items with configuration options\n- Keyboard Navigation: Full keyboard support with arrow keys and type-ahead search\n- Error Handling: Comprehensive error state management with custom error messages\n- Accessibility First: ARIA compliance, screen reader support, and focus management\n- Responsive Design: Adapts to different screen sizes and device types\n\nUsage Examples\n\nBasic Country Selection\n\nSimple select for country selection with flags\n\n\n\nUser Assignment with Rich Content\n\nSelect for user assignment with status indicators and profiles\n\n\n\nTechnology Stack Selection\n\nSelect for technology preferences with descriptions\n\n\n\nSize and Variant Comparisons\n\nDifferent sizes and styling variants\n\n\n\nForm Validation States\n\nSelect with validation and error handling\n\n\n\nCustom Trigger Example\n\nSelect with completely custom trigger element\n\n\n\nPositioning and Alignment\n\nSelect with custom positioning\n\n\n\nInline and Focus Management\n\nSelect with inline variant and focus handling\n\n\n\nComplete Project Setup Form\n\nComplex form with multiple interdependent selects\n\n\n\nComponent Tokens\n\nYou can style the SingleSelect component using the following tokens:\n\n\n\nBehavior\n\nSelection Behavior\n- Single Selection: Only one option can be selected at a time\n- Value Management: Selected value is controlled through props\n- Callback Execution: onSelect callback fires when selection changes\n- Auto-Close: Dropdown automatically closes after selection\n\nSearch Behavior\n- Live Filtering: Search filters options in real-time as user types\n- Label and SubLabel: Searches both main label and subLabel text\n- Case Insensitive: Search is not case sensitive\n- Group Filtering: Groups with no matching items are hidden\n\nKeyboard Navigation\n- Arrow Keys: Navigate through menu options\n- Enter/Space: Select the currently focused option\n- Escape: Close the dropdown menu\n- Type Ahead: Jump to options by typing first letters\n\nPositioning Logic\n- Auto-Positioning: Dropdown repositions to stay within viewport\n- Side Options: Can appear on top, bottom, left, or right of trigger\n- Alignment Control: Align to start, center, or end of trigger\n- Offset Adjustments: Fine-tune positioning with pixel offsets\n\nMobile Behavior\n- Drawer Mode: Renders as drawer on mobile devices when useDrawerOnMobile is true\n- Touch Optimization: Optimized for touch interactions\n- Responsive Sizing: Adapts to mobile screen constraints\n\nError State Management\n- Visual Indicators: Error styling applied to trigger and labels\n- Error Messages: Displays error message below the field\n- State Synchronization: Error state clears when valid selection is made\n\nFocus Management\n- Trigger Focus: Focus is managed on the trigger element\n- Menu Focus: Focus moves through menu items during navigation\n- Focus Restoration: Focus returns to trigger when menu closes\n- Focus Events: onFocus and onBlur callbacks for external focus management\n\nAccessibility\n\n- ARIA Compliance: Full ARIA support with role=\"combobox\", aria-expanded, and aria-haspopup\n- Keyboard Navigation: Complete keyboard support with arrow keys, Enter, Escape, and Tab\n- Screen Reader Support: Proper announcements for state changes and selections\n- Focus Management: Focus is trapped within dropdown and restored properly\n- Label Association: Form labels are properly associated with the select trigger\n- Group Semantics: Menu groups are announced as groups to screen readers\n- Search Accessibility: Search functionality is accessible with proper ARIA attributes\n- Error Communication: Error states are communicated through ARIA attributes\n- Required Field Support: Required fields are announced to assistive technologies\n\nEnums\n\nSelectMenuSize\n\n\n\nSelectMenuVariant\n\n\n\nSelectMenuAlignment\n\n\n\nSelectMenuSide\n\n\n\nBest Practices\n\nWhen to Use SingleSelect\n- Option Selection: When users need to choose one option from multiple choices\n- Form Fields: As form controls where a specific selection is required\n- Settings: For configuration options and preferences\n- Data Filtering: For filtering or sorting data based on categories\n\nDesign Guidelines\n- Clear Labels: Use descriptive labels that clearly explain the purpose\n- Logical Grouping: Group related options together with meaningful group labels\n- Appropriate Sizing: Choose size based on interface density and importance\n- Consistent Patterns: Use consistent selection patterns throughout your application\n\nContent Guidelines\n- Concise Options: Keep option labels brief but descriptive\n- Helpful SubLabels: Use subLabels to provide additional context when needed\n- Logical Ordering: Order options logically (alphabetical, by frequency, or importance)\n- Search Support: Enable search for lists with many options\n\nForm Integration\n- Validation: Implement proper validation with clear error messages\n- Required Fields: Mark required fields clearly with asterisks\n- Help Text: Provide contextual help when selection criteria may be unclear\n- Default Values: Consider providing sensible default selections when appropriate\n\nMobile Considerations\n- Drawer Mode: Use drawer mode on mobile for better touch experience\n- Touch Targets: Ensure adequate touch target sizes for mobile devices\n- Search Functionality: Enable search for long option lists on mobile\n- Performance: Consider lazy loading for very large option sets",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'enab...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Data Types",
                "level": 2,
                "id": "data-types"
            },
            {
                "title": "SelectMenuGroupType",
                "level": 3,
                "id": "selectmenugrouptype"
            },
            {
                "title": "SelectMenuItemType",
                "level": 3,
                "id": "selectmenuitemtype"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Country Selection",
                "level": 3,
                "id": "basic-country-selection"
            },
            {
                "title": "User Assignment with Rich Content",
                "level": 3,
                "id": "user-assignment-with-rich-content"
            },
            {
                "title": "Technology Stack Selection",
                "level": 3,
                "id": "technology-stack-selection"
            },
            {
                "title": "Size and Variant Comparisons",
                "level": 3,
                "id": "size-and-variant-comparisons"
            },
            {
                "title": "Form Validation States",
                "level": 3,
                "id": "form-validation-states"
            },
            {
                "title": "Custom Trigger Example",
                "level": 3,
                "id": "custom-trigger-example"
            },
            {
                "title": "Positioning and Alignment",
                "level": 3,
                "id": "positioning-and-alignment"
            },
            {
                "title": "Inline and Focus Management",
                "level": 3,
                "id": "inline-and-focus-management"
            },
            {
                "title": "Complete Project Setup Form",
                "level": 3,
                "id": "complete-project-setup-form"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Behavior",
                "level": 2,
                "id": "behavior"
            },
            {
                "title": "Selection Behavior",
                "level": 3,
                "id": "selection-behavior"
            },
            {
                "title": "Search Behavior",
                "level": 3,
                "id": "search-behavior"
            },
            {
                "title": "Keyboard Navigation",
                "level": 3,
                "id": "keyboard-navigation"
            },
            {
                "title": "Positioning Logic",
                "level": 3,
                "id": "positioning-logic"
            },
            {
                "title": "Mobile Behavior",
                "level": 3,
                "id": "mobile-behavior"
            },
            {
                "title": "Error State Management",
                "level": 3,
                "id": "error-state-management"
            },
            {
                "title": "Focus Management",
                "level": 3,
                "id": "focus-management"
            },
            {
                "title": "Accessibility",
                "level": 2,
                "id": "accessibility"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "SelectMenuSize",
                "level": 3,
                "id": "selectmenusize"
            },
            {
                "title": "SelectMenuVariant",
                "level": 3,
                "id": "selectmenuvariant"
            },
            {
                "title": "SelectMenuAlignment",
                "level": 3,
                "id": "selectmenualignment"
            },
            {
                "title": "SelectMenuSide",
                "level": 3,
                "id": "selectmenuside"
            },
            {
                "title": "Best Practices",
                "level": 2,
                "id": "best-practices"
            },
            {
                "title": "When to Use SingleSelect",
                "level": 3,
                "id": "when-to-use-singleselect"
            },
            {
                "title": "Design Guidelines",
                "level": 3,
                "id": "design-guidelines"
            },
            {
                "title": "Content Guidelines",
                "level": 3,
                "id": "content-guidelines"
            },
            {
                "title": "Form Integration",
                "level": 3,
                "id": "form-integration"
            },
            {
                "title": "Mobile Considerations",
                "level": 3,
                "id": "mobile-considerations"
            }
        ]
    },
    "snackbar": {
        "title": "Snackbar",
        "description": "The Snackbar component displays brief, non-intrusive notifications to users about the result of an action, appearing temporarily at the bottom or top of the screen.",
        "path": "components/snackbar",
        "slug": "snackbar",
        "category": "components",
        "tags": ["snackbar", "component", "notification", "toast", "feedback"],
        "content": "Usage\n\n\n\nAPI Reference\n\nSnackbar Component\n\n\n\naddSnackbar Function\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'actionButton',\n                hintText: 'Optional action button configuration',\n            },\n            {\n                content: '{ label: string; onClick: () => void }',\n                hintText: 'object',\n            },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Four visual variants (info, success, warning, error)\n- Optional description text\n- Optional action button with custom label and handler\n- Auto-dismiss functionality\n- Manual close button\n- Accessible by default\n- Customizable styling through tokens\n- Built on Sonner toast library\n- Non-intrusive notifications\n\nUsage Examples\n\nBasic Snackbar\n\nSimple snackbar with just a header\n\n\n\nSnackbar with Description\n\nSnackbar with additional descriptive text\n\n\n\nSnackbar with Action Button\n\nSnackbar with a custom action button\n\n\n\nDifferent Variants\n\nSnackbars with different visual styles\n\n\n\nSnackbar with Close Handler\n\nSnackbar with custom close callback\n\n\n\nComplete Example\n\nFull example with all features\n\n\n\nComponent Tokens\n\nYou can style the snackbar component using the following tokens:\n\n\n\nEnums\n\nSnackbarVariant\n\n\n\nSetup Requirements\n\nTo use the Snackbar component, you need to:\n\n1. Add the Snackbar component to your app root:\n\n\n\n2. Import the addSnackbar function where needed:\n\n\n\n3. Call addSnackbar with your message options:\n\n\n\nThe snackbar will automatically appear and dismiss itself after a few seconds, or when the user clicks the close button.",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\nSnackbar Component\n\n\n\naddSnackbar Function\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Snackbar Component",
                "level": 3,
                "id": "snackbar-component"
            },
            {
                "title": "addSnackbar Function",
                "level": 3,
                "id": "addsnackbar-function"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Snackbar",
                "level": 3,
                "id": "basic-snackbar"
            },
            {
                "title": "Snackbar with Description",
                "level": 3,
                "id": "snackbar-with-description"
            },
            {
                "title": "Snackbar with Action Button",
                "level": 3,
                "id": "snackbar-with-action-button"
            },
            {
                "title": "Different Variants",
                "level": 3,
                "id": "different-variants"
            },
            {
                "title": "Snackbar with Close Handler",
                "level": 3,
                "id": "snackbar-with-close-handler"
            },
            {
                "title": "Complete Example",
                "level": 3,
                "id": "complete-example"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "SnackbarVariant",
                "level": 3,
                "id": "snackbarvariant"
            },
            {
                "title": "Setup Requirements",
                "level": 2,
                "id": "setup-requirements"
            }
        ]
    },
    "split-tag": {
        "title": "Split Tag",
        "description": "The SplitTag component is a specialized tag variant that can be split into multiple sections, useful for displaying complex labels or status indicators.",
        "path": "components/split-tag",
        "slug": "split-tag",
        "category": "components",
        "tags": ["split-tag", "component", "label"],
        "content": "Usage\n\n\n\nAPI Reference\n\n\n\nTagConfig Properties\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n    ]}\n    isHoverable={true}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Split design with primary and secondary sections\n- Multiple color schemes (neutral, primary, success, error, warning, purple)\n- Three visual variants (no fill, attentive, subtle)\n- Four sizes (xs, sm, md, lg)\n- Two shapes (rounded, squarical)\n- Optional leading and trailing slots\n- Click handlers for interactive tags\n- Seamless border radius handling for split sections\n\nUsage Examples\n\nBasic Split Tag\n\nSimple split tag with primary and secondary sections",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n\n\nTagConfig Properties\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n    ]}\n    isHoverable={true}...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "TagConfig Properties",
                "level": 3,
                "id": "tagconfig-properties"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Split Tag",
                "level": 3,
                "id": "basic-split-tag"
            }
        ]
    },
    "stat-card": {
        "title": "Stat Card",
        "description": "The StatCard component displays key metrics and statistics in a card format, with support for icons, trends, and various styling options for dashboard and analytics interfaces.",
        "path": "components/stat-card",
        "slug": "stat-card",
        "category": "components",
        "tags": ["stat-card", "component", "metrics"],
        "content": "Usage\n\n\n\nAPI Reference\n\n\n\nStatCardChange API Reference\n\n\n\nChartDataPoint API Reference\n\n\n\nFeatures\n\n- Four visual variants: Line chart, Bar chart, Progress bar, and Number only\n- Built-in chart rendering with Recharts integration\n- Change indicators with increase/decrease arrows and percentages\n- Icon support for title and action areas\n- Help tooltip functionality\n- Responsive design with customizable dimensions\n- Progress bar with pattern background\n- Interactive tooltips for chart data\n- Automatic color theming based on trend direction\n- Flexible layout with header and chart sections\n\nUsage Examples\n\nBasic Number Stat Card\n\nSimple stat card showing only a number value\n\n\n\nLine Chart Stat Card\n\nStat card with line chart visualization\n\n\n\nBar Chart Stat Card\n\nStat card with bar chart visualization\n\n\n\nProgress Bar Stat Card\n\nStat card with progress bar showing completion percentage\n\n\n\nStat Card with Help Tooltip\n\nStat card with help icon and tooltip\n\n\n\nStat Card with Action Icon\n\nStat card with action icon in the header\n\n\n\nComponent Tokens\n\nYou can style the stat card component using the following tokens:",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n\n\nStatCardChange API Reference\n\n\n\nChartDataPoint API Reference\n\n\n\nFeatures\n\n- Four visual variants: Line chart, Bar chart, Pro...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "StatCardChange API Reference",
                "level": 2,
                "id": "statcardchange-api-reference"
            },
            {
                "title": "ChartDataPoint API Reference",
                "level": 2,
                "id": "chartdatapoint-api-reference"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Number Stat Card",
                "level": 3,
                "id": "basic-number-stat-card"
            },
            {
                "title": "Line Chart Stat Card",
                "level": 3,
                "id": "line-chart-stat-card"
            },
            {
                "title": "Bar Chart Stat Card",
                "level": 3,
                "id": "bar-chart-stat-card"
            },
            {
                "title": "Progress Bar Stat Card",
                "level": 3,
                "id": "progress-bar-stat-card"
            },
            {
                "title": "Stat Card with Help Tooltip",
                "level": 3,
                "id": "stat-card-with-help-tooltip"
            },
            {
                "title": "Stat Card with Action Icon",
                "level": 3,
                "id": "stat-card-with-action-icon"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            }
        ]
    },
    "switch": {
        "title": "Switch",
        "description": "The Switch component provides a toggle control for enabling or disabling features, with smooth animations and clear visual feedback for binary state changes.",
        "path": "components/switch",
        "slug": "switch",
        "category": "components",
        "tags": ["switch", "component", "toggle", "form", "input"],
        "content": "Usage\n\n\n\nAPI Reference\n\nSwitch Props\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'disabled',\n                hintText: 'Whether the switch is disabled and non-interactive',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'required',\n                hintText: 'Whether the switch is required (shows asterisk)',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            {\n                content: 'error',\n                hintText: 'Whether the switch is in an error state',\n            },\n            { content: 'boolean', hintText: 'boolean' },\n            { content: 'false' },\n        ],\n        [\n            { content: 'size', hintText: 'The size variant of the switch' },\n            { content: 'SwitchSize', hintText: 'enum' },\n            { content: 'SwitchSize.MEDIUM' },\n        ],\n        [\n            { content: 'label', hintText: 'The label text for the switch' },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'subtext',\n                hintText: 'Optional descriptive text displayed below the label',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'slot',\n                hintText: 'Optional element to display alongside the label',\n            },\n            { content: 'ReactNode', hintText: 'React node' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'name',\n                hintText: 'The name attribute for form grouping',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'value',\n                hintText: 'The value associated with the switch',\n            },\n            { content: 'string', hintText: 'string' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nSwitchGroup Props\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Two size variants (small, medium)\n- Switch group management with multiple selections\n- Optional subtext for additional context\n- Optional slot for badges, icons, or other elements\n- Required field indicator (asterisk)\n- Error state styling\n- Disabled state support\n- Controlled and uncontrolled modes\n- Smooth animations and transitions\n- Accessible by default\n- Built on native HTML button elements\n- Customizable styling through tokens\n\nUsage Examples\n\nBasic Switch\n\nSimple switch with label\n\n\n\nSwitch with Subtext\n\nSwitch with additional descriptive text\n\n\n\nSwitch with Slot\n\nSwitch with additional elements (badges, icons, etc.)\n\n\n\nDifferent Sizes\n\nSwitches with different size variants\n\n\n\nSwitch States\n\nSwitches in various states\n\n\n\nSwitch Group\n\nGroup of switches with multiple selections\n\n\n\nControlled vs Uncontrolled\n\nSwitches with different state management approaches\n\n\n\nIndividual Switches\n\nSwitches used outside of a group\n\n\n\nComplex Form Example\n\nComplete form with switch group\n\n\n\nDisabled Switch Group\n\nSwitch group with all options disabled\n\n\n\nSwitch with Different Content\n\nSwitches with various content types\n\n\n\nComponent Tokens\n\nYou can style the switch component using the following tokens:\n\n\n\nEnums\n\nSwitchSize\n\n\n\nType Definitions\n\nSwitchState\n\n\n\nSwitchIndicatorState\n\n\n\nAccessibility Features\n\nThe Switch component includes several accessibility features:\n\n- Proper ARIA attributes: Uses role=\"switch\" and aria-checked for screen readers\n- Keyboard navigation: Supports keyboard interaction (Space, Enter, Arrow keys)\n- Screen reader support: Proper labeling and state announcements\n- Focus management: Clear focus indicators and keyboard focus\n- Required field indication: Visual and programmatic indication of required fields\n- Error state communication: Clear error state communication to assistive technologies\n- Group semantics: Proper switch group semantics for screen readers\n- Smooth animations: Provides visual feedback for state changes\n- High contrast support: Maintains accessibility in high contrast modes",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\nSwitch Props\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Switch Props",
                "level": 3,
                "id": "switch-props"
            },
            {
                "title": "SwitchGroup Props",
                "level": 3,
                "id": "switchgroup-props"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Switch",
                "level": 3,
                "id": "basic-switch"
            },
            {
                "title": "Switch with Subtext",
                "level": 3,
                "id": "switch-with-subtext"
            },
            {
                "title": "Switch with Slot",
                "level": 3,
                "id": "switch-with-slot"
            },
            {
                "title": "Different Sizes",
                "level": 3,
                "id": "different-sizes"
            },
            {
                "title": "Switch States",
                "level": 3,
                "id": "switch-states"
            },
            {
                "title": "Switch Group",
                "level": 3,
                "id": "switch-group"
            },
            {
                "title": "Controlled vs Uncontrolled",
                "level": 3,
                "id": "controlled-vs-uncontrolled"
            },
            {
                "title": "Individual Switches",
                "level": 3,
                "id": "individual-switches"
            },
            {
                "title": "Complex Form Example",
                "level": 3,
                "id": "complex-form-example"
            },
            {
                "title": "Disabled Switch Group",
                "level": 3,
                "id": "disabled-switch-group"
            },
            {
                "title": "Switch with Different Content",
                "level": 3,
                "id": "switch-with-different-content"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "SwitchSize",
                "level": 3,
                "id": "switchsize"
            },
            {
                "title": "Type Definitions",
                "level": 2,
                "id": "type-definitions"
            },
            {
                "title": "SwitchState",
                "level": 3,
                "id": "switchstate"
            },
            {
                "title": "SwitchIndicatorState",
                "level": 3,
                "id": "switchindicatorstate"
            },
            {
                "title": "Accessibility Features",
                "level": 2,
                "id": "accessibility-features"
            }
        ]
    },
    "tabs": {
        "title": "Tabs",
        "description": "The Tabs component provides a way to organize content into multiple sections that can be switched between, with support for different styles and configurations.",
        "path": "components/tabs",
        "slug": "tabs",
        "category": "components",
        "tags": ["tabs", "component", "navigation"],
        "content": "Usage\n\n\n\nAPI Reference\n\nTabs Props\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'variant',\n                hintText: 'The visual style variant of the tabs',\n            },\n            { content: 'TabsVariant', hintText: 'enum' },\n            { content: 'TabsVariant.UNDERLINE' },\n        ],\n        [\n            { content: 'size', hintText: 'The size of the tabs' },\n            { content: 'TabsSize', hintText: 'enum' },\n            { content: 'TabsSize.MD' },\n        ],\n    ]}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nTabsList Props\n\n\n\nTabsTrigger Props\n\n\n\nTabsContent Props\n\n\n\nFeatures\n\n- Multiple visual variants (underline, boxed, floating)\n- Two sizes (medium, large)\n- Support for icons in tab triggers\n- Expandable tabs to fill container width\n- Fit-content option for compact layouts\n- Controlled and uncontrolled modes\n- Accessible keyboard navigation\n- Smooth transitions and hover states\n\nUsage Examples\n\nBasic Tabs\n\nSimple tabs with underline variant\n\n\n\nBoxed Tabs\n\nTabs with boxed variant for a more prominent appearance\n\n\n\nTabs with Icons\n\nTabs with leading and trailing icons\n\n\n\nLarge Tabs\n\nTabs with large size for better touch targets\n\n\n\nExpanded Tabs\n\nTabs that expand to fill the container width\n\n\n\nControlled Tabs\n\nTabs with controlled state management\n\n\n\nComponent Tokens\n\nYou can style the tabs component using the following tokens:",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\nTabs Props\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                co...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Tabs Props",
                "level": 3,
                "id": "tabs-props"
            },
            {
                "title": "TabsList Props",
                "level": 3,
                "id": "tabslist-props"
            },
            {
                "title": "TabsTrigger Props",
                "level": 3,
                "id": "tabstrigger-props"
            },
            {
                "title": "TabsContent Props",
                "level": 3,
                "id": "tabscontent-props"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Tabs",
                "level": 3,
                "id": "basic-tabs"
            },
            {
                "title": "Boxed Tabs",
                "level": 3,
                "id": "boxed-tabs"
            },
            {
                "title": "Tabs with Icons",
                "level": 3,
                "id": "tabs-with-icons"
            },
            {
                "title": "Large Tabs",
                "level": 3,
                "id": "large-tabs"
            },
            {
                "title": "Expanded Tabs",
                "level": 3,
                "id": "expanded-tabs"
            },
            {
                "title": "Controlled Tabs",
                "level": 3,
                "id": "controlled-tabs"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            }
        ]
    },
    "tag": {
        "title": "Tag",
        "description": "The Tag component is a versatile UI element used for displaying labels, categories, and status indicators with multiple variants, colors, and interactive options.",
        "path": "components/tag",
        "slug": "tag",
        "category": "components",
        "tags": ["tag", "component", "label"],
        "content": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'splitTagPosition',\n                hintText: 'Position for split tag styling',\n            },\n            { content: \"'left' | 'right'\", hintText: 'string union' },\n            { content: '' },\n        ],\n    ]}\n    isHoverable={true}\n    className=\"mb-8\"\n    emptyMessage=\"No props available\"\n    loadingMessage=\"Loading props...\"\n/>\n\nFeatures\n\n- Multiple tag variants (noFill, attentive, subtle)\n- Six color themes (neutral, primary, success, error, warning, purple)\n- Four sizes (xs, sm, md, lg)\n- Two shape options (rounded, squarical)\n- Optional click functionality\n- Left and right slot support for icons or additional content\n- Split tag positioning for special styling\n- Responsive design with proper spacing\n- Accessible keyboard navigation\n\nUsage Examples\n\nBasic Tag\n\nSimple tag with text content\n\n\n\nSuccess Tag\n\nTag with success styling\n\n\n\nInteractive Tag\n\nClickable tag with custom handler\n\n\n\nTag with Icon\n\nTag with left slot icon\n\n\n\nWarning Tag\n\nTag with warning styling and right slot\n\n\n\nLarge Rounded Tag\n\nTag with large size and rounded shape\n\n\n\nNo Fill Tag\n\nTag with no background fill\n\n\n\nSplit Tag\n\nTag with split positioning for special styling",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n void', hintText: 'function' },\n            { content: '' },\n        ],\n        [\n            {\n                content: 'spli...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Tag",
                "level": 3,
                "id": "basic-tag"
            },
            {
                "title": "Success Tag",
                "level": 3,
                "id": "success-tag"
            },
            {
                "title": "Interactive Tag",
                "level": 3,
                "id": "interactive-tag"
            },
            {
                "title": "Tag with Icon",
                "level": 3,
                "id": "tag-with-icon"
            },
            {
                "title": "Warning Tag",
                "level": 3,
                "id": "warning-tag"
            },
            {
                "title": "Large Rounded Tag",
                "level": 3,
                "id": "large-rounded-tag"
            },
            {
                "title": "No Fill Tag",
                "level": 3,
                "id": "no-fill-tag"
            },
            {
                "title": "Split Tag",
                "level": 3,
                "id": "split-tag"
            }
        ]
    },
    "tooltip": {
        "title": "Tooltip",
        "description": "The Tooltip component displays additional information when users hover over or focus on elements, providing contextual help and explanations without cluttering the interface.",
        "path": "components/tooltip",
        "slug": "tooltip",
        "category": "components",
        "tags": ["tooltip", "component", "help", "hover", "contextual"],
        "content": "Usage\n\n\n\nAPI Reference\n\n\n\nFeatures\n\n- Multiple positioning options (top, right, bottom, left)\n- Flexible alignment (start, center, end)\n- Two size variants (small, large)\n- Optional arrow indicator\n- Icon slot support with left/right positioning\n- Configurable delay and offset\n- Controlled and uncontrolled modes\n- Accessible by default\n- Customizable styling through tokens\n\nUsage Examples\n\nBasic Tooltip\n\nSimple tooltip with text content\n\n\n\nTooltip with Different Positions\n\nTooltips can be positioned on different sides of the trigger element\n\n\n\nTooltip with Icon Slot\n\nTooltip with an icon displayed alongside the content\n\n\n\nLarge Tooltip\n\nTooltip with larger size for more content\n\n\n\nTooltip without Arrow\n\nTooltip without the pointing arrow\n\n\n\nControlled Tooltip\n\nTooltip with controlled visibility state\n\n\n\nComponent Tokens\n\nYou can style the tooltip component using the following tokens:\n\n\n\nEnums\n\nTooltipSide\n\n\n\nTooltipAlign\n\n\n\nTooltipSize\n\n\n\nTooltipSlotDirection",
        "excerpt": "Usage\n\n\n\nAPI Reference\n\n\n\nFeatures\n\n- Multiple positioning options (top, right, bottom, left)\n- Flexible alignment (start, center, end)\n- Two size var...",
        "sections": [
            {
                "title": "Usage",
                "level": 2,
                "id": "usage"
            },
            {
                "title": "API Reference",
                "level": 2,
                "id": "api-reference"
            },
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Usage Examples",
                "level": 2,
                "id": "usage-examples"
            },
            {
                "title": "Basic Tooltip",
                "level": 3,
                "id": "basic-tooltip"
            },
            {
                "title": "Tooltip with Different Positions",
                "level": 3,
                "id": "tooltip-with-different-positions"
            },
            {
                "title": "Tooltip with Icon Slot",
                "level": 3,
                "id": "tooltip-with-icon-slot"
            },
            {
                "title": "Large Tooltip",
                "level": 3,
                "id": "large-tooltip"
            },
            {
                "title": "Tooltip without Arrow",
                "level": 3,
                "id": "tooltip-without-arrow"
            },
            {
                "title": "Controlled Tooltip",
                "level": 3,
                "id": "controlled-tooltip"
            },
            {
                "title": "Component Tokens",
                "level": 2,
                "id": "component-tokens"
            },
            {
                "title": "Enums",
                "level": 2,
                "id": "enums"
            },
            {
                "title": "TooltipSide",
                "level": 3,
                "id": "tooltipside"
            },
            {
                "title": "TooltipAlign",
                "level": 3,
                "id": "tooltipalign"
            },
            {
                "title": "TooltipSize",
                "level": 3,
                "id": "tooltipsize"
            },
            {
                "title": "TooltipSlotDirection",
                "level": 3,
                "id": "tooltipslotdirection"
            }
        ]
    },
    "getting-started": {
        "title": "Getting Started",
        "description": "Welcome to the documentation! This is a sample MDX file that demonstrates the routing system.",
        "path": "getting-started",
        "slug": "getting-started",
        "category": "documentation",
        "tags": ["component", "getting-started"],
        "content": "Features\n\n- MDX Support: Full MDX rendering with custom components\n- Dynamic Routing: Automatic routing based on file structure\n- Syntax Highlighting: Code blocks with syntax highlighting\n\nCode Example\n\n\n\nNext Steps\n\n1. Create more MDX files in the docs folder\n2. They will automatically be available at /docs/[filename]\n3. Customize the components in mdx-components.tsx",
        "excerpt": "Features\n\n- MDX Support: Full MDX rendering with custom components\n- Dynamic Routing: Automatic routing based on file structure\n- Syntax Highlighting:...",
        "sections": [
            {
                "title": "Features",
                "level": 2,
                "id": "features"
            },
            {
                "title": "Code Example",
                "level": 2,
                "id": "code-example"
            },
            {
                "title": "Next Steps",
                "level": 2,
                "id": "next-steps"
            }
        ]
    }
}
