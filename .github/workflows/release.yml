name: Release

on:
    push:
        branches:
            - main
            - dev
        paths-ignore:
            - 'docs/CHANGELOG.md'
    workflow_dispatch:
        inputs:
            version_type:
                description: 'Version bump type'
                required: true
                default: 'patch'
                type: choice
                options:
                    - patch
                    - minor
                    - major
            dry_run:
                description: 'Dry run (skip publishing)'
                required: false
                default: false
                type: boolean

concurrency:
    group: release-${{ github.ref }}
    cancel-in-progress: true

jobs:
    release:
        name: Publish Release
        runs-on: ubuntu-latest
        environment: npm
        outputs:
            version: ${{ steps.bump_version.outputs.new_version }}
            tag: ${{ steps.bump_version.outputs.tag }}
            dry_run: ${{ steps.config.outputs.dry_run }}
            is_beta: ${{ steps.bump_version.outputs.is_beta }}

        steps:
            - name: Checkout Repo
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Check if should skip release
              id: skip_check
              run: |
                  COMMIT_MESSAGE=$(git log -1 --pretty=%B)
                  echo "Commit message: $COMMIT_MESSAGE"

                  # Skip if commit message contains [skip ci] or is a release commit
                  if [[ "$COMMIT_MESSAGE" == *"[skip ci]"* ]] || [[ "$COMMIT_MESSAGE" == *"chore(release):"* ]]; then
                    echo "Skipping release workflow"
                    echo "should_skip=true" >> $GITHUB_OUTPUT
                  else
                    echo "should_skip=false" >> $GITHUB_OUTPUT
                  fi

            - name: Setup Node.js 22 and pnpm
              if: steps.skip_check.outputs.should_skip != 'true'
              uses: actions/setup-node@v4
              with:
                  node-version: 22
                  registry-url: 'https://registry.npmjs.org'

            - name: Enable corepack & install deps
              if: steps.skip_check.outputs.should_skip != 'true'
              run: |
                  corepack enable
                  pnpm install --frozen-lockfile

            - name: Configure Dry Run
              if: steps.skip_check.outputs.should_skip != 'true'
              id: config
              run: |
                  if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.dry_run }}" == "true" ]]; then
                    echo "dry_run=true" >> $GITHUB_OUTPUT
                  else
                    echo "dry_run=false" >> $GITHUB_OUTPUT
                  fi

            - name: Get Current Version
              if: steps.skip_check.outputs.should_skip != 'true'
              id: current_version
              run: |
                  CURRENT=$(node -p "require('./packages/blend/package.json').version")
                  echo "version=$CURRENT" >> $GITHUB_OUTPUT
                  echo "Current version: $CURRENT"

            - name: Clean Existing Tags
              if: steps.skip_check.outputs.should_skip != 'true'
              run: |
                  # Clean up any existing local tags to avoid conflicts
                  git tag -l | xargs -r git tag -d
                  git fetch --tags

            - name: Bump Version
              if: steps.skip_check.outputs.should_skip != 'true'
              id: bump_version
              run: |
                  cd packages/blend
                  BRANCH="${GITHUB_REF_NAME}"
                  VERSION_TYPE="${{ inputs.version_type || 'patch' }}"
                  CURRENT_VERSION=$(node -p "require('./package.json').version")

                  echo "Branch: $BRANCH"
                  echo "Version type: $VERSION_TYPE"
                  echo "Current version: $CURRENT_VERSION"

                  if [[ "$BRANCH" == "dev" ]]; then
                    # For dev branch: create beta version
                    if [[ "$CURRENT_VERSION" == *"-beta" ]]; then
                      # Already a beta version, just use it as is (no multiple betas)
                      NEW_VERSION="$CURRENT_VERSION"
                      echo "Already a beta version: $NEW_VERSION"
                    else
                      # Create new beta version
                      npm version "$VERSION_TYPE" --no-git-tag-version
                      BUMPED_VERSION=$(node -p "require('./package.json').version")
                      NEW_VERSION="${BUMPED_VERSION}-beta"
                      npm pkg set version="$NEW_VERSION"
                      echo "Created new beta version: $NEW_VERSION"
                    fi
                    
                    echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
                    echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
                    echo "is_beta=true" >> $GITHUB_OUTPUT
                    echo "npm_tag=beta" >> $GITHUB_OUTPUT
                    
                  elif [[ "$BRANCH" == "main" ]]; then
                    # For main branch: create stable version
                    if [[ "$CURRENT_VERSION" == *"-beta" ]]; then
                      # Remove -beta suffix for stable release
                      STABLE_VERSION="${CURRENT_VERSION%-beta}"
                      npm pkg set version="$STABLE_VERSION"
                      NEW_VERSION="$STABLE_VERSION"
                      echo "Converted beta to stable: $NEW_VERSION"
                    else
                      # Normal version bump for main
                      npm version "$VERSION_TYPE" --no-git-tag-version
                      NEW_VERSION=$(node -p "require('./package.json').version")
                      echo "Bumped stable version: $NEW_VERSION"
                    fi
                    
                    echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
                    echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
                    echo "is_beta=false" >> $GITHUB_OUTPUT
                    echo "npm_tag=latest" >> $GITHUB_OUTPUT
                  fi

            - name: Generate Changelog
              if: steps.skip_check.outputs.should_skip != 'true'
              run: |
                  VERSION=${{ steps.bump_version.outputs.new_version }}
                  LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

                  # Create docs directory if it doesn't exist
                  mkdir -p docs

                  echo "# Changelog for v$VERSION" > docs/CHANGELOG.md
                  echo "" >> docs/CHANGELOG.md
                  if [[ -n "$LAST_TAG" ]]; then
                    git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" >> docs/CHANGELOG.md
                  else
                    git log -n 20 --pretty=format:"- %s (%h)" >> docs/CHANGELOG.md
                  fi

            - name: Format Generated Files
              if: steps.skip_check.outputs.should_skip != 'true'
              run: |
                  pnpm format

            - name: Build Package
              if: steps.skip_check.outputs.should_skip != 'true'
              run: pnpm --filter @juspay/blend-design-system build

            - name: Upload Artifacts
              if: steps.skip_check.outputs.should_skip != 'true'
              uses: actions/upload-artifact@v4
              with:
                  name: build-${{ steps.bump_version.outputs.new_version }}
                  path: |
                      packages/blend/dist
                      packages/blend/package.json
                      docs/CHANGELOG.md

            - name: Create Release Tag
              if: steps.skip_check.outputs.should_skip != 'true' && steps.config.outputs.dry_run != 'true'
              run: |
                  VERSION=${{ steps.bump_version.outputs.new_version }}
                  TAG="v$VERSION"
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
                  git tag "$TAG" -m "Release $TAG"
                  git push origin "$TAG"

            - name: Create Version Update PR
              if: steps.skip_check.outputs.should_skip != 'true' && steps.config.outputs.dry_run != 'true'
              uses: peter-evans/create-pull-request@v6
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  branch: release/update-version-${{ steps.bump_version.outputs.new_version }}
                  title: 'chore(release): ${{ steps.bump_version.outputs.tag }}'
                  body: |
                      Release ${{ steps.bump_version.outputs.tag }}

                      - Bump version to ${{ steps.bump_version.outputs.new_version }}
                      - Update changelog

                      This PR was automatically created by the release workflow.

                      **Changes included:**
                      - Updated package.json version
                      - Generated changelog
                      - Formatted files

                      **Note:** This PR should be merged to update the version in the repository after the release has been published.
                  labels: |
                      automated
                      release
                  assignees: ${{ github.actor }}
                  commit-message: |
                      chore(release): ${{ steps.bump_version.outputs.tag }}

                      - Bump version to ${{ steps.bump_version.outputs.new_version }}
                      - Update changelog

                      [skip ci]
                  add-paths: |
                      packages/blend/package.json
                      docs/CHANGELOG.md
                      .

            - name: Verify NPM Token
              if: steps.skip_check.outputs.should_skip != 'true'
              run: |
                  # Debug: Check if token is set (without revealing it)
                  if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
                    echo "NPM_TOKEN secret is not set!"
                    exit 1
                  else
                    echo "NPM_TOKEN secret is configured"
                  fi

                  # Test authentication using NODE_AUTH_TOKEN
                  echo "Testing NPM authentication..."
                  npm whoami || echo "NPM authentication test failed, but continuing..."
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: Publish to NPM
              if: steps.skip_check.outputs.should_skip != 'true' && steps.config.outputs.dry_run != 'true'
              run: |
                  cd packages/blend

                  PACKAGE_NAME=$(node -p "require('./package.json').name")
                  NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
                  NPM_TAG="${{ steps.bump_version.outputs.npm_tag }}"

                  echo "Publishing $PACKAGE_NAME@$NEW_VERSION to NPM with tag: $NPM_TAG"

                  # Check if version already exists
                  if npm view "$PACKAGE_NAME@$NEW_VERSION" version 2>/dev/null; then
                    echo "Version $NEW_VERSION already exists on NPM, skipping publish"
                    exit 0
                  fi

                  # Publish to NPM with appropriate tag
                  npm publish --access public --tag "$NPM_TAG"
                  echo "Successfully published $PACKAGE_NAME@$NEW_VERSION to NPM with tag $NPM_TAG"
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: Create GitHub Release
              if: steps.skip_check.outputs.should_skip != 'true' && steps.config.outputs.dry_run != 'true'
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ steps.bump_version.outputs.tag }}
                  name: Release ${{ steps.bump_version.outputs.tag }}
                  body_path: docs/CHANGELOG.md
                  draft: false
                  prerelease: ${{ steps.bump_version.outputs.is_beta == 'true' }}

    backmerge:
        name: Back-merge main → dev
        needs: release
        if: github.ref == 'refs/heads/main' && needs.release.outputs.dry_run != 'true'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Create PR main → dev
              uses: peter-evans/create-pull-request@v6
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  base: dev
                  branch: backmerge/main-to-dev-${{ needs.release.outputs.version }}
                  title: 'chore: backmerge release ${{ needs.release.outputs.version }} to dev'
                  body: |
                      Backmerging release changes from `main` into `dev`
                  labels: |
                      automated
                      release
                  assignees: ${{ github.actor }}
