name: Release

on:
    push:
        branches:
            - main
            - dev
    workflow_dispatch:
        inputs:
            version_type:
                description: 'Version bump type'
                required: true
                default: 'auto'
                type: choice
                options:
                    - auto
                    - patch
                    - minor
                    - major
                    - prepatch
                    - preminor
                    - premajor
            custom_version:
                description: 'Custom version (optional)'
                required: false
                type: string
            dry_run:
                description: 'Dry run (skip publishing)'
                required: false
                default: false
                type: boolean

concurrency:
    group: release-${{ github.ref }}
    cancel-in-progress: true

jobs:
    release:
        name: Publish Release
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.bump_version.outputs.new_version }}
            tag: ${{ steps.bump_version.outputs.tag }}
            dry_run: ${{ steps.config.outputs.dry_run }}

        steps:
            - name: Checkout Repo
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Setup Node.js 22 and pnpm
              uses: actions/setup-node@v4
              with:
                  node-version: 22
                  registry-url: 'https://registry.npmjs.org/'

            - name: Enable corepack & install deps
              run: |
                  corepack enable
                  pnpm install --frozen-lockfile

            - name: Configure Dry Run
              id: config
              run: |
                  if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.dry_run }}" == "true" ]]; then
                    echo "dry_run=true" >> $GITHUB_OUTPUT
                  else
                    echo "dry_run=false" >> $GITHUB_OUTPUT
                  fi

            - name: Determine Release Type
              id: release_type
              run: |
                  BRANCH="${GITHUB_REF_NAME}"
                  EVENT="${GITHUB_EVENT_NAME}"
                  CUSTOM_VERSION="${{ inputs.custom_version }}"
                  VERSION_TYPE="${{ inputs.version_type }}"

                  if [[ "$EVENT" == "workflow_dispatch" && -n "$CUSTOM_VERSION" ]]; then
                    echo "type=custom" >> $GITHUB_OUTPUT
                    echo "semver=custom" >> $GITHUB_OUTPUT
                    echo "custom_version=$CUSTOM_VERSION" >> $GITHUB_OUTPUT
                    echo "npm_tag=latest" >> $GITHUB_OUTPUT

                  elif [[ "$BRANCH" == "dev" ]]; then
                    echo "type=beta" >> $GITHUB_OUTPUT
                    if [[ "$VERSION_TYPE" == "auto" ]]; then
                      echo "semver=prepatch" >> $GITHUB_OUTPUT
                    else
                      echo "semver=pre$VERSION_TYPE" >> $GITHUB_OUTPUT
                    fi
                    echo "npm_tag=beta" >> $GITHUB_OUTPUT
                    echo "preid=beta" >> $GITHUB_OUTPUT

                  else
                    echo "type=stable" >> $GITHUB_OUTPUT
                    if [[ "$VERSION_TYPE" == "auto" ]]; then
                      echo "semver=patch" >> $GITHUB_OUTPUT
                    else
                      echo "semver=$VERSION_TYPE" >> $GITHUB_OUTPUT
                    fi
                    echo "npm_tag=latest" >> $GITHUB_OUTPUT
                    echo "preid=" >> $GITHUB_OUTPUT
                  fi

            - name: Get Current Version
              id: current_version
              run: |
                  CURRENT=$(node -p "require('./packages/blend/package.json').version")
                  echo "version=$CURRENT" >> $GITHUB_OUTPUT

            - name: Bump Version
              id: bump_version
              run: |
                  cd packages/blend
                  if [[ "${{ steps.release_type.outputs.type }}" == "custom" ]]; then
                    npm version "${{ steps.release_type.outputs.custom_version }}" --no-git-tag-version
                  elif [[ "${{ steps.release_type.outputs.type }}" == "beta" ]]; then
                    npm version "${{ steps.release_type.outputs.semver }}" --preid beta --no-git-tag-version
                  else
                    npm version "${{ steps.release_type.outputs.semver }}" --no-git-tag-version
                  fi
                  VERSION=$(node -p "require('./package.json').version")
                  echo "new_version=$VERSION" >> $GITHUB_OUTPUT
                  echo "tag=v$VERSION" >> $GITHUB_OUTPUT

            - name: Clean Existing Tag
              run: |
                  TAG="${{ steps.bump_version.outputs.tag }}"
                  git tag -d "$TAG" 2>/dev/null || true
                  git push origin ":refs/tags/$TAG" || true

            - name: Generate Changelog
              run: |
                  VERSION=${{ steps.bump_version.outputs.new_version }}
                  LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

                  # Create docs directory if it doesn't exist
                  mkdir -p docs

                  echo "# Changelog for v$VERSION" > docs/CHANGELOG.md
                  echo "" >> docs/CHANGELOG.md
                  if [[ -n "$LAST_TAG" ]]; then
                    git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" >> docs/CHANGELOG.md
                  else
                    git log -n 20 --pretty=format:"- %s (%h)" >> docs/CHANGELOG.md
                  fi

            - name: Build Package
              run: pnpm --filter @juspay/blend-design-system build

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-${{ steps.bump_version.outputs.new_version }}
                  path: |
                      packages/blend/dist
                      packages/blend/package.json
                      docs/CHANGELOG.md

            - name: Commit, Tag & Push
              if: steps.config.outputs.dry_run != 'true'
              run: |
                  VERSION=${{ steps.bump_version.outputs.new_version }}
                  TAG="v$VERSION"
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
                  git add .
                  git commit -m "chore(release): $TAG

                  - Bump version to $VERSION
                  - Update changelog

                  [skip ci]"
                  git tag "$TAG" -m "Release $TAG"
                  git push origin HEAD --follow-tags

            - name: Publish to NPM
              if: steps.config.outputs.dry_run != 'true'
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
              run: |
                  cd packages/blend
                  pnpm publish --access public --tag ${{ steps.release_type.outputs.npm_tag }} --no-git-checks

            - name: Create GitHub Release
              if: steps.config.outputs.dry_run != 'true'
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ steps.bump_version.outputs.tag }}
                  name: Release ${{ steps.bump_version.outputs.tag }}
                  body_path: docs/CHANGELOG.md
                  draft: false
                  prerelease: ${{ steps.release_type.outputs.type == 'beta' }}

    backmerge:
        name: Back-merge main → dev
        needs: release
        if: github.ref == 'refs/heads/main' && needs.release.outputs.dry_run != 'true'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Create PR main → dev
              uses: peter-evans/create-pull-request@v6
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  base: dev
                  branch: backmerge/main-to-dev-${{ needs.release.outputs.version }}
                  title: 'chore: backmerge release ${{ needs.release.outputs.version }} to dev'
                  body: |
                      Backmerging release changes from `main` into `dev`
                  labels: |
                      automated
                      release
                  assignees: ${{ github.actor }}
